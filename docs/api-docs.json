{
    "openapi": "3.0.0",
    "paths": {
        "/api/v1": {
            "get": {
                "description": "Returns a simple hello world message",
                "operationId": "AppController_getHello_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Hello world message returned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "example": "Hello World!"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Get hello message",
                "tags": [
                    "App"
                ]
            }
        },
        "/api/v1/webhooks/{service}": {
            "post": {
                "description": "Processes webhook events from external services with signature verification",
                "operationId": "WebhooksController_processWebhook_v1",
                "parameters": [
                    {
                        "name": "service",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Webhook processed successfully"
                    },
                    "400": {
                        "description": "Invalid webhook payload"
                    },
                    "401": {
                        "description": "Invalid API key"
                    },
                    "500": {
                        "description": "Internal server error occurred while processing webhook"
                    }
                },
                "summary": "Generic webhook endpoint for external services. Verifies signature internally.",
                "tags": [
                    "Webhooks"
                ]
            }
        },
        "/api/v1/webhooks/razorpay": {
            "post": {
                "operationId": "WebhooksController_processRazorpayWebhook_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Razorpay webhook processed successfully"
                    },
                    "400": {
                        "description": "Invalid Razorpay webhook payload"
                    },
                    "401": {
                        "description": "Invalid API key"
                    },
                    "500": {
                        "description": "Internal server error occurred while processing Razorpay webhook"
                    }
                },
                "summary": "Razorpay webhook endpoint (verifies signature internally)",
                "tags": [
                    "Webhooks"
                ]
            }
        },
        "/api/v1/webhooks/razorpay/test": {
            "post": {
                "operationId": "WebhooksController_testRazorpayWebhook_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Test Razorpay webhook processed"
                    },
                    "400": {
                        "description": "Invalid test Razorpay payload"
                    },
                    "401": {
                        "description": "Invalid API key"
                    },
                    "500": {
                        "description": "Internal server error occurred while processing test Razorpay webhook"
                    }
                },
                "summary": "Test Razorpay webhook endpoint (development)",
                "tags": [
                    "Webhooks"
                ]
            }
        },
        "/api/v1/webhooks/{service}/test": {
            "post": {
                "description": "Test webhook endpoint for development and debugging",
                "operationId": "WebhooksController_testWebhook_v1",
                "parameters": [
                    {
                        "name": "service",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test webhook processed"
                    },
                    "400": {
                        "description": "Invalid test payload"
                    },
                    "401": {
                        "description": "Invalid API key"
                    },
                    "500": {
                        "description": "Internal server error occurred while processing test webhook"
                    }
                },
                "summary": "Test webhook endpoint for development",
                "tags": [
                    "Webhooks"
                ]
            }
        },
        "/api/v1/payments/setup-intent": {
            "post": {
                "description": "Creates a setup intent for saving payment methods with Strong Customer Authentication",
                "operationId": "PaymentsController_createSetupIntent_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSetupIntentDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Setup intent created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "setup_intent": {
                                            "$ref": "#/components/schemas/RazorpayTokenResponseDto"
                                        },
                                        "client_secret": {
                                            "type": "string",
                                            "example": "setup_secret_1234567890"
                                        },
                                        "customer_id": {
                                            "type": "string",
                                            "example": "cust_1234567890"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create setup intent for SCA compliance",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/setup-intent/{setupIntentId}": {
            "get": {
                "description": "Retrieves the status of a setup intent",
                "operationId": "PaymentsController_getSetupIntent_v1",
                "parameters": [
                    {
                        "name": "setupIntentId",
                        "required": true,
                        "in": "path",
                        "description": "Setup Intent ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Setup intent status retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RazorpayTokenResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Setup intent not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get setup intent status",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/create-intent/{quoteId}": {
            "post": {
                "description": "Creates an order for the specified quote",
                "operationId": "PaymentsController_createPaymentIntent_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePaymentIntentDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RazorpayOrderResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Access denied - Can only create payment for own quotes"
                    },
                    "404": {
                        "description": "Quote not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create payment order for a quote",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/confirm/{quoteId}": {
            "post": {
                "description": "Confirms a payment and processes the payment",
                "operationId": "PaymentsController_confirmPayment_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfirmPaymentDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment confirmed and processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Access denied - Can only confirm payment for own quotes"
                    },
                    "404": {
                        "description": "Quote or payment intent not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Confirm and process payment",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/methods": {
            "get": {
                "description": "Lists all payment methods for the current user",
                "operationId": "PaymentsController_getPaymentMethods_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Payment methods retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentMethodResponseDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get user payment methods",
                "tags": [
                    "Payments"
                ]
            },
            "post": {
                "description": "Adds a new payment method to the user account",
                "operationId": "PaymentsController_addPaymentMethod_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddPaymentMethodDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment method added successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Add payment method",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/methods/{methodId}": {
            "delete": {
                "description": "Removes a payment method from the user account",
                "operationId": "PaymentsController_removePaymentMethod_v1",
                "parameters": [
                    {
                        "name": "methodId",
                        "required": true,
                        "in": "path",
                        "description": "Payment method ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Payment method removed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Not authorized to remove this payment method"
                    },
                    "404": {
                        "description": "Payment method not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Remove payment method",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/methods/default": {
            "get": {
                "description": "Retrieves the user default payment method",
                "operationId": "PaymentsController_getDefaultPaymentMethod_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Default payment method retrieved successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "No default payment method found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get default payment method",
                "tags": [
                    "Payments"
                ]
            },
            "put": {
                "description": "Sets a payment method as the user default",
                "operationId": "PaymentsController_setDefaultPaymentMethod_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetDefaultPaymentMethodDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default payment method set successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Not authorized to set this payment method as default"
                    },
                    "404": {
                        "description": "Payment method not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Set default payment method",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/history": {
            "get": {
                "description": "Retrieves paginated payment history for the current user",
                "operationId": "PaymentsController_getPaymentHistory_v1",
                "parameters": [
                    {
                        "name": "status",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "enum": [
                                "pending",
                                "processing",
                                "completed",
                                "failed",
                                "refunded"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment history retrieved successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get payment history",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/{paymentId}": {
            "get": {
                "description": "Retrieves details for a specific payment",
                "operationId": "PaymentsController_getPayment_v1",
                "parameters": [
                    {
                        "name": "paymentId",
                        "required": true,
                        "in": "path",
                        "description": "Payment ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Not authorized to view this payment"
                    },
                    "404": {
                        "description": "Payment not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get payment details",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/intents/{quoteId}": {
            "get": {
                "description": "Retrieves existing payment intent for a quote",
                "operationId": "PaymentsController_getPaymentIntentForQuote_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment intent retrieved successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Not authorized to view this payment intent"
                    },
                    "404": {
                        "description": "Payment intent not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get payment intent for quote",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/intent-status/{intentId}": {
            "get": {
                "description": "Retrieves status for a specific payment intent",
                "operationId": "PaymentsController_getPaymentIntentStatus_v1",
                "parameters": [
                    {
                        "name": "intentId",
                        "required": true,
                        "in": "path",
                        "description": "Payment intent ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment intent status retrieved successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Not authorized to view this payment intent"
                    },
                    "404": {
                        "description": "Payment intent not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get payment intent status",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/methods/{methodId}/validate": {
            "post": {
                "description": "Validates payment method functionality and security. Includes method testing, security checks, and compliance verification.",
                "operationId": "PaymentsController_validatePaymentMethod_v1",
                "parameters": [
                    {
                        "name": "methodId",
                        "required": true,
                        "in": "path",
                        "description": "Payment method ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment method validated successfully"
                    },
                    "400": {
                        "description": "Invalid payment method data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Not authorized to validate this payment method"
                    },
                    "404": {
                        "description": "Payment method not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while validating payment method"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Validate payment method",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/{paymentId}/receipt": {
            "get": {
                "description": "Generates a receipt for a completed payment",
                "operationId": "PaymentsController_getPaymentReceipt_v1",
                "parameters": [
                    {
                        "name": "paymentId",
                        "required": true,
                        "in": "path",
                        "description": "Payment ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment receipt generated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentReceiptResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Not authorized to view this payment receipt"
                    },
                    "404": {
                        "description": "Payment not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get payment receipt",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/{paymentId}/receipt/download": {
            "get": {
                "description": "Downloads the PDF receipt for a completed payment",
                "operationId": "PaymentsController_downloadPaymentReceipt_v1",
                "parameters": [
                    {
                        "name": "paymentId",
                        "required": true,
                        "in": "path",
                        "description": "Payment ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF receipt downloaded successfully",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Not authorized to access this receipt"
                    },
                    "404": {
                        "description": "Payment or receipt not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Download payment receipt PDF",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/payments/verify-qr": {
            "post": {
                "description": "Verifies a QR code scanned from a payment receipt to ensure authenticity",
                "operationId": "PaymentsController_verifyQrCode_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "QR code verification completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QrCodeVerificationResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid QR code data provided"
                    },
                    "404": {
                        "description": "Receipt not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Verify QR code for receipt authenticity",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/api/v1/admin/payments": {
            "get": {
                "description": "Lists all payments with pagination and filtering",
                "operationId": "PaymentsAdminController_getAllPayments_v1",
                "parameters": [
                    {
                        "name": "userId",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "enum": [
                                "pending",
                                "processing",
                                "completed",
                                "failed",
                                "refunded"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All payments retrieved successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get all payments (Admin only)",
                "tags": [
                    "Admin"
                ]
            }
        },
        "/api/v1/admin/payments/receipts": {
            "get": {
                "description": "Lists all payment receipts",
                "operationId": "PaymentsAdminController_getPaymentReceipts_v1",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment receipts retrieved successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get payment receipts (Admin only)",
                "tags": [
                    "Admin"
                ]
            }
        },
        "/api/v1/admin/payments/{paymentId}": {
            "get": {
                "description": "Retrieves details for any payment",
                "operationId": "PaymentsAdminController_getPaymentAdmin_v1",
                "parameters": [
                    {
                        "name": "paymentId",
                        "required": true,
                        "in": "path",
                        "description": "Payment ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment details retrieved successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Payment not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get payment details (Admin only)",
                "tags": [
                    "Admin"
                ]
            }
        },
        "/api/v1/admin/payments/{paymentId}/refund": {
            "post": {
                "description": "Processes a refund for a payment",
                "operationId": "PaymentsAdminController_processRefund_v1",
                "parameters": [
                    {
                        "name": "paymentId",
                        "required": true,
                        "in": "path",
                        "description": "Payment ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProcessRefundDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Refund processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RefundResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Payment not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Process refund (Admin only)",
                "tags": [
                    "Admin"
                ]
            }
        },
        "/api/v1/metrics": {
            "get": {
                "description": "Exposes application metrics in Prometheus format for monitoring and alerting",
                "operationId": "MetricsController_getMetrics_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Prometheus metrics retrieved successfully",
                        "content": {
                            "text/plain; version=0.0.4; charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving metrics"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get Prometheus metrics (Admin only)",
                "tags": [
                    "Metrics"
                ]
            }
        },
        "/api/v1/monitoring/performance": {
            "get": {
                "description": "Returns detailed performance metrics including health status, request statistics with error categorization, and system information",
                "operationId": "MonitoringController_getPerformanceMetrics_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Performance metrics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "uptime": {
                                            "type": "number",
                                            "description": "Application uptime in seconds"
                                        },
                                        "health": {
                                            "type": "object",
                                            "properties": {
                                                "status": {
                                                    "type": "string",
                                                    "enum": [
                                                        "healthy",
                                                        "warning",
                                                        "critical"
                                                    ]
                                                },
                                                "lastUpdated": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            }
                                        },
                                        "requests": {
                                            "type": "object",
                                            "properties": {
                                                "total": {
                                                    "type": "number"
                                                },
                                                "byMethod": {
                                                    "type": "object",
                                                    "additionalProperties": {
                                                        "type": "number"
                                                    }
                                                },
                                                "success": {
                                                    "type": "number"
                                                },
                                                "errors": {
                                                    "type": "object",
                                                    "properties": {
                                                        "total": {
                                                            "type": "number"
                                                        },
                                                        "totalRate": {
                                                            "type": "number"
                                                        },
                                                        "clientErrors": {
                                                            "type": "number"
                                                        },
                                                        "clientErrorRate": {
                                                            "type": "number"
                                                        },
                                                        "serverErrors": {
                                                            "type": "number"
                                                        },
                                                        "serverErrorRate": {
                                                            "type": "number"
                                                        },
                                                        "notFoundErrors": {
                                                            "type": "number"
                                                        },
                                                        "byStatus": {
                                                            "type": "object",
                                                            "additionalProperties": {
                                                                "type": "number"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "performance": {
                                            "type": "object",
                                            "properties": {
                                                "averageResponseTime": {
                                                    "type": "number"
                                                },
                                                "slowRequests": {
                                                    "type": "number"
                                                },
                                                "verySlowRequests": {
                                                    "type": "number"
                                                },
                                                "slowRequestRate": {
                                                    "type": "number"
                                                },
                                                "memoryUsage": {
                                                    "type": "object"
                                                },
                                                "cpuUsage": {
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "system": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving performance metrics"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get comprehensive performance monitoring metrics",
                "tags": [
                    "Monitoring"
                ]
            },
            "post": {
                "description": "Administrative endpoint for performance metrics operations that require admin privileges",
                "operationId": "MonitoringController_performanceMetricsAdminOperation_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Performance metrics operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid JWT token or API key"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required or insufficient API key permissions"
                    },
                    "500": {
                        "description": "Internal server error occurred during performance metrics operation"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Administrative performance metrics operation",
                "tags": [
                    "Monitoring"
                ]
            }
        },
        "/api/v1/internal/audit/logs": {
            "post": {
                "description": "Internal endpoint for creating audit log entries used by database subscribers and application services",
                "operationId": "AuditController_createAuditLog_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAuditLogDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Audit log created successfully"
                    },
                    "201": {
                        "description": "Audit log created successfully"
                    },
                    "400": {
                        "description": "Invalid audit data provided"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key"
                    },
                    "500": {
                        "description": "Internal server error occurred while creating audit log"
                    }
                },
                "summary": "Create audit log entry (Internal use only)",
                "tags": [
                    "Core Audit"
                ]
            }
        },
        "/api/v1/notifications": {
            "get": {
                "description": "Retrieves paginated list of user's notifications with filtering options",
                "operationId": "NotificationsController_getNotifications_v1",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number (1-based)",
                        "schema": {
                            "minimum": 1,
                            "default": 1,
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of items per page",
                        "schema": {
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10,
                            "example": 10,
                            "type": "number"
                        }
                    },
                    {
                        "name": "sort",
                        "required": false,
                        "in": "query",
                        "description": "Sort field (prefix with - for descending)",
                        "schema": {
                            "example": "-created_at",
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "required": false,
                        "in": "query",
                        "description": "Filter by notification type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "quote_accepted",
                                "quote_declined",
                                "payment_received",
                                "payment_completed",
                                "refund_processed",
                                "project_completed",
                                "quote_sent",
                                "request_status_changed",
                                "milestone_reached",
                                "testimonial_received",
                                "system_announcement",
                                "security_alert",
                                "comment_received",
                                "comment_approved",
                                "progress_update",
                                "milestone_completed",
                                "milestone_payment_released",
                                "payment_released",
                                "conversation_created",
                                "message_received",
                                "welcome"
                            ]
                        }
                    },
                    {
                        "name": "priority",
                        "required": false,
                        "in": "query",
                        "description": "Filter by notification priority",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "low",
                                "normal",
                                "high",
                                "urgent"
                            ]
                        }
                    },
                    {
                        "name": "is_read",
                        "required": false,
                        "in": "query",
                        "description": "Filter by read status",
                        "schema": {
                            "example": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "before",
                        "required": false,
                        "in": "query",
                        "description": "Get notifications before this date",
                        "schema": {
                            "format": "date-time",
                            "example": "2024-01-01T00:00:00Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "required": false,
                        "in": "query",
                        "description": "Get notifications after this date",
                        "schema": {
                            "format": "date-time",
                            "example": "2024-01-01T00:00:00Z",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notifications retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationListResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving notifications"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "List notifications (paginated)",
                "tags": [
                    "Notifications"
                ]
            },
            "patch": {
                "description": "Performs bulk operations on multiple notifications including read/unread status updates and deletion",
                "operationId": "NotificationsController_bulkAction_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkNotificationActionDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bulk action completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Bulk action completed",
                                        "updated_count": 10
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid bulk action data - validation failed"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error occurred while performing bulk action"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk notifications action",
                "tags": [
                    "Notifications"
                ]
            }
        },
        "/api/v1/notifications/read-all": {
            "patch": {
                "description": "Marks all unread notifications as read for the current user",
                "operationId": "NotificationsController_markAllAsRead_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "All notifications marked as read successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "All notifications marked as read",
                                        "updated_count": 5
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error occurred while marking notifications as read"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Mark all notifications as read",
                "tags": [
                    "Notifications"
                ]
            }
        },
        "/api/v1/notifications/{notificationId}": {
            "patch": {
                "description": "Marks a specific notification as read for the current user",
                "operationId": "NotificationsController_updateNotification_v1",
                "parameters": [
                    {
                        "name": "notificationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateNotificationDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Notification updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this notification"
                    },
                    "404": {
                        "description": "Notification not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while updating notification"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Mark a notification as read",
                "tags": [
                    "Notifications"
                ]
            },
            "delete": {
                "description": "Deletes a specific notification for the current user",
                "operationId": "NotificationsController_deleteNotification_v1",
                "parameters": [
                    {
                        "name": "notificationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Notification deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this notification"
                    },
                    "404": {
                        "description": "Notification not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while deleting notification"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete a notification",
                "tags": [
                    "Notifications"
                ]
            }
        },
        "/api/v1/notifications/unread-count": {
            "get": {
                "description": "Returns the count of unread notifications for the current user",
                "operationId": "NotificationsController_getUnreadCount_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Unread count retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "unread_count": 5
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving unread count"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get unread notification count",
                "tags": [
                    "Notifications"
                ]
            }
        },
        "/api/v1/projects": {
            "get": {
                "description": "Retrieves paginated list of all published projects with optional filtering",
                "operationId": "ProjectsController_getAllProjects_v1",
                "parameters": [
                    {
                        "name": "tech_stack",
                        "required": false,
                        "in": "query",
                        "description": "Filter by technology IDs (comma-separated)",
                        "schema": {}
                    },
                    {
                        "name": "tags",
                        "required": false,
                        "in": "query",
                        "description": "Filter by tag IDs (comma-separated)",
                        "schema": {}
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search in project title and description",
                        "schema": {}
                    },
                    {
                        "name": "featured",
                        "required": false,
                        "in": "query",
                        "description": "Filter by featured status",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Projects retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectListResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving projects"
                    }
                },
                "summary": "Get all published projects",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/v1/projects/tags": {
            "get": {
                "description": "Retrieves all tags used in published projects with usage counts",
                "operationId": "ProjectsController_getAllProjectTags_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Project tags retrieved successfully"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving project tags"
                    }
                },
                "summary": "Get all project tags",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/v1/projects/tech-stack": {
            "get": {
                "description": "Retrieves all technologies used in published projects with usage counts",
                "operationId": "ProjectsController_getAllTechStack_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Technology stack retrieved successfully"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving technology stack"
                    }
                },
                "summary": "Get all technology stack entries",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/v1/projects/{projectId}": {
            "get": {
                "description": "Retrieves detailed information for a specific published project",
                "operationId": "ProjectsController_getProjectById_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid project ID format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Project not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving project details"
                    }
                },
                "summary": "Get project by ID",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/v1/projects/{projectId}/pricing": {
            "get": {
                "description": "Retrieves pricing information for a specific project",
                "operationId": "ProjectsController_getProjectPricing_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project pricing retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectPricingResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid project ID format"
                    },
                    "404": {
                        "description": "Project not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving project pricing"
                    }
                },
                "summary": "Get project pricing options",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/v1/projects/{projectId}/tech-stack": {
            "get": {
                "description": "Retrieves technology stack information for a specific project",
                "operationId": "ProjectsController_getProjectTechStack_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project technology stack retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProjectTechStackResponseDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid project ID format"
                    },
                    "404": {
                        "description": "Project not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving project technology stack"
                    }
                },
                "summary": "Get project technology stack",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/v1/projects/{projectId}/testimonials": {
            "get": {
                "description": "Retrieves approved testimonials for a specific project",
                "operationId": "ProjectsController_getProjectTestimonials_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project testimonials retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProjectTestimonialResponseDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid project ID format"
                    },
                    "404": {
                        "description": "Project not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving project testimonials"
                    }
                },
                "summary": "Get project testimonials",
                "tags": [
                    "Projects"
                ]
            },
            "post": {
                "description": "Submits a testimonial for a specific project",
                "operationId": "ProjectsController_submitTestimonial_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTestimonialDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Testimonial submitted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectTestimonialResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Project not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while submitting testimonial"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Submit project testimonial",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/v1/projects/{projectId}/media": {
            "get": {
                "description": "Retrieves media files associated with a specific project",
                "operationId": "ProjectsController_getProjectMedia_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project media retrieved successfully"
                    },
                    "400": {
                        "description": "Invalid project ID format"
                    },
                    "404": {
                        "description": "Project not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving project media"
                    }
                },
                "summary": "Get project media",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/v1/projects/{projectId}/related": {
            "get": {
                "description": "Retrieves projects related to the specified project based on shared tags",
                "operationId": "ProjectsController_getRelatedProjects_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Related projects retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProjectResponseDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid project ID format"
                    },
                    "404": {
                        "description": "Project not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving related projects"
                    }
                },
                "summary": "Get related projects",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/v1/projects/slug/{slug}": {
            "get": {
                "description": "Retrieves project details using a URL-friendly slug",
                "operationId": "ProjectsController_getProjectBySlug_v1",
                "parameters": [
                    {
                        "name": "slug",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResponseDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project not found"
                    }
                },
                "summary": "Get project by slug",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/v1/admin/projects/{projectId}": {
            "get": {
                "description": "Retrieves a specific project by its ID",
                "operationId": "ProjectsAdminController_getProjectById_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Project not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get project by ID (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            },
            "patch": {
                "description": "Updates an existing project with new information",
                "operationId": "ProjectsAdminController_updateProject_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProjectDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Project updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Project not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update project (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            },
            "delete": {
                "description": "Soft deletes a specific project",
                "operationId": "ProjectsAdminController_deleteProject_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Project deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Project not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete project (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            }
        },
        "/api/v1/admin/projects": {
            "post": {
                "description": "Creates a new showcase project with specified details",
                "operationId": "ProjectsAdminController_createProject_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProjectDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Project created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create a new project (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            }
        },
        "/api/v1/admin/projects/{projectId}/restore": {
            "post": {
                "description": "Restores a previously soft-deleted project",
                "operationId": "ProjectsAdminController_restoreProject_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project restored successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Project restored successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Project is not deleted"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Project not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Restore soft-deleted project (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            }
        },
        "/api/v1/admin/projects/{projectId}/tech-stack": {
            "put": {
                "description": "Replaces the entire technology stack for a project",
                "operationId": "ProjectsAdminController_replaceProjectTechStack_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project technology stack updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Project technology stack updated successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Project not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Replace project technology stack (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            }
        },
        "/api/v1/admin/projects/{projectId}/media": {
            "post": {
                "description": "Associates a media file with a project",
                "operationId": "ProjectsAdminController_uploadProjectMedia_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Media uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Media uploaded successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Project or media not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Upload project media (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            }
        },
        "/api/v1/admin/projects/{projectId}/media/{mediaId}": {
            "delete": {
                "description": "Removes a media file association from a project",
                "operationId": "ProjectsAdminController_deleteProjectMedia_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Media deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Project not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete project media (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            }
        },
        "/api/v1/admin/projects/{projectId}/testimonials": {
            "post": {
                "description": "Creates a testimonial for a specific project",
                "operationId": "ProjectsAdminController_createProjectTestimonial_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAdminTestimonialDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Testimonial created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "id": "uuid",
                                        "clientName": "John Doe",
                                        "clientCompany": "Tech Corp",
                                        "content": "Excellent work!",
                                        "rating": 5,
                                        "featured": true
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Project not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create project testimonial (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            }
        },
        "/api/v1/admin/projects/{projectId}/testimonials/{testimonialId}": {
            "patch": {
                "description": "Updates a testimonial for a specific project",
                "operationId": "ProjectsAdminController_updateProjectTestimonial_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "testimonialId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Testimonial updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "id": "uuid",
                                        "clientName": "John Doe",
                                        "content": "Updated testimonial content",
                                        "rating": 4
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Project or testimonial not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update project testimonial (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            },
            "delete": {
                "description": "Deletes a testimonial for a specific project",
                "operationId": "ProjectsAdminController_deleteProjectTestimonial_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "testimonialId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Testimonial deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Testimonial deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Project or testimonial not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete project testimonial (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            }
        },
        "/api/v1/admin/projects/bulk/status": {
            "post": {
                "description": "Updates the status of multiple projects at once",
                "operationId": "ProjectsAdminController_bulkUpdateProjectStatus_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Bulk status update completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "successCount": 2,
                                        "failedCount": 0,
                                        "results": [
                                            {
                                                "id": "uuid1",
                                                "status": "success"
                                            },
                                            {
                                                "id": "uuid2",
                                                "status": "success"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk update project status (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            }
        },
        "/api/v1/admin/projects/bulk/feature": {
            "post": {
                "description": "Updates the featured status of multiple projects at once",
                "operationId": "ProjectsAdminController_bulkUpdateProjectFeatured_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Bulk featured update completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "successCount": 2,
                                        "failedCount": 0,
                                        "results": [
                                            {
                                                "id": "uuid1",
                                                "status": "success"
                                            },
                                            {
                                                "id": "uuid2",
                                                "status": "success"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk update project featured status (admin only)",
                "tags": [
                    "Admin - Projects"
                ]
            }
        },
        "/api/v1/media/{mediaId}": {
            "get": {
                "description": "Retrieves media metadata or redirects to the file URL. Authentication required for private files only.",
                "operationId": "MediaController_getMedia_v1",
                "parameters": [
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media metadata retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MediaResponseDto"
                                }
                            }
                        }
                    },
                    "302": {
                        "description": "Redirect to file URL"
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required for private files"
                    },
                    "404": {
                        "description": "Media not found"
                    }
                },
                "summary": "Get file metadata or redirect to URL",
                "tags": [
                    "Media"
                ]
            },
            "head": {
                "description": "Performs a HEAD request to check media metadata without downloading. Authentication required for private files only.",
                "operationId": "MediaController_headMedia_v1",
                "parameters": [
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media metadata headers returned"
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required for private files"
                    },
                    "404": {
                        "description": "Media not found"
                    }
                },
                "summary": "Lightweight metadata check",
                "tags": [
                    "Media"
                ]
            }
        },
        "/api/v1/admin/media": {
            "post": {
                "description": "Uploads a file to cloud storage and creates media metadata. Rate limited to prevent abuse.",
                "operationId": "MediaAdminController_uploadFile_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UploadMediaDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "File uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MediaResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid file or upload data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Upload file",
                "tags": [
                    "Media - Admin"
                ]
            },
            "get": {
                "description": "Lists user's media files with pagination and filtering. Rate limited to prevent abuse.",
                "operationId": "MediaAdminController_getMediaList_v1",
                "parameters": [
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search in filename",
                        "schema": {}
                    },
                    {
                        "name": "mime_type",
                        "required": false,
                        "in": "query",
                        "description": "Filter by MIME type",
                        "schema": {}
                    },
                    {
                        "name": "visibility",
                        "required": false,
                        "in": "query",
                        "description": "Filter by visibility",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media list retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MediaListResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "List/search media (authenticated users)",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/{mediaId}/download": {
            "get": {
                "description": "Downloads a private file with proper authentication. Rate limited to prevent abuse.",
                "operationId": "MediaAdminController_downloadMedia_v1",
                "parameters": [
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File download initiated"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this file"
                    },
                    "404": {
                        "description": "Media not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Download file (authenticated users)",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/quota": {
            "get": {
                "description": "Retrieves current user storage quota information",
                "operationId": "MediaAdminController_getUserQuota_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Quota information retrieved successfully"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get user storage quota",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/quota/stats": {
            "get": {
                "description": "Retrieves system-wide quota statistics (admin only)",
                "operationId": "MediaAdminController_getAdminQuotaStats_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Quota statistics retrieved successfully"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get admin quota statistics",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/quota/extend/{userId}": {
            "post": {
                "description": "Extends storage quota limit for a specific user (admin only)",
                "operationId": "MediaAdminController_extendUserQuota_v1",
                "parameters": [
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quota extended successfully"
                    },
                    "400": {
                        "description": "Invalid user ID or quota limit"
                    },
                    "403": {
                        "description": "Forbidden - Admin access required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Extend user quota limit",
                "tags": [
                    "Media - Admin"
                ]
            },
            "delete": {
                "description": "Removes quota extension for a specific user (admin only)",
                "operationId": "MediaAdminController_removeUserQuotaExtension_v1",
                "parameters": [
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quota extension removed successfully"
                    },
                    "400": {
                        "description": "Invalid user ID"
                    },
                    "403": {
                        "description": "Forbidden - Admin access required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Remove user quota extension",
                "tags": [
                    "Media - Admin"
                ]
            },
            "get": {
                "description": "Retrieves quota extension details for a specific user (admin only)",
                "operationId": "MediaAdminController_getUserQuotaExtension_v1",
                "parameters": [
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quota extension retrieved successfully"
                    },
                    "403": {
                        "description": "Forbidden - Admin access required"
                    },
                    "404": {
                        "description": "No quota extension found for this user"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get user quota extension",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/quota/extensions": {
            "get": {
                "description": "Retrieves all active quota extensions (admin only)",
                "operationId": "MediaAdminController_getAllQuotaExtensions_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Quota extensions retrieved successfully"
                    },
                    "403": {
                        "description": "Forbidden - Admin access required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get all quota extensions",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/{mediaId}": {
            "get": {
                "description": "Retrieves media metadata for a specific media file",
                "operationId": "MediaAdminController_getMedia_v1",
                "parameters": [
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media metadata retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MediaResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this media"
                    },
                    "404": {
                        "description": "Media not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get media metadata (authenticated users)",
                "tags": [
                    "Media - Admin"
                ]
            },
            "patch": {
                "description": "Updates media metadata and properties",
                "operationId": "MediaAdminController_updateMedia_v1",
                "parameters": [
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMediaDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Media updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MediaResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this media"
                    },
                    "404": {
                        "description": "Media not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update media metadata (authenticated users)",
                "tags": [
                    "Media - Admin"
                ]
            },
            "delete": {
                "description": "Soft deletes media and removes from cloud storage",
                "operationId": "MediaAdminController_deleteMedia_v1",
                "parameters": [
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Media deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this media"
                    },
                    "404": {
                        "description": "Media not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete media (authenticated users)",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/{mediaId}/visibility": {
            "patch": {
                "description": "Updates media visibility settings",
                "operationId": "MediaAdminController_updateMediaVisibility_v1",
                "parameters": [
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMediaVisibilityDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Media visibility updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MediaResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this media"
                    },
                    "404": {
                        "description": "Media not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update media visibility (authenticated users)",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/admin/all": {
            "get": {
                "description": "Retrieves all media files regardless of ownership",
                "operationId": "MediaAdminController_getAllMedia_v1",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user ID",
                        "schema": {}
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search in filename",
                        "schema": {}
                    },
                    {
                        "name": "mime_type",
                        "required": false,
                        "in": "query",
                        "description": "Filter by MIME type",
                        "schema": {}
                    },
                    {
                        "name": "visibility",
                        "required": false,
                        "in": "query",
                        "description": "Filter by visibility",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All media retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MediaListResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get all media files (admin only)",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/bulk-delete": {
            "post": {
                "description": "Deletes multiple media files at once",
                "operationId": "MediaAdminController_bulkDeleteMedia_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Media files deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Successfully deleted 5 media files",
                                        "deleted_count": 5
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk delete media files (admin only)",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/{mediaId}/url": {
            "get": {
                "description": "Generates a secure URL for accessing a media file",
                "operationId": "MediaAdminController_getFileUrl_v1",
                "parameters": [
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File URL generated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "success": true,
                                        "data": {
                                            "url": "https://storage.example.com/files/abc123.jpg",
                                            "expires_at": "2024-01-15T11:30:00Z"
                                        },
                                        "timestamp": "2024-01-15T11:30:00Z",
                                        "path": "/api/v1/admin/media/abc123/url"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this file"
                    },
                    "404": {
                        "description": "Media not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get file URL (authenticated users)",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/{mediaId}/backup": {
            "post": {
                "description": "Creates backup copies of a media file across multiple storage providers",
                "operationId": "MediaAdminController_createBackup_v1",
                "parameters": [
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Backup created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "success": true,
                                        "data": {
                                            "backup_id": "backup_123456789",
                                            "status": "initiated"
                                        },
                                        "timestamp": "2024-01-15T11:30:00Z",
                                        "path": "/api/v1/admin/media/abc123/backup"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Media not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create file backup (admin only)",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/{mediaId}/transform": {
            "post": {
                "description": "Applies image transformations using provider-specific features",
                "operationId": "MediaAdminController_transformImage_v1",
                "parameters": [
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image transformed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "success": true,
                                        "data": {
                                            "transformed_urls": [
                                                "https://storage.example.com/transformed/abc123_300x300.jpg",
                                                "https://storage.example.com/transformed/abc123_600x600.jpg"
                                            ]
                                        },
                                        "timestamp": "2024-01-15T11:30:00Z",
                                        "path": "/api/v1/admin/media/abc123/transform"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this media"
                    },
                    "404": {
                        "description": "Media not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Transform image (authenticated users)",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/{mediaId}/migrate": {
            "post": {
                "description": "Initiates migration of a file from one storage provider to another",
                "operationId": "MediaAdminController_migrateFile_v1",
                "parameters": [
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMigrationDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Migration initiated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Media file not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Migrate file between storage providers (admin only)",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/media/{mediaId}/provider-metadata": {
            "get": {
                "description": "Retrieves provider-specific metadata for a media file",
                "operationId": "MediaAdminController_getProviderMetadata_v1",
                "parameters": [
                    {
                        "name": "mediaId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Provider metadata retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "success": true,
                                        "data": {
                                            "provider_data": {
                                                "public_id": "abc123",
                                                "format": "jpg",
                                                "width": 1920,
                                                "height": 1080,
                                                "bytes": 1024000
                                            }
                                        },
                                        "timestamp": "2024-01-15T11:30:00Z",
                                        "path": "/api/v1/admin/media/abc123/provider-metadata"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this media"
                    },
                    "404": {
                        "description": "Media not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get provider metadata (authenticated users)",
                "tags": [
                    "Media - Admin"
                ]
            }
        },
        "/api/v1/admin/storage/providers/status": {
            "get": {
                "description": "Retrieves the health status of all configured storage providers",
                "operationId": "StorageAdminController_getProvidersStatus_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Provider status retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StorageProvidersStatusResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get storage provider status (admin only)",
                "tags": [
                    "Admin - Storage Management"
                ]
            }
        },
        "/api/v1/admin/storage/media/{fileId}/migrate": {
            "post": {
                "description": "Initiates migration of a file from one storage provider to another",
                "operationId": "StorageAdminController_migrateFile_v1",
                "parameters": [
                    {
                        "name": "fileId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMigrationDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Migration initiated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Media file not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Migrate file between storage providers (admin only)",
                "tags": [
                    "Admin - Storage Management"
                ]
            }
        },
        "/api/v1/admin/storage/migrations/{migrationId}": {
            "get": {
                "description": "Retrieves the current status of a file migration operation",
                "operationId": "StorageAdminController_getMigrationStatus_v1",
                "parameters": [
                    {
                        "name": "migrationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Migration status retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationStatusDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Migration not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get migration status (admin only)",
                "tags": [
                    "Admin - Storage Management"
                ]
            }
        },
        "/api/v1/admin/storage/failover": {
            "post": {
                "description": "Initiates failover from a primary storage provider to a backup provider",
                "operationId": "StorageAdminController_initiateFailover_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateFailoverDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Failover initiated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailoverResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Initiate storage provider failover (admin only)",
                "tags": [
                    "Admin - Storage Management"
                ]
            }
        },
        "/api/v1/admin/storage/analytics": {
            "get": {
                "description": "Retrieves comprehensive storage analytics including usage statistics and cost analysis",
                "operationId": "StorageAdminController_getStorageAnalytics_v1",
                "parameters": [
                    {
                        "name": "period",
                        "required": false,
                        "in": "query",
                        "description": "Analytics period",
                        "schema": {
                            "enum": [
                                "1_day",
                                "7_days",
                                "30_days",
                                "90_days",
                                "1_year"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "provider",
                        "required": false,
                        "in": "query",
                        "description": "Storage provider filter",
                        "schema": {
                            "enum": [
                                "all",
                                "minio",
                                "cloudinary",
                                "s3",
                                "gcp",
                                "azure"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "start_date",
                        "required": false,
                        "in": "query",
                        "description": "Start date for custom period (ISO 8601)",
                        "schema": {
                            "example": "2024-01-01T00:00:00Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "end_date",
                        "required": false,
                        "in": "query",
                        "description": "End date for custom period (ISO 8601)",
                        "schema": {
                            "example": "2024-01-31T23:59:59Z",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Storage analytics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StorageAnalyticsResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get storage analytics (admin only)",
                "tags": [
                    "Admin - Storage Management"
                ]
            }
        },
        "/api/v1/admin/storage/benchmark": {
            "post": {
                "description": "Initiates performance benchmarking across multiple storage providers",
                "operationId": "StorageAdminController_runBenchmark_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateBenchmarkDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Benchmark initiated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BenchmarkResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Run storage benchmark (admin only)",
                "tags": [
                    "Admin - Storage Management"
                ]
            }
        },
        "/api/v1/admin/storage/benchmarks/{benchmarkId}": {
            "get": {
                "description": "Retrieves the results of a completed storage benchmark operation",
                "operationId": "StorageAdminController_getBenchmarkResults_v1",
                "parameters": [
                    {
                        "name": "benchmarkId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Benchmark results retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BenchmarkResultsResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Benchmark not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get benchmark results (admin only)",
                "tags": [
                    "Admin - Storage Management"
                ]
            }
        },
        "/api/v1/admin/storage/simulate-error": {
            "post": {
                "description": "Simulates various error conditions for testing system resilience",
                "operationId": "StorageAdminController_simulateError_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateErrorSimulationDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Error simulation initiated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorSimulationResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Simulate storage provider error (admin only)",
                "tags": [
                    "Admin - Storage Management"
                ]
            }
        },
        "/api/v1/admin/storage/error-simulation": {
            "delete": {
                "description": "Clears all active error simulations and restores normal operation",
                "operationId": "StorageAdminController_clearErrorSimulation_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Error simulation cleared successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Error simulation cleared successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Clear error simulation (admin only)",
                "tags": [
                    "Admin - Storage Management"
                ]
            }
        },
        "/api/v1/users/me": {
            "get": {
                "description": "Retrieves the authenticated user's basic information",
                "operationId": "UsersController_getCurrentUser_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get current user basic information",
                "tags": [
                    "Users"
                ]
            },
            "delete": {
                "description": "Soft deletes the authenticated user's account",
                "operationId": "UsersController_deleteCurrentUser_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Account deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Account deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while deleting user account"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete current user account",
                "tags": [
                    "Users"
                ]
            }
        },
        "/api/v1/users/me/profile": {
            "get": {
                "description": "Retrieves the authenticated user's profile information",
                "operationId": "UsersController_getCurrentUserProfile_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserProfileResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving user profile"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get current user profile",
                "tags": [
                    "Users"
                ]
            },
            "patch": {
                "description": "Updates the authenticated user's profile information",
                "operationId": "UsersController_updateCurrentUserProfile_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while updating user profile"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update current user profile",
                "tags": [
                    "Users"
                ]
            }
        },
        "/api/v1/users/me/password": {
            "patch": {
                "description": "Changes the authenticated user's password",
                "operationId": "UsersController_changeCurrentUserPassword_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangePasswordDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Password changed successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Current password is incorrect"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while changing password"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Change current user password",
                "tags": [
                    "Users"
                ]
            }
        },
        "/api/v1/users/me/preferences": {
            "patch": {
                "description": "Updates the authenticated user's preferences including theme and notifications",
                "operationId": "UsersController_updateCurrentUserPreferences_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserPreferencesDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Preferences updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Preferences updated successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while updating preferences"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update current user preferences",
                "tags": [
                    "Users"
                ]
            }
        },
        "/api/v1/users/me/deactivate": {
            "post": {
                "description": "Deactivates the authenticated user's account by setting status to suspended",
                "operationId": "UsersController_deactivateCurrentUser_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Account deactivated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Account deactivated successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while deactivating user account"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Deactivate current user account",
                "tags": [
                    "Users"
                ]
            }
        },
        "/api/v1/users/me/avatar": {
            "post": {
                "description": "Uploads a new avatar file or sets an avatar URL for the authenticated user",
                "operationId": "UsersController_uploadUserAvatar_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "description": "Avatar file upload or URL",
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "avatar_url": {
                                                "type": "string",
                                                "description": "Avatar URL (for testing purposes)",
                                                "example": "https://example.com/avatar.jpg"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "avatar_url": {
                                                "type": "string",
                                                "description": "Avatar URL (for testing purposes)",
                                                "example": "https://example.com/avatar.jpg"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Avatar uploaded or set successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Avatar uploaded successfully",
                                        "avatar_url": "https://example.com/avatars/uuid.jpg"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid file, URL, or file too large"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while uploading avatar"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Upload or set user avatar",
                "tags": [
                    "Users"
                ]
            },
            "delete": {
                "operationId": "UsersController_deleteOwnAvatar_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "tags": [
                    "Users"
                ]
            }
        },
        "/api/v1/users/me/change-password": {
            "patch": {
                "operationId": "UsersController_changeCurrentUserPasswordAlias_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangePasswordDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "tags": [
                    "Users"
                ]
            }
        },
        "/api/v1/users/me/requests": {
            "get": {
                "description": "Retrieves paginated list of the authenticated user's requests",
                "operationId": "UsersController_getUserRequests_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "User requests retrieved successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving user requests"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get current user requests",
                "tags": [
                    "Users"
                ]
            }
        },
        "/api/v1/users/me/quotes": {
            "get": {
                "description": "Retrieves paginated list of the authenticated user's quotes",
                "operationId": "UsersController_getUserQuotes_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "User quotes retrieved successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving user quotes"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get current user quotes",
                "tags": [
                    "Users"
                ]
            }
        },
        "/api/v1/users/me/media": {
            "get": {
                "description": "Retrieves paginated list of the authenticated user's media files",
                "operationId": "UsersController_getUserMedia_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "User media retrieved successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving user media"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get current user media",
                "tags": [
                    "Users"
                ]
            }
        },
        "/api/v1/users/{userId}/avatar": {
            "get": {
                "description": "Retrieves avatar URL for a specific user",
                "operationId": "UsersController_getUserAvatar_v1",
                "parameters": [
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Avatar URL retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "avatar_url": "https://example.com/avatars/uuid.jpg"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Access denied - Can only access own avatar"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving user avatar"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get user avatar",
                "tags": [
                    "Users"
                ]
            },
            "delete": {
                "description": "Deletes avatar for a specific user",
                "operationId": "UsersController_deleteUserAvatar_v1",
                "parameters": [
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Avatar deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Avatar deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Access denied - Can only delete own avatar"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while deleting user avatar"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete user avatar",
                "tags": [
                    "Users"
                ]
            }
        },
        "/api/v1/users/me/comments": {
            "get": {
                "description": "Retrieves all blog comments made by the current user with pagination",
                "operationId": "UsersController_getUserBlogComments_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Blog comments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentListResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving blog comments"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get current user's blog comments",
                "tags": [
                    "Users"
                ]
            }
        },
        "/api/v1/admin/users": {
            "post": {
                "description": "Creates a new user account with specified role and status",
                "operationId": "AdminUsersController_createUser_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "409": {
                        "description": "User with this email already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create a new user (admin only)",
                "tags": [
                    "Admin Users"
                ]
            },
            "get": {
                "description": "Retrieves paginated list of all users with optional filtering",
                "operationId": "AdminUsersController_getAllUsers_v1",
                "parameters": [
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search by email or name",
                        "schema": {}
                    },
                    {
                        "name": "email_verified",
                        "required": false,
                        "in": "query",
                        "description": "Filter by email verification status",
                        "schema": {}
                    },
                    {
                        "name": "role",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user role",
                        "schema": {}
                    },
                    {
                        "name": "status",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user status",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get all users (admin only)",
                "tags": [
                    "Admin Users"
                ]
            }
        },
        "/api/v1/admin/users/search": {
            "get": {
                "description": "Searches users by email, first name, or last name",
                "operationId": "AdminUsersController_searchUsers_v1",
                "parameters": [
                    {
                        "name": "q",
                        "required": true,
                        "in": "query",
                        "description": "Search query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Search users (admin only)",
                "tags": [
                    "Admin Users"
                ]
            }
        },
        "/api/v1/admin/users/stats": {
            "get": {
                "description": "Retrieves comprehensive user statistics for admin dashboard",
                "operationId": "AdminUsersController_getUserStats_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get user statistics (admin only)",
                "tags": [
                    "Admin Users"
                ]
            }
        },
        "/api/v1/admin/users/{userId}": {
            "get": {
                "description": "Retrieves detailed information for a specific user",
                "operationId": "AdminUsersController_getUserById_v1",
                "parameters": [
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get user by ID (admin only)",
                "tags": [
                    "Admin Users"
                ]
            },
            "patch": {
                "description": "Updates user information including role and status",
                "operationId": "AdminUsersController_updateUserById_v1",
                "parameters": [
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update user by ID (admin only)",
                "tags": [
                    "Admin Users"
                ]
            },
            "delete": {
                "description": "Soft deletes a specific user account",
                "operationId": "AdminUsersController_deleteUserById_v1",
                "parameters": [
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete user by ID (admin only)",
                "tags": [
                    "Admin Users"
                ]
            }
        },
        "/api/v1/admin/users/{userId}/password": {
            "patch": {
                "description": "Changes password for a specific user",
                "operationId": "AdminUsersController_changeUserPasswordById_v1",
                "parameters": [
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Change user password (admin only)",
                "tags": [
                    "Admin Users"
                ]
            }
        },
        "/api/v1/admin/users/bulk/status": {
            "patch": {
                "description": "Updates status for multiple users at once",
                "operationId": "AdminUsersController_bulkUpdateUserStatus_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkUpdateUserStatusDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk update user status (admin only)",
                "tags": [
                    "Admin Users"
                ]
            }
        },
        "/api/v1/admin/users/bulk": {
            "post": {
                "description": "Creates multiple users at once with specified roles and statuses",
                "operationId": "AdminUsersController_bulkCreateUsers_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkCreateUserDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "201": {
                        "description": "Users created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Users created successfully",
                                        "created_count": 5,
                                        "failed_count": 0,
                                        "results": [
                                            {
                                                "id": "uuid1",
                                                "email": "user1@example.com",
                                                "success": true
                                            },
                                            {
                                                "id": "uuid2",
                                                "email": "user2@example.com",
                                                "success": true
                                            }
                                        ],
                                        "errors": []
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk create users (admin only)",
                "tags": [
                    "Admin Users"
                ]
            },
            "delete": {
                "description": "Soft deletes multiple users at once",
                "operationId": "AdminUsersController_bulkDeleteUsers_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkDeleteUserDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk delete users (admin only)",
                "tags": [
                    "Admin Users"
                ]
            }
        },
        "/api/v1/admin/users/search/advanced": {
            "get": {
                "description": "Performs advanced user search with multiple filters and date ranges",
                "operationId": "AdminUsersController_advancedSearchUsers_v1",
                "parameters": [
                    {
                        "name": "query",
                        "required": false,
                        "in": "query",
                        "description": "Search query (email, first name, last name)",
                        "schema": {
                            "example": "john@example.com",
                            "type": "string"
                        }
                    },
                    {
                        "name": "role",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user role",
                        "schema": {
                            "example": "user",
                            "type": "string",
                            "enum": [
                                "admin",
                                "user"
                            ]
                        }
                    },
                    {
                        "name": "status",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user status",
                        "schema": {
                            "example": "active",
                            "type": "string",
                            "enum": [
                                "active",
                                "suspended",
                                "deleted"
                            ]
                        }
                    },
                    {
                        "name": "email_verified",
                        "required": false,
                        "in": "query",
                        "description": "Filter by email verification status",
                        "schema": {
                            "example": true,
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "created_after",
                        "required": false,
                        "in": "query",
                        "description": "Filter users created after this date (ISO format)",
                        "schema": {
                            "example": "2024-01-01T00:00:00Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "created_before",
                        "required": false,
                        "in": "query",
                        "description": "Filter users created before this date (ISO format)",
                        "schema": {
                            "example": "2024-12-31T23:59:59Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number for pagination",
                        "schema": {
                            "minimum": 1,
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of items per page",
                        "schema": {
                            "minimum": 1,
                            "maximum": 100,
                            "example": 10,
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Advanced search users (admin only)",
                "tags": [
                    "Admin Users"
                ]
            }
        },
        "/api/v1/admin/users/{userId}/restore": {
            "post": {
                "description": "Restores a previously soft-deleted user account",
                "operationId": "AdminUsersController_restoreUser_v1",
                "parameters": [
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "User is not deleted"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Restore soft-deleted user (admin only)",
                "tags": [
                    "Admin Users"
                ]
            }
        },
        "/api/v1/blogs": {
            "get": {
                "description": "\n      Retrieves paginated list of all published blog posts with optional filtering.\n      \n      **Features:**\n      - Pagination support with configurable page size\n      - Full-text search across title, excerpt, and content\n      - Tag-based filtering for content categorization\n      - Author-based filtering for content discovery\n      - SEO-optimized response format\n      - Cached responses for improved performance\n      \n      **Filtering Options:**\n      - `search`: Search term for full-text search\n      - `tags`: Comma-separated list of tag IDs\n      - `author_id`: Filter by specific author ID\n      \n      **Response includes:**\n      - Blog post summaries with metadata\n      - Author information and publication dates\n      - Tag associations and comment counts\n      - Featured image references\n      - SEO metadata and reading time estimates\n    ",
                "operationId": "BlogController_getAllBlogPosts_v1",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number for pagination (default: 1)",
                        "schema": {
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of items per page (default: 10, max: 100)",
                        "schema": {
                            "example": 10,
                            "type": "number"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search term for full-text search across title, excerpt, and content",
                        "schema": {
                            "example": "nestjs api development",
                            "type": "string"
                        }
                    },
                    {
                        "name": "tags",
                        "required": false,
                        "in": "query",
                        "description": "Comma-separated list of tag IDs for filtering",
                        "schema": {
                            "example": "123e4567-e89b-12d3-a456-426614174000,987fcdeb-51a2-43d1-b456-426614174000",
                            "type": "string"
                        }
                    },
                    {
                        "name": "author_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by specific author ID",
                        "schema": {
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blog posts retrieved successfully",
                        "schema": {
                            "example": {
                                "data": [
                                    {
                                        "id": "123e4567-e89b-12d3-a456-426614174000",
                                        "title": "Building Scalable APIs with NestJS",
                                        "slug": "building-scalable-apis-nestjs",
                                        "excerpt": "Learn how to build scalable APIs with NestJS framework...",
                                        "content": "<p>Full blog post content...</p>",
                                        "featured_image_id": "123e4567-e89b-12d3-a456-426614174000",
                                        "status": "published",
                                        "author_id": "123e4567-e89b-12d3-a456-426614174000",
                                        "published_at": "2024-01-15T10:00:00Z",
                                        "seo_title": "Custom SEO Title",
                                        "seo_description": "Custom SEO description",
                                        "metadata": {},
                                        "created_at": "2024-01-15T09:00:00Z",
                                        "updated_at": "2024-01-15T10:00:00Z",
                                        "author": {
                                            "id": "123e4567-e89b-12d3-a456-426614174000",
                                            "first_name": "John",
                                            "last_name": "Doe",
                                            "email": "john@example.com"
                                        },
                                        "featured_image": {
                                            "id": "123e4567-e89b-12d3-a456-426614174000",
                                            "original_name": "nestjs-banner.jpg",
                                            "mime_type": "image/jpeg",
                                            "size": 1024000,
                                            "is_public": true
                                        },
                                        "tags": [
                                            {
                                                "id": "123e4567-e89b-12d3-a456-426614174000",
                                                "name": "NestJS",
                                                "slug": "nestjs"
                                            },
                                            {
                                                "id": "987fcdeb-51a2-43d1-b456-426614174000",
                                                "name": "API",
                                                "slug": "api"
                                            }
                                        ],
                                        "comments_count": 5,
                                        "reading_time_minutes": 8
                                    }
                                ],
                                "pagination": {
                                    "page": 1,
                                    "limit": 10,
                                    "total": 25,
                                    "total_pages": 3,
                                    "has_next": true,
                                    "has_prev": false
                                },
                                "filters": {
                                    "search": "nestjs",
                                    "tags": [
                                        "123e4567-e89b-12d3-a456-426614174000"
                                    ],
                                    "author_id": "123e4567-e89b-12d3-a456-426614174000"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlogPostListResponseDto"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded - Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 429,
                                        "message": "Rate limit exceeded",
                                        "error": "Too Many Requests",
                                        "retryAfter": 60
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 500,
                                        "message": "Internal server error",
                                        "error": "Internal Server Error"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Get all published blog posts",
                "tags": [
                    "Blog - Public"
                ]
            }
        },
        "/api/v1/blogs/{identifier}": {
            "get": {
                "description": "Retrieves detailed information for a specific published blog post using either ID or slug",
                "operationId": "BlogController_getBlogPostByIdentifier_v1",
                "parameters": [
                    {
                        "name": "identifier",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blog post details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlogPostResponseDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Blog post not found"
                    }
                },
                "summary": "Get blog post by ID or slug",
                "tags": [
                    "Blog"
                ]
            }
        },
        "/api/v1/blogs/slug/{slug}": {
            "get": {
                "description": "Retrieves detailed information for a specific published blog post using SEO-friendly slug",
                "operationId": "BlogController_getBlogPostBySlug_v1",
                "parameters": [
                    {
                        "name": "slug",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blog post details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlogPostResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Blog post not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Get blog post by slug",
                "tags": [
                    "Blog"
                ]
            }
        },
        "/api/v1/blogs/me/comments": {
            "get": {
                "description": "Retrieves all comments made by the current user",
                "operationId": "BlogController_getUserComments_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "User comments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentListResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get current user's comments",
                "tags": [
                    "Blog"
                ]
            }
        },
        "/api/v1/blogs/{identifier}/comments": {
            "get": {
                "description": "Retrieves approved comments for a specific blog post with pagination",
                "operationId": "BlogController_getBlogPostComments_v1",
                "parameters": [
                    {
                        "name": "identifier",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentListResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Blog post not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Get blog post comments",
                "tags": [
                    "Blog"
                ]
            },
            "post": {
                "description": "Submits a comment for a specific blog post (supports authenticated and anonymous)",
                "operationId": "BlogController_addComment_v1",
                "parameters": [
                    {
                        "name": "identifier",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCommentDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Comment submitted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 400,
                                        "message": [
                                            "content must be shorter than or equal to 2000 characters",
                                            "author_email must be an email"
                                        ],
                                        "error": "Bad Request"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Blog post not found"
                    },
                    "429": {
                        "description": "Rate limit exceeded - Too many comment submissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 429,
                                        "message": "Rate limit exceeded",
                                        "error": "Too Many Requests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Add comment to blog post",
                "tags": [
                    "Blog"
                ]
            }
        },
        "/api/v1/blogs/{identifier}/comments/{commentId}": {
            "patch": {
                "description": "Updates a comment made by the current user",
                "operationId": "BlogController_updateUserComment_v1",
                "parameters": [
                    {
                        "name": "identifier",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCommentContentDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comment updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Comment updated successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 400,
                                        "message": [
                                            "content must be shorter than or equal to 2000 characters"
                                        ],
                                        "error": "Bad Request"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Comment not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update user's own comment",
                "tags": [
                    "Blog"
                ]
            },
            "delete": {
                "description": "Deletes a comment made by the current user",
                "operationId": "BlogController_deleteUserComment_v1",
                "parameters": [
                    {
                        "name": "identifier",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Comment deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Comment not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete user's own comment",
                "tags": [
                    "Blog"
                ]
            }
        },
        "/api/v1/blogs/projects/{projectId}": {
            "get": {
                "description": "Retrieves published blog posts related to a specific project for content showcase and project documentation",
                "operationId": "BlogController_getProjectBlogPosts_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project blog posts retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlogPostListResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Project not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Get blog posts for a project",
                "tags": [
                    "Blog"
                ]
            }
        },
        "/api/v1/admin/blogs/slug/{slug}": {
            "get": {
                "description": "Retrieves blog post information by slug for admin content management and preview",
                "operationId": "BlogAdminController_getAdminBlogPostBySlug_v1",
                "parameters": [
                    {
                        "name": "slug",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blog post details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlogPostResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Blog post not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get blog post by slug (admin preview)",
                "tags": [
                    "Blog Admin"
                ]
            }
        },
        "/api/v1/admin/blogs": {
            "post": {
                "description": "\n      Creates a new blog post with comprehensive content management features.\n      \n      **Admin Features:**\n      - Full content creation with HTML/Markdown support\n      - SEO optimization with custom titles and descriptions\n      - Tag association for content categorization\n      - Featured image assignment for visual appeal\n      - Publication scheduling and status management\n      - Draft mode for content preparation\n      \n      **Content Management:**\n      - Automatic slug generation from title (with collision handling)\n      - Content sanitization for security\n      - Metadata storage for flexible content attributes\n      - Author attribution from JWT context\n      \n      **Validation:**\n      - Title: 3-255 characters, required\n      - Content: Required, sanitized for XSS prevention\n      - Slug: Auto-generated if not provided, must be unique\n      - Featured image: Must be valid media UUID\n      - Tags: Array of valid tag UUIDs\n      - SEO fields: Optimized length limits\n    ",
                "operationId": "BlogAdminController_createBlogPost_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateBlogPostDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Blog post created successfully",
                        "schema": {
                            "example": {
                                "id": "123e4567-e89b-12d3-a456-426614174000",
                                "title": "Building Scalable APIs with NestJS",
                                "slug": "building-scalable-apis-nestjs",
                                "excerpt": "Learn how to build scalable APIs with NestJS framework...",
                                "content": "<p>Full blog post content...</p>",
                                "featured_image_id": "123e4567-e89b-12d3-a456-426614174000",
                                "status": "draft",
                                "author_id": "123e4567-e89b-12d3-a456-426614174000",
                                "published_at": null,
                                "seo_title": "Custom SEO Title",
                                "seo_description": "Custom SEO description",
                                "metadata": {
                                    "canonical_url": "https://example.com/blog/custom-url",
                                    "noindex": false,
                                    "nofollow": false
                                },
                                "created_at": "2024-01-15T09:00:00Z",
                                "updated_at": "2024-01-15T09:00:00Z",
                                "author": {
                                    "id": "123e4567-e89b-12d3-a456-426614174000",
                                    "first_name": "John",
                                    "last_name": "Doe",
                                    "email": "john@example.com"
                                },
                                "featured_image": {
                                    "id": "123e4567-e89b-12d3-a456-426614174000",
                                    "original_name": "nestjs-banner.jpg",
                                    "mime_type": "image/jpeg",
                                    "size": 1024000,
                                    "is_public": true
                                },
                                "tags": [
                                    {
                                        "id": "123e4567-e89b-12d3-a456-426614174000",
                                        "name": "NestJS",
                                        "slug": "nestjs"
                                    },
                                    {
                                        "id": "987fcdeb-51a2-43d1-b456-426614174000",
                                        "name": "API",
                                        "slug": "api"
                                    }
                                ],
                                "comments_count": 0,
                                "reading_time_minutes": 8
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlogPostResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 400,
                                        "message": [
                                            "title must be longer than or equal to 3 characters",
                                            "slug already exists",
                                            "seo_title must be shorter than or equal to 60 characters",
                                            "featured_image_id must be a valid UUID"
                                        ],
                                        "error": "Bad Request"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 401,
                                        "message": "Unauthorized",
                                        "error": "Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin role required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 403,
                                        "message": "Forbidden - Admin role required",
                                        "error": "Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded - Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 429,
                                        "message": "Rate limit exceeded",
                                        "error": "Too Many Requests",
                                        "retryAfter": 60
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create a new blog post (admin only)",
                "tags": [
                    "Blog - Admin"
                ]
            }
        },
        "/api/v1/admin/blogs/{blogId}": {
            "patch": {
                "description": "Updates an existing blog post with new information",
                "operationId": "BlogAdminController_updateBlogPost_v1",
                "parameters": [
                    {
                        "name": "blogId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBlogPostDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Blog post updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlogPostResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Blog post not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update blog post (admin only)",
                "tags": [
                    "Blog Admin"
                ]
            },
            "delete": {
                "description": "Soft deletes a specific blog post",
                "operationId": "BlogAdminController_deleteBlogPost_v1",
                "parameters": [
                    {
                        "name": "blogId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blog post deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Blog post deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Blog post not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete blog post (admin only)",
                "tags": [
                    "Blog Admin"
                ]
            }
        },
        "/api/v1/admin/blogs/comments/pending": {
            "get": {
                "description": "Retrieves comments awaiting moderation approval",
                "operationId": "BlogAdminController_getPendingComments_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Pending comments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentListResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get pending comments for moderation (admin only)",
                "tags": [
                    "Blog Admin"
                ]
            }
        },
        "/api/v1/admin/blogs/{blogId}/comments": {
            "get": {
                "description": "Retrieves all comments for a specific blog post including pending ones",
                "operationId": "BlogAdminController_getAdminBlogPostComments_v1",
                "parameters": [
                    {
                        "name": "blogId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentListResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Blog post not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get comments for a blog post (admin view)",
                "tags": [
                    "Blog Admin"
                ]
            }
        },
        "/api/v1/admin/blogs/{blogId}/comments/{commentId}": {
            "patch": {
                "description": "Updates the content of a comment during moderation",
                "operationId": "BlogAdminController_updateCommentContent_v1",
                "parameters": [
                    {
                        "name": "blogId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCommentContentDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comment content updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Comment not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update comment content (admin only)",
                "tags": [
                    "Blog Admin"
                ]
            },
            "delete": {
                "description": "Soft deletes a specific comment",
                "operationId": "BlogAdminController_deleteComment_v1",
                "parameters": [
                    {
                        "name": "blogId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Comment deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Comment not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete comment (admin only)",
                "tags": [
                    "Blog Admin"
                ]
            }
        },
        "/api/v1/admin/blogs/comments/bulk/status": {
            "patch": {
                "description": "Updates the status of multiple comments in bulk",
                "operationId": "BlogAdminController_bulkUpdateCommentStatus_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkUpdateCommentStatusDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comments updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Bulk operation completed",
                                        "updated_count": 5
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 400,
                                        "message": [
                                            "commentIds must be an array",
                                            "status must be a valid BlogCommentStatus"
                                        ],
                                        "error": "Bad Request"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk update comment status (admin only)",
                "tags": [
                    "Blog Admin"
                ]
            }
        },
        "/api/v1/admin/blogs/comments/{commentId}/status": {
            "patch": {
                "description": "Updates the status of a comment during moderation",
                "operationId": "BlogAdminController_updateCommentStatus_v1",
                "parameters": [
                    {
                        "name": "commentId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCommentStatusDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comment status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Comment not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update comment status (admin only)",
                "tags": [
                    "Blog Admin"
                ]
            }
        },
        "/api/v1/admin/blogs/bulk/status": {
            "patch": {
                "description": "Updates the status of multiple blog posts in bulk for efficient content management",
                "operationId": "BlogAdminController_bulkUpdateBlogPostStatus_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkUpdateBlogPostStatusDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Blog posts updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Bulk operation completed successfully",
                                        "updated_count": 10
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 400,
                                        "message": [
                                            "blogPostIds must be an array",
                                            "status must be a valid BlogPostStatus"
                                        ],
                                        "error": "Bad Request"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "429": {
                        "description": "Rate limit exceeded - Too many requests"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk update blog post status (admin only)",
                "tags": [
                    "Blog Admin"
                ]
            }
        },
        "/api/v1/health": {
            "get": {
                "description": "Returns simple status without dependency checks",
                "operationId": "HealthController_basicHealth_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Application is healthy"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Basic health check",
                "tags": [
                    "Health"
                ]
            },
            "options": {
                "description": "Handles CORS preflight OPTIONS requests",
                "operationId": "HealthController_handleOptions_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "CORS preflight successful"
                    }
                },
                "summary": "CORS preflight for health endpoint",
                "tags": [
                    "Health"
                ]
            }
        },
        "/api/v1/health/detailed": {
            "get": {
                "description": "Checks all services and dependencies",
                "operationId": "HealthController_detailedHealth_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "All services are healthy"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "503": {
                        "description": "One or more services are unhealthy"
                    }
                },
                "summary": "Comprehensive health check",
                "tags": [
                    "Health"
                ]
            }
        },
        "/api/v1/health/ready": {
            "get": {
                "description": "Checks if application is ready to receive traffic",
                "operationId": "HealthController_readiness_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Application is ready"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "503": {
                        "description": "Application is not ready"
                    }
                },
                "summary": "Kubernetes readiness probe",
                "tags": [
                    "Health"
                ]
            },
            "head": {
                "description": "Lightweight readiness check using HEAD method",
                "operationId": "HealthController_readinessHead_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Application is ready"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "503": {
                        "description": "Application is not ready"
                    }
                },
                "summary": "Kubernetes readiness probe (HEAD)",
                "tags": [
                    "Health"
                ]
            }
        },
        "/api/v1/health/liveness": {
            "get": {
                "description": "Checks if application is alive",
                "operationId": "HealthController_liveness_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Application is alive"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Kubernetes liveness probe",
                "tags": [
                    "Health"
                ]
            },
            "head": {
                "description": "Lightweight liveness check using HEAD method",
                "operationId": "HealthController_livenessHead_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Application is alive"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Kubernetes liveness probe (HEAD)",
                "tags": [
                    "Health"
                ]
            }
        },
        "/api/v1/health/external": {
            "get": {
                "description": "Checks external dependencies like email, storage, payment services",
                "operationId": "HealthController_externalServices_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "External services are healthy"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "503": {
                        "description": "External services are unhealthy"
                    }
                },
                "summary": "External services health check",
                "tags": [
                    "Health"
                ]
            }
        },
        "/api/v1/security/status": {
            "get": {
                "description": "Returns overall security status including active alerts, dependency health, and security metrics",
                "operationId": "SecurityController_getSecurityStatus_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Security status retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "securityStatus": {
                                            "type": "object",
                                            "properties": {
                                                "activeAlerts": {
                                                    "type": "number"
                                                },
                                                "recentAlerts": {
                                                    "type": "array"
                                                },
                                                "lastUpdated": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            }
                                        },
                                        "dependencyHealth": {
                                            "type": "object",
                                            "properties": {
                                                "status": {
                                                    "type": "string",
                                                    "enum": [
                                                        "healthy",
                                                        "warning",
                                                        "critical"
                                                    ]
                                                },
                                                "lastAudit": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "vulnerabilities": {
                                                    "type": "object",
                                                    "properties": {
                                                        "total": {
                                                            "type": "number"
                                                        },
                                                        "high": {
                                                            "type": "number"
                                                        },
                                                        "critical": {
                                                            "type": "number"
                                                        }
                                                    }
                                                },
                                                "recommendations": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        },
                                        "vulnerabilityTrends": {
                                            "type": "object",
                                            "properties": {
                                                "period": {
                                                    "type": "string"
                                                },
                                                "trend": {
                                                    "type": "string",
                                                    "enum": [
                                                        "improving",
                                                        "worsening",
                                                        "stable"
                                                    ]
                                                },
                                                "change": {
                                                    "type": "number"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get comprehensive security status dashboard",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/alerts": {
            "get": {
                "description": "Returns all currently active security alerts with details",
                "operationId": "SecurityController_getActiveAlerts_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Active alerts retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string"
                                            },
                                            "type": {
                                                "type": "string"
                                            },
                                            "severity": {
                                                "type": "string",
                                                "enum": [
                                                    "low",
                                                    "medium",
                                                    "high",
                                                    "critical"
                                                ]
                                            },
                                            "message": {
                                                "type": "string"
                                            },
                                            "timestamp": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "resolved": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get active security alerts",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/alerts/{id}/resolve": {
            "post": {
                "description": "Marks a security alert as resolved and removes it from active alerts",
                "operationId": "SecurityController_resolveAlert_v1",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Security alert ID",
                        "schema": {
                            "example": "alert_1640995200000_abc123",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Alert resolved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Alert not found"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Resolve a security alert",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/dependencies/health": {
            "get": {
                "description": "Returns current status of dependency vulnerabilities and security health",
                "operationId": "SecurityController_getDependencyHealth_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Dependency health status retrieved successfully"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get dependency vulnerability health status",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/dependencies/audit": {
            "post": {
                "description": "Runs a comprehensive npm audit and returns detailed vulnerability report",
                "operationId": "SecurityController_runDependencyAudit_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Dependency audit completed successfully"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Trigger manual dependency vulnerability audit",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/dependencies/reports": {
            "get": {
                "description": "Returns a list of recent dependency vulnerability audit reports",
                "operationId": "SecurityController_getVulnerabilityReports_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Vulnerability reports retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string"
                                            },
                                            "timestamp": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "total": {
                                                "type": "number"
                                            },
                                            "high": {
                                                "type": "number"
                                            },
                                            "critical": {
                                                "type": "number"
                                            },
                                            "summary": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get list of vulnerability reports",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/dependencies/reports/{id}": {
            "get": {
                "description": "Returns detailed information for a specific vulnerability audit report",
                "operationId": "SecurityController_getVulnerabilityReport_v1",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Vulnerability report ID (ISO date format)",
                        "schema": {
                            "example": "2024-01-15",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vulnerability report retrieved successfully"
                    },
                    "404": {
                        "description": "Report not found"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get specific vulnerability report",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/metrics": {
            "get": {
                "description": "Returns security-related metrics in Prometheus exposition format for external monitoring systems",
                "operationId": "SecurityController_getSecurityMetrics_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Security metrics retrieved successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get security metrics in Prometheus format",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/alerts/history": {
            "get": {
                "description": "Returns historical security alerts for analysis and reporting",
                "operationId": "SecurityController_getAlertHistory_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Alert history retrieved successfully"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get security alert history",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/ip-reputation": {
            "post": {
                "description": "Analyzes IP address reputation based on security patterns and history",
                "operationId": "SecurityController_checkIPReputation_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ipAddress": {
                                        "type": "string",
                                        "description": "IP address to check",
                                        "example": "192.168.1.100"
                                    }
                                },
                                "required": [
                                    "ipAddress"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "IP reputation check completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "shouldBlock": {
                                            "type": "boolean"
                                        },
                                        "reason": {
                                            "type": "string"
                                        },
                                        "confidence": {
                                            "type": "number",
                                            "minimum": 0,
                                            "maximum": 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Check IP address reputation",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/dashboard": {
            "get": {
                "description": "Returns comprehensive security dashboard with alerts, dependencies, metrics, and recommendations",
                "operationId": "SecurityController_getSecurityDashboard_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Security dashboard data retrieved successfully"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get security dashboard data",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/health-score": {
            "get": {
                "description": "Returns overall security health score (0-100) with component breakdown and recommendations",
                "operationId": "SecurityController_getSecurityHealthScore_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Security health score retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "score": {
                                            "type": "number",
                                            "minimum": 0,
                                            "maximum": 100
                                        },
                                        "breakdown": {
                                            "type": "object",
                                            "properties": {
                                                "alerts": {
                                                    "type": "number"
                                                },
                                                "dependencies": {
                                                    "type": "number"
                                                },
                                                "authentication": {
                                                    "type": "number"
                                                },
                                                "api": {
                                                    "type": "number"
                                                },
                                                "system": {
                                                    "type": "number"
                                                }
                                            }
                                        },
                                        "grade": {
                                            "type": "string",
                                            "enum": [
                                                "A",
                                                "B",
                                                "C",
                                                "D",
                                                "F"
                                            ]
                                        },
                                        "recommendations": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get security health score",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/reports": {
            "post": {
                "description": "Generates a comprehensive security report for the specified period",
                "operationId": "SecurityController_generateSecurityReport_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "daily",
                                            "weekly",
                                            "monthly"
                                        ],
                                        "default": "daily"
                                    }
                                },
                                "required": [
                                    "type"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Security report generated successfully"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Generate security report",
                "tags": [
                    "Security Monitoring"
                ]
            },
            "get": {
                "description": "Returns historical security reports with optional filtering",
                "operationId": "SecurityController_getSecurityReports_v1",
                "parameters": [
                    {
                        "name": "type",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Security reports retrieved successfully"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get security reports history",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/reports/{id}": {
            "get": {
                "description": "Returns detailed information for a specific security report",
                "operationId": "SecurityController_getSecurityReport_v1",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Security report ID",
                        "schema": {
                            "example": "report_1640995200000_abc123",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Security report retrieved successfully"
                    },
                    "404": {
                        "description": "Report not found"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get specific security report",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/security/reports/{id}/export": {
            "get": {
                "description": "Exports a security report in the specified format",
                "operationId": "SecurityController_exportSecurityReport_v1",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Security report ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report exported successfully"
                    }
                },
                "security": [
                    {
                        "api-key": []
                    },
                    {
                        "bearer": []
                    }
                ],
                "summary": "Export security report",
                "tags": [
                    "Security Monitoring"
                ]
            }
        },
        "/api/v1/auth/signup": {
            "post": {
                "description": "Creates a new user account and sends email verification",
                "operationId": "AuthController_signup_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignupDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "example": {
                                "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                                "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                                "expires_in": 3600,
                                "token_type": "Bearer",
                                "user": {
                                    "id": "uuid",
                                    "email": "user@example.com",
                                    "first_name": "John",
                                    "last_name": "Doe",
                                    "role": "user",
                                    "email_verified": false,
                                    "status": "active",
                                    "created_at": "2024-01-01T00:00:00Z"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "example": {
                                "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                                "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                                "expires_in": 3600,
                                "token_type": "Bearer",
                                "user": {
                                    "id": "uuid",
                                    "email": "user@example.com",
                                    "first_name": "John",
                                    "last_name": "Doe",
                                    "role": "user",
                                    "email_verified": false,
                                    "status": "active",
                                    "created_at": "2024-01-01T00:00:00Z"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "409": {
                        "description": "User with this email already exists"
                    },
                    "500": {
                        "description": "Internal server error occurred during signup"
                    }
                },
                "summary": "Register a new user",
                "tags": [
                    "Authentication"
                ]
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "Authenticates user and returns access and refresh tokens",
                "operationId": "AuthController_login_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "example": {
                                "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                                "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                                "expires_in": 3600,
                                "token_type": "Bearer",
                                "user": {
                                    "id": "uuid",
                                    "email": "user@example.com",
                                    "first_name": "John",
                                    "last_name": "Doe",
                                    "role": "user",
                                    "email_verified": true,
                                    "status": "active",
                                    "created_at": "2024-01-01T00:00:00Z"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Invalid email or password"
                    },
                    "500": {
                        "description": "Internal server error occurred during login"
                    }
                },
                "summary": "User login",
                "tags": [
                    "Authentication"
                ]
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "description": "Exchanges refresh token for new access and refresh tokens",
                "operationId": "AuthController_refresh_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RefreshTokenDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "example": {
                                "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                                "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                                "expires_in": 3600,
                                "token_type": "Bearer",
                                "user": {
                                    "id": "uuid",
                                    "email": "user@example.com",
                                    "first_name": "John",
                                    "last_name": "Doe",
                                    "role": "user",
                                    "email_verified": true,
                                    "status": "active",
                                    "created_at": "2024-01-01T00:00:00Z"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Invalid or expired refresh token"
                    },
                    "500": {
                        "description": "Internal server error occurred during token refresh"
                    }
                },
                "summary": "Refresh access token",
                "tags": [
                    "Authentication"
                ]
            }
        },
        "/api/v1/auth/verify/{token}": {
            "get": {
                "description": "Verifies user email address using verification token",
                "operationId": "AuthController_verifyEmail_v1",
                "parameters": [
                    {
                        "name": "token",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully",
                        "schema": {
                            "example": {
                                "message": "Email verified successfully",
                                "verified": true,
                                "user": {
                                    "id": "uuid",
                                    "email": "user@example.com",
                                    "email_verified": true
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or expired verification token"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error occurred during email verification"
                    }
                },
                "summary": "Verify email address",
                "tags": [
                    "Authentication"
                ]
            }
        },
        "/api/v1/auth/forgot-password": {
            "post": {
                "description": "Sends password reset email to user",
                "operationId": "AuthController_forgotPassword_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForgotPasswordDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset email sent",
                        "schema": {
                            "example": {
                                "message": "If an account with this email exists, a password reset link has been sent",
                                "email_sent": true
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid email address"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error occurred during password reset request"
                    }
                },
                "summary": "Request password reset",
                "tags": [
                    "Authentication"
                ]
            }
        },
        "/api/v1/auth/reset-password": {
            "post": {
                "description": "Resets user password using reset token",
                "operationId": "AuthController_resetPassword_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetPasswordDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "schema": {
                            "example": {
                                "message": "Password reset successfully"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or expired reset token"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error occurred during password reset"
                    }
                },
                "summary": "Reset password",
                "tags": [
                    "Authentication"
                ]
            }
        },
        "/api/v1/auth/resend-verification": {
            "post": {
                "description": "Resends email verification link to user",
                "operationId": "AuthController_resendVerification_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Verification email sent successfully",
                        "schema": {
                            "example": {
                                "message": "Verification email sent successfully"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Email is already verified"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error occurred during verification resend"
                    }
                },
                "summary": "Resend email verification",
                "tags": [
                    "Authentication"
                ]
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "Logs out user from current session",
                "operationId": "AuthController_logout_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "example": {
                                "message": "Logged out successfully",
                                "success": true
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error occurred during logout"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Logout current session",
                "tags": [
                    "Authentication"
                ]
            }
        },
        "/api/v1/auth/logout-all": {
            "post": {
                "description": "Logs out user from all devices by revoking all refresh tokens",
                "operationId": "AuthController_logoutAll_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Logged out from all devices successfully",
                        "schema": {
                            "example": {
                                "message": "Logged out from all devices successfully",
                                "success": true
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error occurred during logout from all devices"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Logout from all devices",
                "tags": [
                    "Authentication"
                ]
            }
        },
        "/api/v1/requests": {
            "post": {
                "description": "Creates a new project request with specified details",
                "operationId": "RequestsController_createRequest_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Request created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Project not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while creating request"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Submit new project request",
                "tags": [
                    "Requests"
                ]
            }
        },
        "/api/v1/requests/{requestId}": {
            "get": {
                "description": "Retrieves detailed information for a specific request",
                "operationId": "RequestsController_getRequestById_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request ID format"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Access denied - Can only access own requests"
                    },
                    "404": {
                        "description": "Request not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving request"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get request by ID",
                "tags": [
                    "Requests"
                ]
            },
            "patch": {
                "description": "Updates an existing request with new information",
                "operationId": "RequestsController_updateRequest_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data or request ID format"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Access denied - Can only update own requests"
                    },
                    "404": {
                        "description": "Request not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while updating request"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update request",
                "tags": [
                    "Requests"
                ]
            },
            "delete": {
                "description": "Soft deletes a specific request",
                "operationId": "RequestsController_deleteRequest_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Request deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request ID format"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Access denied - Can only delete own requests"
                    },
                    "404": {
                        "description": "Request not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while deleting request"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete request",
                "tags": [
                    "Requests"
                ]
            }
        },
        "/api/v1/requests/{requestId}/attachments": {
            "post": {
                "description": "Associates a media file with a request for additional documentation",
                "operationId": "RequestsController_addRequestAttachment_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRequestAttachmentDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Attachment added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestAttachmentResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data or request ID format"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Access denied - Can only add attachments to own requests"
                    },
                    "404": {
                        "description": "Request or media not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while adding attachment"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Add attachment to request",
                "tags": [
                    "Requests"
                ]
            },
            "get": {
                "description": "Retrieves all attachments associated with a specific request",
                "operationId": "RequestsController_getRequestAttachments_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request attachments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RequestAttachmentResponseDto"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Request not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get request attachments",
                "tags": [
                    "Requests"
                ]
            }
        },
        "/api/v1/requests/{requestId}/attachments/{attachmentId}": {
            "delete": {
                "description": "Removes a specific attachment from a request",
                "operationId": "RequestsController_deleteRequestAttachment_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "attachmentId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attachment deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Attachment deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Request or attachment not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete request attachment",
                "tags": [
                    "Requests"
                ]
            }
        },
        "/api/v1/requests/{requestId}/duplicate": {
            "post": {
                "description": "Creates a copy of an existing request with optional modifications",
                "operationId": "RequestsController_duplicateRequest_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DuplicateRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Request duplicated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "404": {
                        "description": "Request not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Duplicate request",
                "tags": [
                    "Requests"
                ]
            }
        },
        "/api/v1/requests/{requestId}/quotes": {
            "get": {
                "description": "Retrieves all quotes associated with a specific request",
                "operationId": "RequestsController_getQuotesForRequest_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number (1-based)",
                        "schema": {
                            "minimum": 1,
                            "default": 1,
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of items per page",
                        "schema": {
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10,
                            "example": 10,
                            "type": "number"
                        }
                    },
                    {
                        "name": "sort",
                        "required": false,
                        "in": "query",
                        "description": "Sort field (prefix with - for descending)",
                        "schema": {
                            "example": "-createdAt",
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search query for full-text search",
                        "schema": {
                            "example": "project title",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters",
                        "required": false,
                        "in": "query",
                        "description": "Filter parameters as key-value pairs",
                        "schema": {
                            "additionalProperties": true,
                            "example": {
                                "status": "active",
                                "category": "web"
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quotes retrieved successfully"
                    },
                    "400": {
                        "description": "Invalid request ID format"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Access denied - Can only view quotes for own requests"
                    },
                    "404": {
                        "description": "Request not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving quotes"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get quotes for request",
                "tags": [
                    "Requests"
                ]
            }
        },
        "/api/v1/admin/requests": {
            "get": {
                "description": "Retrieves paginated list of all requests with optional filtering",
                "operationId": "RequestsAdminController_getAllRequests_v1",
                "parameters": [
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search in request title and description",
                        "schema": {}
                    },
                    {
                        "name": "user_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user ID",
                        "schema": {}
                    },
                    {
                        "name": "project_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by project ID",
                        "schema": {}
                    },
                    {
                        "name": "status",
                        "required": false,
                        "in": "query",
                        "description": "Filter by request status",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Requests retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestListResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get all requests (admin only)",
                "tags": [
                    "Requests Admin"
                ]
            }
        },
        "/api/v1/admin/requests/{requestId}": {
            "patch": {
                "description": "Updates request status for admin workflow management",
                "operationId": "RequestsAdminController_updateRequestStatus_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "description": "Request ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "id": "uuid",
                                        "status": "reviewing",
                                        "title": "Project Request",
                                        "updated_at": "2024-01-01T00:00:00.000Z"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status transition"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Request not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update request status (admin only)",
                "tags": [
                    "Requests Admin"
                ]
            }
        },
        "/api/v1/admin/requests/{requestId}/restore": {
            "post": {
                "description": "Restores a previously soft-deleted request",
                "operationId": "RequestsAdminController_restoreRequest_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "description": "Request ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request restored successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Request restored successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request is not deleted"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Request not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Restore soft-deleted request (admin only)",
                "tags": [
                    "Requests Admin"
                ]
            }
        },
        "/api/v1/admin/requests/export": {
            "get": {
                "description": "Exports requests to CSV format with optional filtering",
                "operationId": "RequestsAdminController_exportRequests_v1",
                "parameters": [
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search in request title and description",
                        "schema": {}
                    },
                    {
                        "name": "user_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user ID",
                        "schema": {}
                    },
                    {
                        "name": "project_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by project ID",
                        "schema": {}
                    },
                    {
                        "name": "status",
                        "required": false,
                        "in": "query",
                        "description": "Filter by request status",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Requests exported successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestExportResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Export requests to CSV (admin only)",
                "tags": [
                    "Requests Admin"
                ]
            }
        },
        "/api/v1/quotes": {
            "get": {
                "description": "Retrieves paginated list of all quotes for the authenticated user",
                "operationId": "QuotesController_getUserQuotes_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Quotes retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/QuoteResponseDto"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving quotes"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get all user quotes",
                "tags": [
                    "Quotes"
                ]
            }
        },
        "/api/v1/quotes/{quoteId}": {
            "get": {
                "description": "Retrieves detailed information for a specific quote",
                "operationId": "QuotesController_getQuoteById_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quote retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuoteResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid quote ID format"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Access denied - Not authorized to view this quote"
                    },
                    "404": {
                        "description": "Quote not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving quote"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get quote details",
                "tags": [
                    "Quotes"
                ]
            }
        },
        "/api/v1/quotes/{quoteId}/accept": {
            "post": {
                "description": "Accepts a quote and initiates the project workflow",
                "operationId": "QuotesController_acceptQuote_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quote accepted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuoteResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid quote ID format or quote cannot be accepted"
                    },
                    "403": {
                        "description": "Not authorized to accept this quote"
                    },
                    "404": {
                        "description": "Quote not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while accepting quote"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Accept a quote",
                "tags": [
                    "Quotes"
                ]
            }
        },
        "/api/v1/quotes/{quoteId}/decline": {
            "post": {
                "description": "Declines a quote and allows seeking other quotes",
                "operationId": "QuotesController_declineQuote_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quote declined successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuoteResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid quote ID format or quote cannot be declined"
                    },
                    "403": {
                        "description": "Not authorized to decline this quote"
                    },
                    "404": {
                        "description": "Quote not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while declining quote"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Decline a quote",
                "tags": [
                    "Quotes"
                ]
            }
        },
        "/api/v1/quotes/{quoteId}/history": {
            "get": {
                "description": "Retrieves audit timeline of changes made to a quote",
                "operationId": "QuotesController_getQuoteHistory_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quote history retrieved successfully"
                    },
                    "400": {
                        "description": "Invalid quote ID format"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Access denied - Not authorized to view quote history"
                    },
                    "404": {
                        "description": "Quote not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving quote history"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get quote history",
                "tags": [
                    "Quotes"
                ]
            }
        },
        "/api/v1/admin/requests/{requestId}/quotes": {
            "post": {
                "description": "Creates a new quote for a specific project request as an administrator",
                "operationId": "QuotesAdminController_createQuoteForRequest_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "description": "Request ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateQuoteDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Quote created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuoteResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "500": {
                        "description": "Internal server error occurred while creating quote"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create a quote for a request (Admin only)",
                "tags": [
                    "Quotes Admin"
                ]
            }
        },
        "/api/v1/admin/quotes": {
            "get": {
                "description": "Retrieves paginated list of all quotes with optional filtering for admin management",
                "operationId": "QuotesAdminController_getAllQuotesAdmin_v1",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number (1-based)",
                        "schema": {
                            "minimum": 1,
                            "default": 1,
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of items per page",
                        "schema": {
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10,
                            "example": 10,
                            "type": "number"
                        }
                    },
                    {
                        "name": "sort",
                        "required": false,
                        "in": "query",
                        "description": "Sort field (prefix with - for descending)",
                        "schema": {
                            "example": "-createdAt",
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search query for full-text search",
                        "schema": {
                            "example": "project title",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters",
                        "required": false,
                        "in": "query",
                        "description": "Filter parameters as key-value pairs",
                        "schema": {
                            "additionalProperties": true,
                            "example": {
                                "status": "active",
                                "category": "web"
                            },
                            "type": "object"
                        }
                    },
                    {
                        "name": "status",
                        "required": false,
                        "in": "query",
                        "description": "Filter by quote status",
                        "schema": {
                            "example": "accepted",
                            "type": "string",
                            "enum": [
                                "draft",
                                "sent",
                                "pending",
                                "accepted",
                                "declined",
                                "expired"
                            ]
                        }
                    },
                    {
                        "name": "userId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user ID",
                        "schema": {
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    },
                    {
                        "name": "requestId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by request ID",
                        "schema": {
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by project ID",
                        "schema": {
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All quotes retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/QuoteResponseDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving quotes"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "List all quotes (Admin only)",
                "tags": [
                    "Quotes Admin"
                ]
            }
        },
        "/api/v1/admin/quotes/{quoteId}": {
            "patch": {
                "description": "Updates an existing quote with new information as an administrator",
                "operationId": "QuotesAdminController_updateQuote_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateQuoteDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Quote updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuoteResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid quote ID or input data"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "404": {
                        "description": "Quote not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while updating quote"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update a quote (Admin only)",
                "tags": [
                    "Quotes Admin"
                ]
            },
            "delete": {
                "description": "Soft deletes a quote from the system as an administrator",
                "operationId": "QuotesAdminController_deleteQuote_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Quote deleted successfully"
                    },
                    "400": {
                        "description": "Invalid quote ID format"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "404": {
                        "description": "Quote not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while deleting quote"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete a quote (Admin only)",
                "tags": [
                    "Quotes Admin"
                ]
            }
        },
        "/api/v1/admin/requests/{requestId}/quotes/{quoteId}": {
            "patch": {
                "description": "Updates quote status for a specific request as an administrator",
                "operationId": "QuotesAdminController_updateQuoteStatusForRequest_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "description": "Request ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quote status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuoteResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid quote ID or input data"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "404": {
                        "description": "Quote or request not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update quote status for request (Admin only)",
                "tags": [
                    "Quotes Admin"
                ]
            }
        },
        "/api/v1/admin/quotes/{quoteId}/restore": {
            "post": {
                "description": "Restores a previously soft-deleted quote as an administrator",
                "operationId": "QuotesAdminController_restoreQuote_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quote restored successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuoteResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid quote ID format"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "404": {
                        "description": "Quote not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while restoring quote"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Restore a soft-deleted quote (Admin only)",
                "tags": [
                    "Quotes Admin"
                ]
            }
        },
        "/api/v1/admin/quotes/{quoteId}/send": {
            "post": {
                "description": "Marks a quote as sent and triggers notification to the user",
                "operationId": "QuotesAdminController_sendQuote_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quote sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuoteResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid quote ID format"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "404": {
                        "description": "Quote not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while sending quote"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Mark quote as sent (Admin only)",
                "tags": [
                    "Quotes Admin"
                ]
            }
        },
        "/api/v1/admin/quotes/{quoteId}/resend": {
            "post": {
                "description": "Resends the quote notification email to the user",
                "operationId": "QuotesAdminController_resendQuote_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quote notification resent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuoteResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid quote ID format"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "404": {
                        "description": "Quote not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while resending notification"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Resend quote notification (Admin only)",
                "tags": [
                    "Quotes Admin"
                ]
            }
        },
        "/api/v1/admin/quotes/{quoteId}/expire": {
            "post": {
                "description": "Forcefully expires an outstanding quote as an administrator",
                "operationId": "QuotesAdminController_expireQuote_v1",
                "parameters": [
                    {
                        "name": "quoteId",
                        "required": true,
                        "in": "path",
                        "description": "Quote ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quote expired successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuoteResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid quote ID format"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "404": {
                        "description": "Quote not found"
                    },
                    "500": {
                        "description": "Internal server error occurred while expiring quote"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Force-expire an outstanding quote (Admin only)",
                "tags": [
                    "Quotes Admin"
                ]
            }
        },
        "/api/v1/admin/quotes/bulk/status": {
            "post": {
                "description": "Updates the status of multiple quotes in a single operation",
                "operationId": "QuotesAdminController_bulkUpdateQuoteStatus_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkQuoteStatusUpdateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Quote status updated successfully"
                    },
                    "400": {
                        "description": "Invalid input data or quote IDs"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "500": {
                        "description": "Internal server error occurred during bulk update"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk status updates (Admin only)",
                "tags": [
                    "Quotes Admin"
                ]
            }
        },
        "/api/v1/admin/quotes/export": {
            "get": {
                "description": "Exports quotes data as CSV file with optional filtering",
                "operationId": "QuotesAdminController_exportQuotes_v1",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number (1-based)",
                        "schema": {
                            "minimum": 1,
                            "default": 1,
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of items per page",
                        "schema": {
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10,
                            "example": 10,
                            "type": "number"
                        }
                    },
                    {
                        "name": "sort",
                        "required": false,
                        "in": "query",
                        "description": "Sort field (prefix with - for descending)",
                        "schema": {
                            "example": "-createdAt",
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search query for full-text search",
                        "schema": {
                            "example": "project title",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters",
                        "required": false,
                        "in": "query",
                        "description": "Filter parameters as key-value pairs",
                        "schema": {
                            "additionalProperties": true,
                            "example": {
                                "status": "active",
                                "category": "web"
                            },
                            "type": "object"
                        }
                    },
                    {
                        "name": "status",
                        "required": false,
                        "in": "query",
                        "description": "Filter by quote status",
                        "schema": {
                            "example": "accepted",
                            "type": "string",
                            "enum": [
                                "draft",
                                "sent",
                                "pending",
                                "accepted",
                                "declined",
                                "expired"
                            ]
                        }
                    },
                    {
                        "name": "userId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user ID",
                        "schema": {
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    },
                    {
                        "name": "requestId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by request ID",
                        "schema": {
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by project ID",
                        "schema": {
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quotes exported successfully"
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "500": {
                        "description": "Internal server error occurred during export"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Export quotes CSV (Admin only)",
                "tags": [
                    "Quotes Admin"
                ]
            }
        },
        "/api/v1/requests/{requestId}/progress": {
            "get": {
                "description": "Retrieves chronological progress entries for a specific request",
                "operationId": "ProgressController_getRequestProgress_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "description": "Request ID",
                        "schema": {
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Progress timeline retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProgressTimelineResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 401,
                                        "message": "Unauthorized",
                                        "error": "Unauthorized",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/requests/123e4567-e89b-12d3-a456-426614174000/progress"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 403,
                                        "message": "Access denied - You can only view progress for your own requests",
                                        "error": "Forbidden",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/requests/123e4567-e89b-12d3-a456-426614174000/progress"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 404,
                                        "message": "Request not found",
                                        "error": "Not Found",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/requests/123e4567-e89b-12d3-a456-426614174000/progress"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get progress timeline for a request",
                "tags": [
                    "Progress - Requests"
                ]
            }
        },
        "/api/v1/requests/{requestId}/milestones": {
            "get": {
                "description": "Retrieves all milestones associated with a specific request",
                "operationId": "ProgressController_getRequestMilestones_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "description": "Request ID",
                        "schema": {
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Milestones retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MilestoneResponseDto"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 401,
                                        "message": "Unauthorized",
                                        "error": "Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 403,
                                        "message": "Access denied",
                                        "error": "Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 404,
                                        "message": "Request not found",
                                        "error": "Not Found"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get milestones for a request",
                "tags": [
                    "Progress - Requests"
                ]
            }
        },
        "/api/v1/admin/requests/{requestId}/progress": {
            "post": {
                "description": "Creates a new progress entry for a request and project",
                "operationId": "ProgressAdminController_createProgressEntry_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProgressDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Progress entry created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProgressEntryResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 400,
                                        "message": [
                                            "Request ID must be a valid UUID",
                                            "Title cannot exceed 255 characters",
                                            "Description is required"
                                        ],
                                        "error": "Bad Request",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/admin/requests/123e4567-e89b-12d3-a456-426614174000/progress"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 401,
                                        "message": "Unauthorized",
                                        "error": "Unauthorized",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/admin/requests/123e4567-e89b-12d3-a456-426614174000/progress"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin role required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 403,
                                        "message": "Forbidden - Admin role required",
                                        "error": "Forbidden",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/admin/requests/123e4567-e89b-12d3-a456-426614174000/progress"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request or project not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 404,
                                        "message": "Request not found",
                                        "error": "Not Found",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/admin/requests/123e4567-e89b-12d3-a456-426614174000/progress"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create a new progress entry (admin only)",
                "tags": [
                    "Progress - Admin"
                ]
            }
        },
        "/api/v1/admin/requests/{requestId}/progress/{entryId}": {
            "patch": {
                "description": "Updates an existing progress entry with new information",
                "operationId": "ProgressAdminController_updateProgressEntry_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "description": "Request ID",
                        "schema": {
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    },
                    {
                        "name": "entryId",
                        "required": true,
                        "in": "path",
                        "description": "Progress entry ID",
                        "schema": {
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProgressDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Progress entry updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProgressEntryResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Progress entry not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update progress entry (admin only)",
                "tags": [
                    "Progress - Admin"
                ]
            },
            "delete": {
                "description": "Deletes a specific progress entry",
                "operationId": "ProgressAdminController_deleteProgressEntry_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entryId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Progress entry deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Progress entry deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Progress entry not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete progress entry (admin only)",
                "tags": [
                    "Progress - Admin"
                ]
            }
        },
        "/api/v1/admin/requests/{requestId}/milestones": {
            "post": {
                "description": "Creates a new milestone for a specific request",
                "operationId": "ProgressAdminController_createMilestone_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMilestoneDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Milestone created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MilestoneResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 400,
                                        "message": [
                                            "Request ID must be a valid UUID",
                                            "Amount must be at least $1.00",
                                            "Status must be one of: pending, in-progress, completed, approved, paid"
                                        ],
                                        "error": "Bad Request",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/admin/requests/123e4567-e89b-12d3-a456-426614174000/milestones"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 401,
                                        "message": "Unauthorized",
                                        "error": "Unauthorized",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/admin/requests/123e4567-e89b-12d3-a456-426614174000/milestones"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin role required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 403,
                                        "message": "Forbidden - Admin role required",
                                        "error": "Forbidden",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/admin/requests/123e4567-e89b-12d3-a456-426614174000/milestones"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 404,
                                        "message": "Request not found",
                                        "error": "Not Found",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/admin/requests/123e4567-e89b-12d3-a456-426614174000/milestones"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create a new milestone (admin only)",
                "tags": [
                    "Progress - Admin"
                ]
            }
        },
        "/api/v1/admin/requests/{requestId}/milestones/{milestoneId}": {
            "get": {
                "description": "Retrieves a specific milestone by ID",
                "operationId": "ProgressAdminController_getMilestone_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "description": "Request ID",
                        "schema": {
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    },
                    {
                        "name": "milestoneId",
                        "required": true,
                        "in": "path",
                        "description": "Milestone ID",
                        "schema": {
                            "example": "123e4567-e89b-12d3-a456-426614174001",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Milestone retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MilestoneResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 401,
                                        "message": "Unauthorized",
                                        "error": "Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin role required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 403,
                                        "message": "Forbidden",
                                        "error": "Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Milestone not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 404,
                                        "message": "Milestone not found",
                                        "error": "Not Found"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get milestone (admin only)",
                "tags": [
                    "Progress - Admin"
                ]
            },
            "patch": {
                "description": "Updates an existing milestone with new information",
                "operationId": "ProgressAdminController_updateMilestone_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "milestoneId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMilestoneDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Milestone updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MilestoneResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Milestone not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update milestone (admin only)",
                "tags": [
                    "Progress - Admin"
                ]
            },
            "delete": {
                "description": "Deletes a specific milestone",
                "operationId": "ProgressAdminController_deleteMilestone_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "milestoneId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Milestone deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Milestone deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Milestone not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete milestone (admin only)",
                "tags": [
                    "Progress - Admin"
                ]
            }
        },
        "/api/v1/admin/requests/{requestId}/milestones/{milestoneId}/status": {
            "patch": {
                "description": "Updates the status of a milestone during processing",
                "operationId": "ProgressAdminController_updateMilestoneStatus_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "milestoneId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMilestoneStatusDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Milestone status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Milestone status updated successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Milestone not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update milestone status (admin only)",
                "tags": [
                    "Progress - Admin"
                ]
            }
        },
        "/api/v1/admin/requests/{requestId}/milestones/{milestoneId}/release-payment": {
            "post": {
                "description": "Releases payment for a completed and approved milestone",
                "operationId": "ProgressAdminController_releaseMilestonePayment_v1",
                "parameters": [
                    {
                        "name": "requestId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "milestoneId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment released successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Payment released successfully"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Milestone must be approved before payment can be released",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 400,
                                        "message": "Milestone must be approved before payment can be released",
                                        "error": "Bad Request",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/admin/requests/123e4567-e89b-12d3-a456-426614174000/milestones/123e4567-e89b-12d3-a456-426614174000/release-payment"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 401,
                                        "message": "Unauthorized",
                                        "error": "Unauthorized",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/admin/requests/123e4567-e89b-12d3-a456-426614174000/milestones/123e4567-e89b-12d3-a456-426614174000/release-payment"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin role required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 403,
                                        "message": "Forbidden - Admin role required",
                                        "error": "Forbidden",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/admin/requests/123e4567-e89b-12d3-a456-426614174000/milestones/123e4567-e89b-12d3-a456-426614174000/release-payment"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Milestone not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 404,
                                        "message": "Milestone not found",
                                        "error": "Not Found",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/admin/requests/123e4567-e89b-12d3-a456-426614174000/milestones/123e4567-e89b-12d3-a456-426614174000/release-payment"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Release payment for completed milestone (admin only)",
                "tags": [
                    "Progress - Admin"
                ]
            }
        },
        "/api/v1/projects/{projectId}/progress": {
            "get": {
                "description": "Retrieves chronological progress entries for a specific project",
                "operationId": "ProjectProgressController_getProjectProgress_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "Project ID",
                        "schema": {
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project progress timeline retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProgressTimelineResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 401,
                                        "message": "Unauthorized",
                                        "error": "Unauthorized",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/projects/123e4567-e89b-12d3-a456-426614174000/progress"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 403,
                                        "message": "Access denied - You can only view progress for your own projects",
                                        "error": "Forbidden",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/projects/123e4567-e89b-12d3-a456-426614174000/progress"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 404,
                                        "message": "Project not found",
                                        "error": "Not Found",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/projects/123e4567-e89b-12d3-a456-426614174000/progress"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 500,
                                        "message": "Internal server error",
                                        "error": "Internal Server Error",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/projects/123e4567-e89b-12d3-a456-426614174000/progress"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get project progress timeline",
                "tags": [
                    "Progress - Projects"
                ]
            }
        },
        "/api/v1/projects/{projectId}/progress/summary": {
            "get": {
                "description": "Retrieves summary information for a specific project's progress",
                "operationId": "ProjectProgressController_getProjectProgressSummary_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "Project ID",
                        "schema": {
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project progress summary retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProgressSummaryResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 401,
                                        "message": "Unauthorized",
                                        "error": "Unauthorized",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/projects/123e4567-e89b-12d3-a456-426614174000/progress/summary"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 403,
                                        "message": "Access denied - You can only view progress for your own projects",
                                        "error": "Forbidden",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/projects/123e4567-e89b-12d3-a456-426614174000/progress/summary"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 404,
                                        "message": "Project not found",
                                        "error": "Not Found",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/projects/123e4567-e89b-12d3-a456-426614174000/progress/summary"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 500,
                                        "message": "Internal server error",
                                        "error": "Internal Server Error",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/projects/123e4567-e89b-12d3-a456-426614174000/progress/summary"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get project progress summary",
                "tags": [
                    "Progress - Projects"
                ]
            }
        },
        "/api/v1/users/me/projects/progress": {
            "get": {
                "description": "Retrieves progress information for all projects belonging to the current user",
                "operationId": "ProgressUsersController_getUserProjectProgress_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "User project progress retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProgressSummaryResponseDto"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 401,
                                        "message": "Unauthorized",
                                        "error": "Unauthorized",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/users/me/projects/progress"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 404,
                                        "message": "User not found",
                                        "error": "Not Found",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/users/me/projects/progress"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 500,
                                        "message": "Internal server error",
                                        "error": "Internal Server Error",
                                        "timestamp": "2024-01-15T10:30:00.000Z",
                                        "path": "/users/me/projects/progress"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get user's project progress",
                "tags": [
                    "Progress - Users"
                ]
            }
        },
        "/api/v1/conversations": {
            "get": {
                "description": "Retrieves paginated list of user's conversations with unread counts, participant information, and last message preview. Supports filtering and sorting by activity.",
                "operationId": "MessagingController_getConversations_v1",
                "parameters": [
                    {
                        "name": "archived",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversations retrieved successfully",
                        "schema": {
                            "example": {
                                "data": [
                                    {
                                        "id": "550e8400-e29b-41d4-a716-446655440000",
                                        "title": "Project Discussion",
                                        "type": "direct",
                                        "created_by": "550e8400-e29b-41d4-a716-446655440001",
                                        "last_message_at": "2024-01-15T10:30:00Z",
                                        "created_at": "2024-01-15T09:00:00Z",
                                        "updated_at": "2024-01-15T10:30:00Z",
                                        "participants": [
                                            {
                                                "id": "550e8400-e29b-41d4-a716-446655440002",
                                                "user_id": "550e8400-e29b-41d4-a716-446655440001",
                                                "role": "owner",
                                                "unread_count": 0,
                                                "last_read_at": "2024-01-15T10:30:00Z",
                                                "joined_at": "2024-01-15T09:00:00Z",
                                                "user": {
                                                    "id": "550e8400-e29b-41d4-a716-446655440001",
                                                    "first_name": "John",
                                                    "last_name": "Doe",
                                                    "email": "john@example.com"
                                                }
                                            },
                                            {
                                                "id": "550e8400-e29b-41d4-a716-446655440003",
                                                "user_id": "550e8400-e29b-41d4-a716-446655440004",
                                                "role": "member",
                                                "unread_count": 2,
                                                "last_read_at": "2024-01-15T09:45:00Z",
                                                "joined_at": "2024-01-15T09:00:00Z",
                                                "user": {
                                                    "id": "550e8400-e29b-41d4-a716-446655440004",
                                                    "first_name": "Jane",
                                                    "last_name": "Smith",
                                                    "email": "jane@example.com"
                                                }
                                            }
                                        ],
                                        "last_message": {
                                            "id": "550e8400-e29b-41d4-a716-446655440005",
                                            "content": "Hello, how is the project going?",
                                            "message_type": "text",
                                            "created_at": "2024-01-15T10:30:00Z",
                                            "user": {
                                                "id": "550e8400-e29b-41d4-a716-446655440004",
                                                "first_name": "Jane",
                                                "last_name": "Smith"
                                            }
                                        },
                                        "unread_count": 2
                                    }
                                ],
                                "pagination": {
                                    "page": 1,
                                    "limit": 20,
                                    "total": 1,
                                    "total_pages": 1,
                                    "has_next": false,
                                    "has_prev": false
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationListResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 401,
                                        "message": "Unauthorized",
                                        "error": "Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - Rate limit exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 429,
                                        "message": "Too Many Requests",
                                        "error": "Too Many Requests"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "List user's conversations",
                "tags": [
                    "Messaging"
                ]
            },
            "post": {
                "description": "Creates a new conversation with specified participants. Admins can create conversations with anyone, while users can only create conversations with administrators. Users cannot create conversations with other regular users.",
                "operationId": "MessagingController_createConversation_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateConversationDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Conversation created successfully",
                        "schema": {
                            "example": {
                                "id": "uuid",
                                "title": "Project Discussion",
                                "type": "direct",
                                "created_by": "uuid",
                                "last_message_at": null,
                                "created_at": "2024-01-15T09:00:00Z",
                                "updated_at": "2024-01-15T09:00:00Z",
                                "participants": [
                                    {
                                        "id": "uuid",
                                        "user_id": "uuid",
                                        "role": "owner",
                                        "unread_count": 0,
                                        "last_read_at": null,
                                        "joined_at": "2024-01-15T09:00:00Z",
                                        "user": {
                                            "id": "uuid",
                                            "first_name": "John",
                                            "last_name": "Doe",
                                            "email": "john@example.com"
                                        }
                                    }
                                ],
                                "last_message": null,
                                "unread_count": 0
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid conversation data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 400,
                                        "message": "At least one participant is required",
                                        "error": "Bad Request"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 401,
                                        "message": "Unauthorized",
                                        "error": "Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Users can only create conversations with administrators",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 403,
                                        "message": "Users can only message administrators. Regular users cannot be added to conversations.",
                                        "error": "Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - Rate limit exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 429,
                                        "message": "Too Many Requests",
                                        "error": "Too Many Requests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 500,
                                        "message": "Internal server error",
                                        "error": "Internal Server Error"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Start a new conversation",
                "tags": [
                    "Messaging"
                ]
            }
        },
        "/api/v1/conversations/unread-count": {
            "get": {
                "description": "Retrieves the count of conversations with unread messages",
                "operationId": "MessagingController_getUnreadCount_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Unread count retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "unread_count": 3
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get unread conversations count",
                "tags": [
                    "Messaging"
                ]
            }
        },
        "/api/v1/conversations/{conversationId}": {
            "get": {
                "description": "Retrieves detailed information for a specific conversation",
                "operationId": "MessagingController_getConversation_v1",
                "parameters": [
                    {
                        "name": "conversationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversation details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this conversation"
                    },
                    "404": {
                        "description": "Conversation not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get conversation details",
                "tags": [
                    "Messaging"
                ]
            },
            "patch": {
                "description": "Update conversation title and metadata",
                "operationId": "MessagingController_updateConversation_v1",
                "parameters": [
                    {
                        "name": "conversationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversation updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied to this conversation"
                    },
                    "404": {
                        "description": "Conversation not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update conversation",
                "tags": [
                    "Messaging"
                ]
            }
        },
        "/api/v1/conversations/{conversationId}/messages": {
            "get": {
                "description": "Retrieves paginated list of messages for a specific conversation",
                "operationId": "MessagingController_getMessages_v1",
                "parameters": [
                    {
                        "name": "conversationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "archived",
                        "required": false,
                        "in": "query",
                        "description": "Filter by archived status (true/false)",
                        "schema": {}
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search messages by content",
                        "schema": {}
                    },
                    {
                        "name": "before",
                        "required": false,
                        "in": "query",
                        "description": "Get messages before this timestamp",
                        "schema": {}
                    },
                    {
                        "name": "message_type",
                        "required": false,
                        "in": "query",
                        "description": "Filter by message type",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageListResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this conversation"
                    },
                    "404": {
                        "description": "Conversation not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get messages for conversation",
                "tags": [
                    "Messaging"
                ]
            },
            "post": {
                "description": "Sends a new message to a conversation. Admins can send messages to any conversation, while users can only send messages to conversations with administrators.",
                "operationId": "MessagingController_sendMessage_v1",
                "parameters": [
                    {
                        "name": "conversationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SendMessageDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Message sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid message data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 400,
                                        "message": "Message content is required",
                                        "error": "Bad Request"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this conversation"
                    },
                    "404": {
                        "description": "Conversation not found"
                    },
                    "429": {
                        "description": "Too Many Requests - Rate limit exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 429,
                                        "message": "Too Many Requests",
                                        "error": "Too Many Requests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 500,
                                        "message": "Internal server error",
                                        "error": "Internal Server Error"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Send a new message",
                "tags": [
                    "Messaging"
                ]
            }
        },
        "/api/v1/conversations/{conversationId}/read": {
            "patch": {
                "description": "Marks all messages in a conversation as read for the current user",
                "operationId": "MessagingController_markConversationAsRead_v1",
                "parameters": [
                    {
                        "name": "conversationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversation marked as read successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Conversation marked as read"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this conversation"
                    },
                    "404": {
                        "description": "Conversation not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Mark conversation as read",
                "tags": [
                    "Messaging"
                ]
            }
        },
        "/api/v1/conversations/{conversationId}/messages/{messageId}/read": {
            "patch": {
                "description": "Marks a specific message as read for the current user",
                "operationId": "MessagingController_markMessageAsRead_v1",
                "parameters": [
                    {
                        "name": "conversationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "messageId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message marked as read successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Message marked as read"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this conversation"
                    },
                    "404": {
                        "description": "Message not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Mark message as read",
                "tags": [
                    "Messaging"
                ]
            }
        },
        "/api/v1/conversations/{conversationId}/messages/{messageId}": {
            "delete": {
                "description": "Soft deletes a specific message from a conversation",
                "operationId": "MessagingController_deleteMessage_v1",
                "parameters": [
                    {
                        "name": "conversationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "messageId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "message": "Message deleted successfully"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Access denied to this message"
                    },
                    "404": {
                        "description": "Message not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete a message",
                "tags": [
                    "Messaging"
                ]
            }
        },
        "/api/v1/conversations/{conversationId}/participants": {
            "post": {
                "description": "Add a new participant to the conversation",
                "operationId": "MessagingController_addParticipant_v1",
                "parameters": [
                    {
                        "name": "conversationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Participant added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "User is already a participant"
                    },
                    "403": {
                        "description": "Access denied to this conversation"
                    },
                    "404": {
                        "description": "Conversation not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Add participant to conversation",
                "tags": [
                    "Messaging"
                ]
            }
        },
        "/api/v1/conversations/{conversationId}/participants/{userId}": {
            "delete": {
                "description": "Remove a participant from the conversation",
                "operationId": "MessagingController_removeParticipant_v1",
                "parameters": [
                    {
                        "name": "conversationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Participant removed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied to this conversation"
                    },
                    "404": {
                        "description": "Participant not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Remove participant from conversation",
                "tags": [
                    "Messaging"
                ]
            }
        },
        "/api/v1/conversations/{conversationId}/archive": {
            "patch": {
                "description": "Archive or unarchive a conversation",
                "operationId": "MessagingController_archiveConversation_v1",
                "parameters": [
                    {
                        "name": "conversationId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversation archived successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied to this conversation"
                    },
                    "404": {
                        "description": "Conversation not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Archive conversation",
                "tags": [
                    "Messaging"
                ]
            }
        },
        "/api/v1/portfolio": {
            "get": {
                "description": "Retrieves comprehensive portfolio overview with statistics and highlights. Supports filtering by technologies, tags, and search.",
                "operationId": "PortfolioController_getPortfolio_v1",
                "parameters": [
                    {
                        "name": "technologyCategory",
                        "required": false,
                        "in": "query",
                        "description": "Filter by technology category",
                        "schema": {}
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search in project titles and descriptions",
                        "schema": {}
                    },
                    {
                        "name": "tags",
                        "required": false,
                        "in": "query",
                        "description": "Filter by tag IDs (comma-separated)",
                        "schema": {}
                    },
                    {
                        "name": "technologies",
                        "required": false,
                        "in": "query",
                        "description": "Filter by technology IDs (comma-separated)",
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Portfolio data retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PortfolioResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid parameters"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving portfolio data"
                    }
                },
                "summary": "Get aggregated public portfolio data",
                "tags": [
                    "Portfolio"
                ]
            }
        },
        "/api/v1/portfolio/projects": {
            "get": {
                "description": "Retrieves paginated list of projects displayed in the portfolio",
                "operationId": "PortfolioController_getPortfolioProjects_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Portfolio projects retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PortfolioProjectsResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid parameters or filters"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving portfolio projects"
                    }
                },
                "summary": "Get projects shown in portfolio",
                "tags": [
                    "Portfolio"
                ]
            }
        },
        "/api/v1/portfolio/featured": {
            "get": {
                "description": "Retrieves projects marked as featured for prominent display",
                "operationId": "PortfolioController_getFeaturedProjects_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Featured projects retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PortfolioProjectsResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid parameters"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving featured projects"
                    }
                },
                "summary": "Get featured projects",
                "tags": [
                    "Portfolio"
                ]
            }
        },
        "/api/v1/portfolio/stats": {
            "get": {
                "description": "Retrieves comprehensive statistics about the portfolio",
                "operationId": "PortfolioController_getPortfolioStats_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Portfolio statistics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PortfolioStatsResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Get public portfolio statistics",
                "tags": [
                    "Portfolio"
                ]
            }
        },
        "/api/v1/portfolio/technologies": {
            "get": {
                "description": "Retrieves comprehensive breakdown of technologies used in portfolio projects",
                "operationId": "PortfolioController_getTechnologyBreakdown_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Technology breakdown retrieved successfully"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Get technology breakdown and statistics",
                "tags": [
                    "Portfolio"
                ]
            }
        },
        "/api/v1/portfolio/categories": {
            "get": {
                "description": "Retrieves statistics grouped by technology categories and project types",
                "operationId": "PortfolioController_getCategoryStats_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Category statistics retrieved successfully"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Get portfolio categories and statistics",
                "tags": [
                    "Portfolio"
                ]
            }
        },
        "/api/v1/portfolio/metrics": {
            "get": {
                "description": "Retrieves comprehensive performance metrics and analytics",
                "operationId": "PortfolioController_getPerformanceMetrics_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Performance metrics retrieved successfully"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Get portfolio performance metrics and analytics",
                "tags": [
                    "Portfolio"
                ]
            }
        },
        "/api/v1/portfolio/price-ranges": {
            "get": {
                "description": "Retrieves distribution of projects across different price ranges",
                "operationId": "PortfolioController_getPriceRanges_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Price range distribution retrieved successfully"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Get price range distribution",
                "tags": [
                    "Portfolio"
                ]
            }
        },
        "/api/v1/portfolio/timelines": {
            "get": {
                "description": "Retrieves distribution of projects across different timeline categories",
                "operationId": "PortfolioController_getTimelineDistribution_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Timeline distribution retrieved successfully"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Get timeline distribution",
                "tags": [
                    "Portfolio"
                ]
            }
        },
        "/api/v1/portfolio/{projectId}/similar": {
            "get": {
                "description": "Retrieves projects similar to the specified project",
                "operationId": "PortfolioController_getSimilarProjects_v1",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Similar projects retrieved successfully"
                    },
                    "404": {
                        "description": "Project not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Get similar projects",
                "tags": [
                    "Portfolio"
                ]
            }
        },
        "/api/v1/portfolio/recommendations": {
            "get": {
                "description": "Retrieves project recommendations based on budget and timeline preferences",
                "operationId": "PortfolioController_getProjectRecommendations_v1",
                "parameters": [
                    {
                        "name": "budget",
                        "required": false,
                        "in": "query",
                        "description": "Maximum budget",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "timeline",
                        "required": false,
                        "in": "query",
                        "description": "Preferred timeline",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project recommendations retrieved successfully"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "summary": "Get project recommendations",
                "tags": [
                    "Portfolio"
                ]
            }
        },
        "/api/v1/contact/messages": {
            "post": {
                "description": "Creates a new contact message through the public contact form. This endpoint is publicly accessible and does not require authentication. Rate limiting is applied to prevent abuse.",
                "operationId": "ContactController_submitContactMessage_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateContactMessageDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Contact message submitted successfully. An email notification will be sent to administrators.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactMessageResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data. Check validation errors for specific field issues.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 400,
                                        "message": [
                                            "name must be a string",
                                            "email must be a valid email address",
                                            "message must not be empty"
                                        ],
                                        "error": "Bad Request"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests - Rate limit exceeded. Please wait before submitting another contact form.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 429,
                                        "message": "ThrottlerException: Too Many Requests",
                                        "error": "Too Many Requests"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Submit contact form",
                "tags": [
                    "Contact"
                ]
            }
        },
        "/api/v1/admin/contact/messages": {
            "get": {
                "description": "Retrieves paginated list of all contact messages with advanced filtering and search capabilities. Supports filtering by status, assignment, date ranges, and includes assignee information.",
                "operationId": "ContactAdminController_getAllContactMessages_v1",
                "parameters": [
                    {
                        "name": "date_to",
                        "required": false,
                        "in": "query",
                        "description": "Filter messages to date (YYYY-MM-DD format)",
                        "schema": {
                            "example": "2024-12-31"
                        }
                    },
                    {
                        "name": "date_from",
                        "required": false,
                        "in": "query",
                        "description": "Filter messages from date (YYYY-MM-DD format)",
                        "schema": {
                            "example": "2024-01-01"
                        }
                    },
                    {
                        "name": "assigned_to",
                        "required": false,
                        "in": "query",
                        "description": "Filter by assigned user ID (UUID format)",
                        "schema": {
                            "example": "550e8400-e29b-41d4-a716-446655440000"
                        }
                    },
                    {
                        "name": "status",
                        "required": false,
                        "in": "query",
                        "description": "Filter by message status (new, read, replied, archived)",
                        "schema": {
                            "enum": [
                                "new",
                                "read",
                                "replied",
                                "archived"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact messages retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactMessageListResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get all contact messages (admin only)",
                "tags": [
                    "Contact Admin"
                ]
            }
        },
        "/api/v1/admin/contact/messages/search": {
            "get": {
                "description": "Performs full-text search across contact messages by name, email, subject, or message content. Supports case-insensitive search with minimum 2 characters.",
                "operationId": "ContactAdminController_searchContactMessages_v1",
                "parameters": [
                    {
                        "name": "q",
                        "required": true,
                        "in": "query",
                        "description": "Search query (minimum 2 characters, maximum 100 characters)",
                        "schema": {
                            "example": "project inquiry",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactMessageListResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Search term is required"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Search contact messages (admin only)",
                "tags": [
                    "Contact Admin"
                ]
            }
        },
        "/api/v1/admin/contact/messages/{id}": {
            "get": {
                "description": "Retrieves detailed information for a specific contact message",
                "operationId": "ContactAdminController_getContactMessageById_v1",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Contact message ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact message details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactMessageResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Contact message not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get contact message by ID (admin only)",
                "tags": [
                    "Contact Admin"
                ]
            }
        },
        "/api/v1/admin/contact/messages/{id}/status": {
            "patch": {
                "description": "Updates the status of a contact message during the processing workflow. Supports status changes from new → read → replied → archived. Automatically sets replied_at timestamp when status changes to replied.",
                "operationId": "ContactAdminController_updateContactMessageStatus_v1",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Contact message ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateContactMessageStatusDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Contact message status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactMessageActionResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status update data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Contact message not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update contact message status (admin only)",
                "tags": [
                    "Contact Admin"
                ]
            }
        },
        "/api/v1/admin/contact/messages/bulk/assign": {
            "post": {
                "description": "Assigns multiple contact messages to a specific staff member in a single operation. Supports up to 100 messages per request. Automatically notifies the assignee.",
                "operationId": "ContactAdminController_bulkAssignContactMessages_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Contact messages assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactMessageBulkActionResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Assignee not found or message IDs not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk assign contact messages (admin only)",
                "tags": [
                    "Contact Admin"
                ]
            }
        },
        "/api/v1/admin/contact/messages/{id}/assign": {
            "post": {
                "description": "Assigns a contact message to a specific staff member",
                "operationId": "ContactAdminController_assignContactMessage_v1",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Contact message ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact message assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactMessageActionResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid assignment data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Contact message not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Assign contact message to staff member (admin only)",
                "tags": [
                    "Contact Admin"
                ]
            }
        },
        "/api/v1/admin/contact/stats": {
            "get": {
                "description": "Retrieves statistics and analytics for contact messages",
                "operationId": "ContactAdminController_getContactMessageStats_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Contact message statistics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactMessageStatsDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get contact message statistics (admin only)",
                "tags": [
                    "Contact Admin"
                ]
            }
        },
        "/api/v1/admin/contact/messages/{id}/delete": {
            "post": {
                "description": "Soft deletes a contact message",
                "operationId": "ContactAdminController_deleteContactMessage_v1",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Contact message ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact message deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactMessageActionResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Contact message not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete contact message (admin only)",
                "tags": [
                    "Contact Admin"
                ]
            }
        },
        "/api/v1/admin/contact/messages/bulk/status": {
            "post": {
                "description": "Updates the status of multiple contact messages in a single operation. Supports up to 100 messages per request. Status changes automatically set replied_at timestamps when appropriate.",
                "operationId": "ContactAdminController_bulkUpdateContactMessageStatus_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Contact messages updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactMessageBulkActionResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request data or message IDs not found"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk update contact message status (admin only)",
                "tags": [
                    "Contact Admin"
                ]
            }
        },
        "/api/v1/admin/system/config": {
            "get": {
                "description": "Retrieves all system configurations with sensitive values redacted",
                "operationId": "SystemController_getAllSystemConfigs_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "statusCode": 403,
                                        "message": "Forbidden - Admin role required",
                                        "error": "Forbidden",
                                        "timestamp": "2024-01-01T00:00:00.000Z",
                                        "path": "/admin/system/config"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get all system configurations (admin only)",
                "tags": [
                    "Admin - System Configuration"
                ]
            },
            "post": {
                "description": "Creates a new system configuration or updates an existing one",
                "operationId": "SystemController_createOrUpdateSystemConfig_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSystemConfigDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "201": {
                        "description": "System configuration created/updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemConfigResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create or update system configuration (admin only)",
                "tags": [
                    "Admin - System Configuration"
                ]
            }
        },
        "/api/v1/admin/system/config/{key}": {
            "get": {
                "description": "Retrieves a specific system configuration by its key",
                "operationId": "SystemController_getSystemConfigByKey_v1",
                "parameters": [
                    {
                        "name": "key",
                        "required": true,
                        "in": "path",
                        "description": "Configuration key",
                        "schema": {
                            "example": "smtp.enabled",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Configuration not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get system configuration by key (admin only)",
                "tags": [
                    "Admin - System Configuration"
                ]
            },
            "patch": {
                "description": "Updates an existing system configuration by its key",
                "operationId": "SystemController_updateSystemConfigByKey_v1",
                "parameters": [
                    {
                        "name": "key",
                        "required": true,
                        "in": "path",
                        "description": "Configuration key",
                        "schema": {
                            "example": "smtp.enabled",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSystemConfigDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Configuration not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update system configuration by key (admin only)",
                "tags": [
                    "Admin - System Configuration"
                ]
            },
            "delete": {
                "description": "Deletes a system configuration by its key",
                "operationId": "SystemController_deleteSystemConfigByKey_v1",
                "parameters": [
                    {
                        "name": "key",
                        "required": true,
                        "in": "path",
                        "description": "Configuration key",
                        "schema": {
                            "example": "smtp.enabled",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Configuration not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delete system configuration by key (admin only)",
                "tags": [
                    "Admin - System Configuration"
                ]
            }
        },
        "/api/v1/admin/system/info": {
            "get": {
                "description": "Retrieves detailed system information including version, uptime, and environment",
                "operationId": "SystemController_getSystemInfo_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get system information (admin only)",
                "tags": [
                    "Admin - System Configuration"
                ]
            }
        },
        "/api/v1/admin/system/info/public": {
            "get": {
                "description": "Retrieves minimal public system information (name and version only)",
                "operationId": "SystemController_getPublicSystemInfo_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get public system information",
                "tags": [
                    "Admin - System Configuration"
                ]
            }
        },
        "/api/v1/admin/system/health": {
            "get": {
                "description": "Retrieves comprehensive system health including database, cache, queue, external services, and performance metrics",
                "operationId": "SystemController_getSystemHealth_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get detailed system health information (admin only)",
                "tags": [
                    "Admin - System Configuration"
                ]
            }
        },
        "/api/v1/admin/system/api-keys": {
            "post": {
                "description": "Creates a new internal API key for service-to-service communication",
                "operationId": "SystemController_createInternalApiKey_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateApiKeyDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "201": {
                        "description": "Internal API key created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "key_name": "webhook-service",
                                        "key_hash": "sha256-hash-of-the-key",
                                        "created_at": "2024-01-01T00:00:00.000Z"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "409": {
                        "description": "API key with this name already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create internal API key (admin only)",
                "tags": [
                    "Admin - System Configuration"
                ]
            },
            "get": {
                "description": "Retrieves list of all internal API keys with their status and metadata",
                "operationId": "SystemController_getAllInternalApiKeys_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get all internal API keys (admin only)",
                "tags": [
                    "Admin - System Configuration"
                ]
            }
        },
        "/api/v1/admin/system/api-keys/{keyId}/revoke": {
            "patch": {
                "description": "Revokes an internal API key by its ID",
                "operationId": "SystemController_revokeInternalApiKey_v1",
                "parameters": [
                    {
                        "name": "keyId",
                        "required": true,
                        "in": "path",
                        "description": "API key ID",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiKeyRevokeDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "API key not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Revoke internal API key (admin only)",
                "tags": [
                    "Admin - System Configuration"
                ]
            }
        },
        "/api/v1/admin/audit/logs": {
            "get": {
                "description": "Retrieves paginated audit logs with advanced filtering capabilities",
                "operationId": "AuditController_getAuditLogs_v1",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resource_type",
                        "required": false,
                        "in": "query",
                        "description": "Filter by resource type",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resource_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by resource ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "required": false,
                        "in": "query",
                        "description": "Filter by action",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start_date",
                        "required": false,
                        "in": "query",
                        "description": "Filter by start date (ISO 8601)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "end_date",
                        "required": false,
                        "in": "query",
                        "description": "Filter by end date (ISO 8601)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ip_address",
                        "required": false,
                        "in": "query",
                        "description": "Filter by IP address",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search in action, resource_type, or details",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_order",
                        "required": false,
                        "in": "query",
                        "description": "Sort order (asc/desc)",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_field",
                        "required": false,
                        "in": "query",
                        "description": "Sort field",
                        "schema": {
                            "enum": [
                                "created_at",
                                "action",
                                "resource_type",
                                "user_id"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit logs retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditLogListResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error occurred while retrieving audit logs"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get audit logs with filtering and pagination (admin only)",
                "tags": [
                    "Admin - Audit Logs"
                ]
            }
        },
        "/api/v1/admin/audit/logs/{id}": {
            "get": {
                "description": "Retrieves detailed information for a specific audit log entry",
                "operationId": "AuditController_getAuditLogById_v1",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Audit log ID",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit log retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditLogResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Audit log not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get audit log by ID (admin only)",
                "tags": [
                    "Admin - Audit Logs"
                ]
            }
        },
        "/api/v1/admin/audit/stats": {
            "get": {
                "description": "Retrieves comprehensive audit log statistics for dashboard analytics",
                "operationId": "AuditController_getAuditLogStats_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Audit log statistics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditLogStatsResponseDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get audit log statistics (admin only)",
                "tags": [
                    "Admin - Audit Logs"
                ]
            }
        },
        "/api/v1/admin/audit/export": {
            "post": {
                "description": "Initiates an audit log export job in the specified format",
                "operationId": "AuditController_exportAuditLogs_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuditLogExportDto"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Export job initiated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "job_id": "audit-export-1234567890-abc123",
                                        "status": "processing",
                                        "created_at": "2024-01-01T00:00:00.000Z"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid export configuration"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Export audit logs (admin only)",
                "tags": [
                    "Admin - Audit Logs"
                ]
            }
        },
        "/api/v1/admin/audit/export/{jobId}/status": {
            "get": {
                "description": "Retrieves the status of an audit log export job",
                "operationId": "AuditController_getExportStatus_v1",
                "parameters": [
                    {
                        "name": "jobId",
                        "required": true,
                        "in": "path",
                        "description": "Export job ID",
                        "schema": {
                            "example": "audit-export-1234567890-abc123",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export job status retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "job_id": "audit-export-1234567890-abc123",
                                        "status": "completed",
                                        "download_url": "https://example.com/exports/audit-logs-uuid.csv",
                                        "record_count": 1000,
                                        "file_size": 1024000,
                                        "created_at": "2024-01-01T00:00:00.000Z",
                                        "completed_at": "2024-01-01T00:01:00.000Z"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Export job not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get export job status (admin only)",
                "tags": [
                    "Admin - Audit Logs"
                ]
            }
        },
        "/api/v1/admin/dashboard": {
            "get": {
                "description": "Retrieves comprehensive dashboard data including system overview, recent activity, and performance metrics",
                "operationId": "DashboardController_getDashboard_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get admin dashboard data (admin only)",
                "tags": [
                    "Admin - Dashboard & Analytics"
                ]
            }
        },
        "/api/v1/admin/analytics/requests": {
            "get": {
                "description": "Retrieves comprehensive request analytics including trends, status distribution, and performance metrics",
                "operationId": "DashboardController_getRequestAnalytics_v1",
                "parameters": [
                    {
                        "name": "start_date",
                        "required": false,
                        "in": "query",
                        "description": "Start date for analytics (ISO 8601)",
                        "schema": {
                            "example": "2024-01-01T00:00:00.000Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "end_date",
                        "required": false,
                        "in": "query",
                        "description": "End date for analytics (ISO 8601)",
                        "schema": {
                            "example": "2024-12-31T23:59:59.999Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "period",
                        "required": false,
                        "in": "query",
                        "description": "Analytics period",
                        "schema": {
                            "enum": [
                                "day",
                                "week",
                                "month",
                                "year"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user ID",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "name": "project_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by project ID",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "name": "group_by",
                        "required": false,
                        "in": "query",
                        "description": "Group by field for analytics",
                        "schema": {
                            "example": "status",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_order",
                        "required": false,
                        "in": "query",
                        "description": "Sort order for results",
                        "schema": {
                            "default": "desc",
                            "example": "desc",
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get request analytics (admin only)",
                "tags": [
                    "Admin - Dashboard & Analytics"
                ]
            }
        },
        "/api/v1/admin/analytics/users": {
            "get": {
                "description": "Retrieves comprehensive user analytics including growth trends, engagement metrics, and activity patterns",
                "operationId": "DashboardController_getUserAnalytics_v1",
                "parameters": [
                    {
                        "name": "start_date",
                        "required": false,
                        "in": "query",
                        "description": "Start date for analytics (ISO 8601)",
                        "schema": {
                            "example": "2024-01-01T00:00:00.000Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "end_date",
                        "required": false,
                        "in": "query",
                        "description": "End date for analytics (ISO 8601)",
                        "schema": {
                            "example": "2024-12-31T23:59:59.999Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "period",
                        "required": false,
                        "in": "query",
                        "description": "Analytics period",
                        "schema": {
                            "enum": [
                                "day",
                                "week",
                                "month",
                                "year"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user ID",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "name": "project_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by project ID",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "name": "group_by",
                        "required": false,
                        "in": "query",
                        "description": "Group by field for analytics",
                        "schema": {
                            "example": "status",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_order",
                        "required": false,
                        "in": "query",
                        "description": "Sort order for results",
                        "schema": {
                            "default": "desc",
                            "example": "desc",
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get user analytics (admin only)",
                "tags": [
                    "Admin - Dashboard & Analytics"
                ]
            }
        },
        "/api/v1/admin/analytics/payments": {
            "get": {
                "description": "Retrieves comprehensive payment analytics including revenue trends, payment method distribution, and financial metrics",
                "operationId": "DashboardController_getPaymentAnalytics_v1",
                "parameters": [
                    {
                        "name": "start_date",
                        "required": false,
                        "in": "query",
                        "description": "Start date for analytics (ISO 8601)",
                        "schema": {
                            "example": "2024-01-01T00:00:00.000Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "end_date",
                        "required": false,
                        "in": "query",
                        "description": "End date for analytics (ISO 8601)",
                        "schema": {
                            "example": "2024-12-31T23:59:59.999Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "period",
                        "required": false,
                        "in": "query",
                        "description": "Analytics period",
                        "schema": {
                            "enum": [
                                "day",
                                "week",
                                "month",
                                "year"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user ID",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "name": "project_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by project ID",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "name": "group_by",
                        "required": false,
                        "in": "query",
                        "description": "Group by field for analytics",
                        "schema": {
                            "example": "status",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_order",
                        "required": false,
                        "in": "query",
                        "description": "Sort order for results",
                        "schema": {
                            "default": "desc",
                            "example": "desc",
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get payment analytics (admin only)",
                "tags": [
                    "Admin - Dashboard & Analytics"
                ]
            }
        },
        "/api/v1/admin/analytics/quotes": {
            "get": {
                "description": "Retrieves comprehensive quote analytics including conversion trends, performance metrics, and value analysis",
                "operationId": "DashboardController_getQuoteAnalytics_v1",
                "parameters": [
                    {
                        "name": "start_date",
                        "required": false,
                        "in": "query",
                        "description": "Start date for analytics (ISO 8601)",
                        "schema": {
                            "example": "2024-01-01T00:00:00.000Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "end_date",
                        "required": false,
                        "in": "query",
                        "description": "End date for analytics (ISO 8601)",
                        "schema": {
                            "example": "2024-12-31T23:59:59.999Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "period",
                        "required": false,
                        "in": "query",
                        "description": "Analytics period",
                        "schema": {
                            "enum": [
                                "day",
                                "week",
                                "month",
                                "year"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by user ID",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "name": "project_id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by project ID",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "name": "group_by",
                        "required": false,
                        "in": "query",
                        "description": "Group by field for analytics",
                        "schema": {
                            "example": "status",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_order",
                        "required": false,
                        "in": "query",
                        "description": "Sort order for results",
                        "schema": {
                            "default": "desc",
                            "example": "desc",
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get quote analytics (admin only)",
                "tags": [
                    "Admin - Dashboard & Analytics"
                ]
            }
        },
        "/api/v1/admin/analytics/rate-limits": {
            "get": {
                "description": "Retrieves comprehensive rate limiting analytics including request patterns, violation statistics, and configuration overview",
                "operationId": "DashboardController_getRateLimitAnalytics_v1",
                "parameters": [
                    {
                        "name": "start_date",
                        "required": false,
                        "in": "query",
                        "description": "Start date for analytics (ISO 8601)",
                        "schema": {
                            "example": "2024-01-01T00:00:00.000Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "end_date",
                        "required": false,
                        "in": "query",
                        "description": "End date for analytics (ISO 8601)",
                        "schema": {
                            "example": "2024-12-31T23:59:59.999Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "period",
                        "required": false,
                        "in": "query",
                        "description": "Analytics period",
                        "schema": {
                            "enum": [
                                "hour",
                                "day",
                                "week",
                                "month"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "required": false,
                        "in": "query",
                        "description": "User ID to filter by",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "name": "project_id",
                        "required": false,
                        "in": "query",
                        "description": "Project ID to filter by",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "name": "group_by",
                        "required": false,
                        "in": "query",
                        "description": "Group by field for analytics",
                        "schema": {
                            "example": "status",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_order",
                        "required": false,
                        "in": "query",
                        "description": "Sort order for results",
                        "schema": {
                            "default": "desc",
                            "example": "desc",
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get rate limit analytics (admin only)",
                "tags": [
                    "Admin - Dashboard & Analytics"
                ]
            }
        },
        "/api/v1/admin/webhooks/logs": {
            "get": {
                "description": "Retrieves paginated webhook delivery logs with advanced filtering capabilities",
                "operationId": "AdminWebhooksController_getWebhookLogs_v1",
                "parameters": [
                    {
                        "name": "event_type",
                        "required": false,
                        "in": "query",
                        "description": "Filter by event type",
                        "schema": {
                            "example": "payment.completed",
                            "type": "string"
                        }
                    },
                    {
                        "name": "service",
                        "required": false,
                        "in": "query",
                        "description": "Filter by webhook service/source",
                        "schema": {
                            "example": "stripe",
                            "type": "string"
                        }
                    },
                    {
                        "name": "source",
                        "required": false,
                        "in": "query",
                        "description": "Filter by webhook source",
                        "schema": {
                            "example": "stripe",
                            "type": "string"
                        }
                    },
                    {
                        "name": "processed",
                        "required": false,
                        "in": "query",
                        "description": "Filter by processing status",
                        "schema": {
                            "example": true,
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "start_date",
                        "required": false,
                        "in": "query",
                        "description": "Filter by start date (ISO 8601)",
                        "schema": {
                            "example": "2024-01-01T00:00:00.000Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "end_date",
                        "required": false,
                        "in": "query",
                        "description": "Filter by end date (ISO 8601)",
                        "schema": {
                            "example": "2024-12-31T23:59:59.999Z",
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search in event type, source, or payload",
                        "schema": {
                            "example": "payment",
                            "type": "string"
                        }
                    },
                    {
                        "name": "min_attempts",
                        "required": false,
                        "in": "query",
                        "description": "Filter by minimum processing attempts",
                        "schema": {
                            "example": 1,
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get webhook delivery logs (admin only)",
                "tags": [
                    "Admin - Webhook Management"
                ]
            }
        },
        "/api/v1/admin/webhooks/logs/{id}": {
            "get": {
                "description": "Retrieves detailed information for a specific webhook event including processing history",
                "operationId": "AdminWebhooksController_getWebhookEventDetails_v1",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Webhook event ID",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Webhook event not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get webhook event details (admin only)",
                "tags": [
                    "Admin - Webhook Management"
                ]
            }
        },
        "/api/v1/admin/webhooks/{service}/retry/{eventId}": {
            "post": {
                "description": "Initiates a retry for a failed webhook delivery",
                "operationId": "AdminWebhooksController_retryWebhookDelivery_v1",
                "parameters": [
                    {
                        "name": "service",
                        "required": true,
                        "in": "path",
                        "description": "Webhook service name",
                        "schema": {
                            "example": "stripe",
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventId",
                        "required": true,
                        "in": "path",
                        "description": "Webhook event ID",
                        "schema": {
                            "example": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Webhook event not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Retry failed webhook delivery (admin only)",
                "tags": [
                    "Admin - Webhook Management"
                ]
            }
        },
        "/api/v1/admin/webhooks/stats": {
            "get": {
                "description": "Retrieves comprehensive webhook statistics including success rates and processing times",
                "operationId": "AdminWebhooksController_getWebhookStats_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get webhook statistics (admin only)",
                "tags": [
                    "Admin - Webhook Management"
                ]
            }
        },
        "/api/v1/admin/webhooks/service-stats": {
            "get": {
                "description": "Retrieves webhook statistics broken down by service/source",
                "operationId": "AdminWebhooksController_getWebhookServiceStats_v1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Get webhook service statistics (admin only)",
                "tags": [
                    "Admin - Webhook Management"
                ]
            }
        },
        "/api/v1/admin/webhooks/bulk-retry": {
            "post": {
                "description": "Initiates retry for multiple failed webhook deliveries based on filter criteria",
                "operationId": "AdminWebhooksController_bulkRetryWebhooks_v1",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkWebhookRetryDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation completed successfully"
                    },
                    "400": {
                        "description": "Invalid filter criteria"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing JWT token"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Bulk retry failed webhooks (admin only)",
                "tags": [
                    "Admin - Webhook Management"
                ]
            }
        }
    },
    "info": {
        "title": "Nest Lancer API Test",
        "description": "API documentation for Nest Lancer API Test v1.0.0",
        "version": "1.0.0",
        "contact": {}
    },
    "tags": [],
    "servers": [],
    "components": {
        "securitySchemes": {
            "bearer": {
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "type": "http"
            },
            "api-key": {
                "type": "apiKey",
                "in": "header",
                "name": "X-API-Key",
                "description": "Internal API key for service-to-service communication"
            }
        },
        "schemas": {
            "CreateSetupIntentDto": {
                "type": "object",
                "properties": {
                    "payment_method_types": {
                        "description": "Payment method types for the setup intent",
                        "example": [
                            "card"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "usage": {
                        "type": "string",
                        "description": "Usage type for the setup intent",
                        "example": "off_session"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional metadata for the setup intent",
                        "example": {
                            "source": "web",
                            "user_agent": "Mozilla/5.0..."
                        }
                    }
                }
            },
            "RazorpayTokenResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Razorpay token ID",
                        "example": "token_1234567890"
                    },
                    "status": {
                        "type": "string",
                        "description": "Token status",
                        "example": "active"
                    },
                    "method": {
                        "type": "string",
                        "description": "Token method type",
                        "example": "card"
                    },
                    "customer_id": {
                        "type": "string",
                        "description": "Razorpay customer ID",
                        "example": "cust_1234567890"
                    },
                    "created_at": {
                        "type": "number",
                        "description": "Token creation timestamp",
                        "example": 1640995200
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Token metadata",
                        "example": {
                            "user_id": "123e4567-e89b-12d3-a456-426614174002"
                        }
                    }
                },
                "required": [
                    "id",
                    "status",
                    "method",
                    "customer_id",
                    "created_at"
                ]
            },
            "CreatePaymentIntentDto": {
                "type": "object",
                "properties": {
                    "payment_method_id": {
                        "type": "string",
                        "description": "Payment method ID (token) to use for payment, or payment ID for confirmation",
                        "example": "token_1234567890"
                    },
                    "save_payment_method": {
                        "type": "boolean",
                        "description": "Whether to save the payment method for future use",
                        "example": true
                    },
                    "set_as_default": {
                        "type": "boolean",
                        "description": "Whether to set the payment method as default",
                        "example": false
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional metadata for the payment",
                        "example": {
                            "source": "web",
                            "campaign": "summer_sale"
                        }
                    }
                }
            },
            "RazorpayOrderResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Razorpay order ID",
                        "example": "order_1234567890"
                    },
                    "amount": {
                        "type": "number",
                        "description": "Order amount in paise (smallest currency unit)",
                        "example": 500000
                    },
                    "amount_in_rupees": {
                        "type": "number",
                        "description": "Order amount in rupees (for display)",
                        "example": 5000
                    },
                    "currency": {
                        "type": "string",
                        "description": "Order currency",
                        "example": "INR"
                    },
                    "status": {
                        "type": "string",
                        "description": "Order status",
                        "example": "created"
                    },
                    "key": {
                        "type": "string",
                        "description": "Order key for frontend integration",
                        "example": "rzp_test_1234567890abcdef"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Order metadata",
                        "example": {
                            "quote_id": "123e4567-e89b-12d3-a456-426614174001"
                        }
                    }
                },
                "required": [
                    "id",
                    "amount",
                    "amount_in_rupees",
                    "currency",
                    "status",
                    "key"
                ]
            },
            "ConfirmPaymentDto": {
                "type": "object",
                "properties": {
                    "payment_id": {
                        "type": "string",
                        "description": "Payment ID from Razorpay after successful authorization",
                        "example": "pay_1234567890"
                    },
                    "save_payment_method": {
                        "type": "boolean",
                        "description": "Whether to save the payment method for future use",
                        "example": true
                    },
                    "set_as_default": {
                        "type": "boolean",
                        "description": "Whether to set the payment method as default",
                        "example": false
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional metadata for the payment confirmation",
                        "example": {
                            "source": "mobile_app",
                            "version": "1.2.3"
                        }
                    }
                }
            },
            "PaymentResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Payment ID",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "quote_id": {
                        "type": "string",
                        "description": "Quote ID associated with this payment",
                        "example": "123e4567-e89b-12d3-a456-426614174001"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "User ID who made the payment",
                        "example": "123e4567-e89b-12d3-a456-426614174002"
                    },
                    "amount": {
                        "type": "number",
                        "description": "Payment amount",
                        "example": 500
                    },
                    "currency": {
                        "type": "string",
                        "description": "Payment currency",
                        "example": "INR"
                    },
                    "status": {
                        "type": "string",
                        "description": "Payment status",
                        "enum": [
                            "pending",
                            "processing",
                            "completed",
                            "failed",
                            "refunded",
                            "partially_refunded"
                        ],
                        "example": "completed"
                    },
                    "razorpay_order_id": {
                        "type": "string",
                        "description": "Razorpay order ID",
                        "example": "order_1234567890"
                    },
                    "razorpay_payment_id": {
                        "type": "string",
                        "description": "Razorpay payment ID",
                        "example": "pay_1234567890"
                    },
                    "razorpay_customer_id": {
                        "type": "string",
                        "description": "Razorpay customer ID",
                        "example": "cust_1234567890"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Payment metadata",
                        "example": {
                            "source": "web",
                            "campaign": "summer2024"
                        }
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Payment creation timestamp",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Payment last update timestamp",
                        "example": "2024-01-15T10:35:00Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Payment soft delete timestamp",
                        "example": null
                    }
                },
                "required": [
                    "id",
                    "quote_id",
                    "user_id",
                    "amount",
                    "currency",
                    "status",
                    "razorpay_order_id",
                    "created_at",
                    "updated_at"
                ]
            },
            "PaymentMethodResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Payment method ID",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "User ID who owns this payment method",
                        "example": "123e4567-e89b-12d3-a456-426614174002"
                    },
                    "razorpay_customer_id": {
                        "type": "string",
                        "description": "Razorpay customer ID",
                        "example": "cust_1234567890"
                    },
                    "razorpay_token_id": {
                        "type": "string",
                        "description": "Razorpay token ID",
                        "example": "token_1234567890"
                    },
                    "type": {
                        "type": "string",
                        "description": "Payment method type",
                        "example": "card"
                    },
                    "is_default": {
                        "type": "boolean",
                        "description": "Whether this is the default payment method",
                        "example": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Payment method metadata",
                        "example": {
                            "last_four": "4242",
                            "brand": "visa"
                        }
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Payment method creation timestamp",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Payment method last update timestamp",
                        "example": "2024-01-15T10:35:00Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Payment method soft delete timestamp",
                        "example": null
                    }
                },
                "required": [
                    "id",
                    "user_id",
                    "type",
                    "is_default",
                    "created_at",
                    "updated_at"
                ]
            },
            "AddPaymentMethodDto": {
                "type": "object",
                "properties": {
                    "payment_method_id": {
                        "type": "string",
                        "description": "Payment method ID from Razorpay",
                        "example": "token_1234567890"
                    },
                    "type": {
                        "type": "string",
                        "description": "Payment method type",
                        "example": "card",
                        "enum": [
                            "card",
                            "netbanking",
                            "wallet",
                            "upi"
                        ]
                    },
                    "is_default": {
                        "type": "boolean",
                        "description": "Whether to set as default payment method",
                        "example": false
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional metadata for the payment method",
                        "example": {
                            "last_four": "1234",
                            "brand": "visa"
                        }
                    }
                },
                "required": [
                    "payment_method_id",
                    "type"
                ]
            },
            "SetDefaultPaymentMethodDto": {
                "type": "object",
                "properties": {
                    "payment_method_id": {
                        "type": "string",
                        "description": "UUID of the payment method to set as default",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                },
                "required": [
                    "payment_method_id"
                ]
            },
            "PaymentReceiptResponseDto": {
                "type": "object",
                "properties": {
                    "receipt_id": {
                        "type": "string",
                        "description": "Receipt ID",
                        "example": "receipt_123e4567-e89b-12d3-a456-426614174000"
                    },
                    "payment_id": {
                        "type": "string",
                        "description": "Payment ID",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "amount": {
                        "type": "number",
                        "description": "Payment amount",
                        "example": 500
                    },
                    "currency": {
                        "type": "string",
                        "description": "Payment currency",
                        "example": "INR"
                    },
                    "status": {
                        "type": "string",
                        "description": "Payment status",
                        "enum": [
                            "pending",
                            "processing",
                            "completed",
                            "failed",
                            "refunded",
                            "partially_refunded"
                        ],
                        "example": "completed"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Payment creation timestamp",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "quote": {
                        "type": "object",
                        "description": "Quote information"
                    },
                    "user": {
                        "type": "object",
                        "description": "User information"
                    },
                    "receipt_number": {
                        "type": "string",
                        "description": "Receipt number",
                        "example": "RCP-12345678-ABC123"
                    },
                    "qr_code_data": {
                        "type": "string",
                        "description": "QR code verification data",
                        "example": "receipt:RCP-12345678-ABC123:1704067200000:a1b2c3d4e5f67890"
                    },
                    "qr_code_url": {
                        "type": "string",
                        "description": "QR code image URL",
                        "example": "https://cdn.example.com/qr-codes/RCP-12345678-ABC123.png"
                    }
                },
                "required": [
                    "receipt_id",
                    "payment_id",
                    "amount",
                    "currency",
                    "status",
                    "created_at",
                    "receipt_number"
                ]
            },
            "QrCodeVerificationResponseDto": {
                "type": "object",
                "properties": {
                    "isValid": {
                        "type": "boolean",
                        "description": "Whether the QR code is valid",
                        "example": true
                    },
                    "receiptNumber": {
                        "type": "string",
                        "description": "Receipt number from QR code",
                        "example": "RCP-12345678-ABC123"
                    },
                    "paymentId": {
                        "type": "string",
                        "description": "Payment ID associated with the receipt",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "verifiedAt": {
                        "type": "string",
                        "description": "Verification timestamp",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "message": {
                        "type": "string",
                        "description": "Verification message",
                        "example": "Receipt authenticity verified successfully"
                    },
                    "details": {
                        "type": "object",
                        "description": "Additional verification details"
                    }
                },
                "required": [
                    "isValid",
                    "receiptNumber",
                    "paymentId",
                    "verifiedAt",
                    "message"
                ]
            },
            "ProcessRefundDto": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "description": "Refund amount",
                        "example": 100
                    },
                    "reason": {
                        "type": "string",
                        "description": "Refund reason",
                        "example": "requested_by_customer"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional metadata for the refund",
                        "example": {
                            "admin_note": "Processed by customer service"
                        }
                    }
                },
                "required": [
                    "amount"
                ]
            },
            "RefundResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Refund ID",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "payment_id": {
                        "type": "string",
                        "description": "Payment ID associated with this refund",
                        "example": "123e4567-e89b-12d3-a456-426614174001"
                    },
                    "amount": {
                        "type": "number",
                        "description": "Refund amount",
                        "example": 250
                    },
                    "reason": {
                        "type": "string",
                        "description": "Refund reason",
                        "example": "Customer requested cancellation"
                    },
                    "status": {
                        "type": "string",
                        "description": "Refund status",
                        "enum": [
                            "pending",
                            "processed",
                            "failed"
                        ],
                        "example": "processed"
                    },
                    "razorpay_refund_id": {
                        "type": "string",
                        "description": "Razorpay refund ID",
                        "example": "rfnd_1234567890"
                    },
                    "processed_by": {
                        "type": "string",
                        "description": "Admin user ID who processed the refund",
                        "example": "123e4567-e89b-12d3-a456-426614174003"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Refund creation timestamp",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Refund last update timestamp",
                        "example": "2024-01-15T10:35:00Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Refund soft delete timestamp",
                        "example": null
                    }
                },
                "required": [
                    "id",
                    "payment_id",
                    "amount",
                    "status",
                    "razorpay_refund_id",
                    "processed_by",
                    "created_at",
                    "updated_at"
                ]
            },
            "CreateAuditLogDto": {
                "type": "object",
                "properties": {}
            },
            "NotificationListResponseDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "List of notifications",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pagination": {
                        "type": "object",
                        "description": "Pagination metadata"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Filter metadata"
                    }
                },
                "required": [
                    "data",
                    "pagination",
                    "filters"
                ]
            },
            "UpdateNotificationDto": {
                "type": "object",
                "properties": {
                    "is_read": {
                        "type": "boolean",
                        "description": "Whether notification has been read",
                        "example": true
                    }
                }
            },
            "NotificationResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique notification identifier",
                        "example": "uuid"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "User ID this notification belongs to",
                        "example": "uuid"
                    },
                    "type": {
                        "type": "string",
                        "description": "Notification type",
                        "enum": [
                            "quote_accepted",
                            "quote_declined",
                            "payment_received",
                            "payment_completed",
                            "refund_processed",
                            "project_completed",
                            "quote_sent",
                            "request_status_changed",
                            "milestone_reached",
                            "testimonial_received",
                            "system_announcement",
                            "security_alert",
                            "comment_received",
                            "comment_approved",
                            "progress_update",
                            "milestone_completed",
                            "milestone_payment_released",
                            "payment_released",
                            "conversation_created",
                            "message_received",
                            "welcome"
                        ],
                        "example": "quote_sent"
                    },
                    "title": {
                        "type": "string",
                        "description": "Notification title",
                        "example": "New Quote Received"
                    },
                    "content": {
                        "type": "string",
                        "description": "Notification content/message",
                        "example": "You have received a new quote for your project."
                    },
                    "action_url": {
                        "type": "string",
                        "description": "Action URL for the notification",
                        "example": "/quotes/123",
                        "nullable": true
                    },
                    "entity_type": {
                        "type": "string",
                        "description": "Related entity type",
                        "example": "quote",
                        "nullable": true
                    },
                    "entity_id": {
                        "type": "string",
                        "description": "Related entity ID",
                        "example": "uuid",
                        "nullable": true
                    },
                    "is_read": {
                        "type": "boolean",
                        "description": "Whether notification has been read",
                        "example": false
                    },
                    "read_at": {
                        "type": "object",
                        "description": "Read timestamp",
                        "nullable": true
                    },
                    "priority": {
                        "type": "string",
                        "description": "Notification priority",
                        "enum": [
                            "low",
                            "normal",
                            "high",
                            "urgent"
                        ],
                        "example": "normal"
                    },
                    "expires_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Expiration timestamp",
                        "nullable": true
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    },
                    "user": {
                        "type": "object",
                        "description": "User information"
                    }
                },
                "required": [
                    "id",
                    "user_id",
                    "type",
                    "title",
                    "content",
                    "action_url",
                    "entity_type",
                    "entity_id",
                    "is_read",
                    "read_at",
                    "priority",
                    "expires_at",
                    "created_at",
                    "updated_at"
                ]
            },
            "BulkNotificationActionDto": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The action to perform on the notifications",
                        "enum": [
                            "mark_read",
                            "mark_unread",
                            "delete"
                        ],
                        "example": "mark_read"
                    },
                    "notification_ids": {
                        "description": "Array of notification IDs to perform the action on",
                        "example": [
                            "uuid-1",
                            "uuid-2",
                            "uuid-3"
                        ],
                        "minItems": 1,
                        "maxItems": 100,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "action",
                    "notification_ids"
                ]
            },
            "ProjectListResponseDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "List of projects",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pagination": {
                        "type": "object",
                        "description": "Pagination metadata"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Filter metadata"
                    }
                },
                "required": [
                    "data",
                    "pagination",
                    "filters"
                ]
            },
            "ProjectResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique project identifier",
                        "example": "uuid"
                    },
                    "title": {
                        "type": "string",
                        "description": "Project title",
                        "example": "E-commerce Platform"
                    },
                    "description": {
                        "type": "string",
                        "description": "Project description",
                        "example": "Full-stack e-commerce solution..."
                    },
                    "short_description": {
                        "type": "string",
                        "description": "Short project description",
                        "example": "Modern e-commerce platform"
                    },
                    "slug": {
                        "type": "string",
                        "description": "Project slug for URL",
                        "example": "e-commerce-platform"
                    },
                    "owner_id": {
                        "type": "string",
                        "description": "Project owner ID",
                        "example": "uuid"
                    },
                    "featured": {
                        "type": "boolean",
                        "description": "Whether project is featured",
                        "example": false
                    },
                    "status": {
                        "type": "string",
                        "description": "Project status",
                        "enum": [
                            "draft",
                            "published",
                            "archived"
                        ],
                        "example": "published"
                    },
                    "pricing_options": {
                        "type": "object",
                        "description": "Pricing options",
                        "example": {
                            "basic": 1000,
                            "premium": 2500
                        }
                    },
                    "estimated_timeline": {
                        "type": "string",
                        "description": "Estimated timeline",
                        "example": "2-4 weeks"
                    },
                    "requirements": {
                        "description": "Project requirements",
                        "example": [
                            "User authentication",
                            "Payment integration",
                            "Mobile responsive"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    },
                    "owner": {
                        "type": "object",
                        "description": "Project owner information"
                    },
                    "tech_stack": {
                        "description": "Technology stack",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "description": "Project tags",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "testimonials": {
                        "description": "Project testimonials",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "media": {
                        "description": "Project media",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "id",
                    "title",
                    "description",
                    "short_description",
                    "slug",
                    "owner_id",
                    "featured",
                    "status",
                    "pricing_options",
                    "estimated_timeline",
                    "created_at",
                    "updated_at"
                ]
            },
            "ProjectPricingResponseDto": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID",
                        "example": "uuid"
                    },
                    "title": {
                        "type": "string",
                        "description": "Project title",
                        "example": "E-commerce Platform"
                    },
                    "pricing_options": {
                        "type": "object",
                        "description": "Pricing options",
                        "example": {
                            "basic": 1000,
                            "premium": 2500
                        }
                    },
                    "estimated_timeline": {
                        "type": "string",
                        "description": "Estimated timeline",
                        "example": "2-4 weeks"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency",
                        "example": "INR"
                    }
                },
                "required": [
                    "project_id",
                    "title",
                    "pricing_options",
                    "estimated_timeline",
                    "currency"
                ]
            },
            "ProjectTechStackResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Technology ID",
                        "example": "uuid"
                    },
                    "name": {
                        "type": "string",
                        "description": "Technology name",
                        "example": "React"
                    },
                    "category": {
                        "type": "string",
                        "description": "Technology category",
                        "example": "Frontend"
                    },
                    "expertise_level": {
                        "type": "string",
                        "description": "Expertise level",
                        "example": "Expert"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "category",
                    "expertise_level"
                ]
            },
            "ProjectTestimonialResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Testimonial ID",
                        "example": "uuid"
                    },
                    "content": {
                        "type": "string",
                        "description": "Testimonial content",
                        "example": "Great work on our project!"
                    },
                    "rating": {
                        "type": "number",
                        "description": "Rating (1-5)",
                        "example": 5
                    },
                    "status": {
                        "type": "string",
                        "description": "Testimonial status",
                        "example": "approved"
                    },
                    "user": {
                        "type": "object",
                        "description": "User information"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    }
                },
                "required": [
                    "id",
                    "content",
                    "rating",
                    "status",
                    "user",
                    "created_at"
                ]
            },
            "CreateTestimonialDto": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Testimonial content",
                        "example": "Excellent work on our e-commerce platform!"
                    },
                    "rating": {
                        "type": "number",
                        "description": "Rating (1-5)",
                        "example": 5,
                        "minimum": 1,
                        "maximum": 5
                    }
                },
                "required": [
                    "content",
                    "rating"
                ]
            },
            "CreateProjectDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Project title",
                        "example": "E-commerce Platform",
                        "minLength": 3,
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed project description",
                        "example": "Full-stack e-commerce solution with modern UI/UX..."
                    },
                    "short_description": {
                        "type": "string",
                        "description": "Short project description for listings",
                        "example": "Modern e-commerce platform",
                        "maxLength": 500
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL-friendly slug (auto-generated if not provided)",
                        "example": "modern-e-commerce-platform",
                        "maxLength": 255
                    },
                    "owner_id": {
                        "type": "string",
                        "description": "Project owner ID (admin user)",
                        "example": "uuid"
                    },
                    "featured": {
                        "type": "boolean",
                        "description": "Whether project should be featured",
                        "example": false
                    },
                    "status": {
                        "type": "string",
                        "description": "Project status",
                        "enum": [
                            "draft",
                            "published",
                            "archived"
                        ],
                        "example": "draft"
                    },
                    "pricing_options": {
                        "type": "object",
                        "description": "Pricing options configuration",
                        "example": {
                            "basic": 1000,
                            "premium": 2500,
                            "enterprise": 5000
                        }
                    },
                    "estimated_timeline": {
                        "type": "string",
                        "description": "Estimated project timeline",
                        "example": "2-4 weeks",
                        "maxLength": 100
                    },
                    "tech_stack_ids": {
                        "description": "Technology stack IDs",
                        "example": [
                            "uuid1",
                            "uuid2"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tag_ids": {
                        "description": "Project tag IDs",
                        "example": [
                            "uuid1",
                            "uuid2"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "title",
                    "description",
                    "owner_id"
                ]
            },
            "UpdateProjectDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Project title",
                        "example": "E-commerce Platform v2",
                        "minLength": 3,
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed project description",
                        "example": "Updated full-stack e-commerce solution..."
                    },
                    "short_description": {
                        "type": "string",
                        "description": "Short project description for listings",
                        "example": "Modern e-commerce platform v2",
                        "maxLength": 500
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL-friendly slug (auto-regenerated if title changes)",
                        "example": "modern-e-commerce-platform-v2",
                        "maxLength": 255
                    },
                    "featured": {
                        "type": "boolean",
                        "description": "Whether project should be featured",
                        "example": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Project status",
                        "enum": [
                            "draft",
                            "published",
                            "archived"
                        ],
                        "example": "published"
                    },
                    "pricing_options": {
                        "type": "object",
                        "description": "Pricing options configuration",
                        "example": {
                            "basic": 1200,
                            "premium": 2800,
                            "enterprise": 5500
                        }
                    },
                    "estimated_timeline": {
                        "type": "string",
                        "description": "Estimated project timeline",
                        "example": "3-5 weeks",
                        "maxLength": 100
                    },
                    "tech_stack_ids": {
                        "description": "Technology stack IDs",
                        "example": [
                            "uuid1",
                            "uuid2",
                            "uuid3"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tag_ids": {
                        "description": "Project tag IDs",
                        "example": [
                            "uuid1",
                            "uuid2",
                            "uuid3"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "CreateAdminTestimonialDto": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Testimonial content",
                        "example": "Excellent work on our e-commerce platform!"
                    },
                    "rating": {
                        "type": "number",
                        "description": "Rating (1-5)",
                        "example": 5,
                        "minimum": 1,
                        "maximum": 5
                    },
                    "user_id": {
                        "type": "string",
                        "description": "User ID who provided the testimonial",
                        "example": "550e8400-e29b-41d4-a716-446655440001"
                    },
                    "clientName": {
                        "type": "string",
                        "description": "Client name",
                        "example": "John Doe"
                    },
                    "clientCompany": {
                        "type": "string",
                        "description": "Client company",
                        "example": "Tech Corp"
                    },
                    "clientPosition": {
                        "type": "string",
                        "description": "Client position",
                        "example": "CEO"
                    },
                    "projectRole": {
                        "type": "string",
                        "description": "Project role",
                        "example": "Project Management"
                    },
                    "featured": {
                        "type": "boolean",
                        "description": "Featured testimonial",
                        "example": false
                    }
                },
                "required": [
                    "content",
                    "rating",
                    "user_id"
                ]
            },
            "MediaResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique media identifier",
                        "example": "uuid"
                    },
                    "original_name": {
                        "type": "string",
                        "description": "Original filename",
                        "example": "project-brief.pdf"
                    },
                    "filename": {
                        "type": "string",
                        "description": "Filename (alias for original_name for backward compatibility)",
                        "example": "project-brief.pdf"
                    },
                    "mime_type": {
                        "type": "string",
                        "description": "MIME type",
                        "example": "application/pdf"
                    },
                    "size": {
                        "type": "number",
                        "description": "File size in bytes",
                        "example": 1024000
                    },
                    "storage_key": {
                        "type": "string",
                        "description": "Storage key/path",
                        "example": "uploads/project-brief.pdf"
                    },
                    "storage_provider": {
                        "type": "string",
                        "description": "Storage provider",
                        "example": "s3"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Provider (alias for storage_provider)",
                        "example": "minio"
                    },
                    "url": {
                        "type": "string",
                        "description": "Public URL for accessing the media file",
                        "example": "https://cdn.example.com/uploads/project-brief.pdf"
                    },
                    "path": {
                        "type": "string",
                        "description": "Storage path (alias for storage_key for backward compatibility)",
                        "example": "uploads/project-brief.pdf"
                    },
                    "is_public": {
                        "type": "boolean",
                        "description": "Whether media is publicly accessible",
                        "example": false
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Media visibility level",
                        "enum": [
                            "public",
                            "private",
                            "shared"
                        ],
                        "example": "private"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "User ID who uploaded the media",
                        "example": "uuid"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional media metadata",
                        "example": {}
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    },
                    "user": {
                        "type": "object",
                        "description": "User information"
                    }
                },
                "required": [
                    "id",
                    "original_name",
                    "filename",
                    "mime_type",
                    "size",
                    "storage_provider",
                    "provider",
                    "is_public",
                    "visibility",
                    "user_id",
                    "metadata",
                    "created_at",
                    "updated_at"
                ]
            },
            "UploadMediaDto": {
                "type": "object",
                "properties": {
                    "visibility": {
                        "type": "string",
                        "description": "Media visibility level",
                        "enum": [
                            "public",
                            "private",
                            "shared"
                        ],
                        "example": "private"
                    },
                    "entityType": {
                        "type": "string",
                        "description": "Entity type for path organization",
                        "enum": [
                            "user",
                            "project",
                            "request",
                            "quote",
                            "blog",
                            "messaging",
                            "payment",
                            "system",
                            "temp"
                        ],
                        "example": "user"
                    },
                    "entityId": {
                        "type": "string",
                        "description": "Entity ID (UUID) for the related resource",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "subType": {
                        "type": "string",
                        "description": "Subtype for specific categorization within entity",
                        "enum": [
                            "avatar_original",
                            "avatar_thumbnail",
                            "avatar_optimized",
                            "user_upload",
                            "user_temp",
                            "portfolio_image",
                            "portfolio_video",
                            "portfolio_document",
                            "project_gallery",
                            "project_testimonial",
                            "request_attachment",
                            "request_progress",
                            "quote_attachment",
                            "quote_deliverable",
                            "blog_featured",
                            "blog_content",
                            "blog_thumbnail",
                            "blog_asset",
                            "message_attachment",
                            "message_temp",
                            "payment_receipt",
                            "system_logo",
                            "system_icon",
                            "system_template",
                            "system_backup",
                            "temp_upload",
                            "temp_processing"
                        ],
                        "example": "avatar_original"
                    },
                    "folder": {
                        "type": "string",
                        "description": "Storage folder path (legacy support - will be deprecated)",
                        "example": "uploads/projects",
                        "deprecated": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional metadata",
                        "example": {
                            "description": "Project screenshot",
                            "tags": [
                                "ui",
                                "design"
                            ]
                        }
                    }
                }
            },
            "MediaListResponseDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "List of media files",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pagination": {
                        "type": "object",
                        "description": "Pagination metadata"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Filter metadata"
                    }
                },
                "required": [
                    "data",
                    "pagination",
                    "filters"
                ]
            },
            "UpdateMediaDto": {
                "type": "object",
                "properties": {
                    "original_name": {
                        "type": "string",
                        "description": "Updated original filename",
                        "example": "updated-project-brief.pdf"
                    },
                    "filename": {
                        "type": "string",
                        "description": "Updated filename (alias for original_name for backward compatibility)",
                        "example": "updated-project-brief.pdf"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Updated metadata",
                        "example": {
                            "description": "Updated project screenshot",
                            "tags": [
                                "ui",
                                "design",
                                "updated"
                            ]
                        }
                    }
                }
            },
            "UpdateMediaVisibilityDto": {
                "type": "object",
                "properties": {
                    "visibility": {
                        "type": "string",
                        "description": "New visibility level",
                        "enum": [
                            "public",
                            "private",
                            "shared"
                        ],
                        "example": "public"
                    }
                },
                "required": [
                    "visibility"
                ]
            },
            "CreateMigrationDto": {
                "type": "object",
                "properties": {
                    "target_provider": {
                        "type": "string",
                        "description": "Target storage provider for migration",
                        "example": "minio",
                        "enum": [
                            "minio",
                            "cloudinary",
                            "s3",
                            "gcp",
                            "azure",
                            "backup-storage",
                            "compressed-storage"
                        ]
                    },
                    "reason": {
                        "type": "string",
                        "description": "Reason for migration",
                        "example": "Performance optimization"
                    },
                    "preserve_access": {
                        "type": "boolean",
                        "description": "Whether to preserve access during migration",
                        "example": true
                    },
                    "options": {
                        "type": "object",
                        "description": "Additional migration options",
                        "example": {
                            "compression": true,
                            "encryption": false
                        }
                    }
                },
                "required": [
                    "target_provider",
                    "reason",
                    "preserve_access"
                ]
            },
            "MigrationResponseDto": {
                "type": "object",
                "properties": {
                    "migration_id": {
                        "type": "string",
                        "description": "Migration ID",
                        "example": "mig_123456789"
                    },
                    "status": {
                        "type": "string",
                        "description": "Migration status",
                        "example": "initiated"
                    },
                    "source_provider": {
                        "type": "string",
                        "description": "Source storage provider",
                        "example": "cloudinary"
                    },
                    "target_provider": {
                        "type": "string",
                        "description": "Target storage provider",
                        "example": "minio"
                    },
                    "estimated_completion": {
                        "type": "string",
                        "description": "Estimated completion time",
                        "example": "2024-01-15T10:35:00Z"
                    }
                },
                "required": [
                    "migration_id",
                    "status",
                    "source_provider",
                    "target_provider",
                    "estimated_completion"
                ]
            },
            "StorageProviderStatusDto": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "Storage provider name",
                        "example": "minio"
                    },
                    "status": {
                        "type": "string",
                        "description": "Provider health status",
                        "example": "healthy",
                        "enum": [
                            "healthy",
                            "degraded",
                            "unhealthy",
                            "unknown"
                        ]
                    },
                    "response_time": {
                        "type": "number",
                        "description": "Provider response time in milliseconds",
                        "example": 150
                    },
                    "available_space": {
                        "type": "number",
                        "description": "Available storage space in bytes",
                        "example": 1073741824000
                    },
                    "used_space": {
                        "type": "number",
                        "description": "Used storage space in bytes",
                        "example": 10737418240
                    },
                    "last_check": {
                        "type": "string",
                        "description": "Last health check timestamp",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "config_status": {
                        "type": "object",
                        "description": "Provider-specific configuration status",
                        "example": {
                            "bucket_exists": true,
                            "credentials_valid": true
                        }
                    },
                    "error_message": {
                        "type": "string",
                        "description": "Error message if provider is unhealthy",
                        "example": null
                    }
                },
                "required": [
                    "provider",
                    "status",
                    "response_time",
                    "available_space",
                    "used_space",
                    "last_check",
                    "config_status"
                ]
            },
            "StorageProvidersStatusResponseDto": {
                "type": "object",
                "properties": {
                    "providers": {
                        "description": "List of storage provider statuses",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StorageProviderStatusDto"
                        }
                    },
                    "overall_status": {
                        "type": "string",
                        "description": "Overall storage system health",
                        "example": "healthy",
                        "enum": [
                            "healthy",
                            "degraded",
                            "unhealthy"
                        ]
                    },
                    "total_available_space": {
                        "type": "number",
                        "description": "Total available storage across all providers",
                        "example": 1073741824000
                    },
                    "total_used_space": {
                        "type": "number",
                        "description": "Total used storage across all providers",
                        "example": 10737418240
                    },
                    "primary_provider": {
                        "type": "string",
                        "description": "Primary storage provider",
                        "example": "minio"
                    },
                    "backup_providers": {
                        "description": "Backup storage providers",
                        "example": [
                            "cloudinary",
                            "s3"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "providers",
                    "overall_status",
                    "total_available_space",
                    "total_used_space",
                    "primary_provider",
                    "backup_providers"
                ]
            },
            "MigrationStatusDto": {
                "type": "object",
                "properties": {
                    "migration_id": {
                        "type": "string",
                        "description": "Migration ID",
                        "example": "mig_123456789"
                    },
                    "status": {
                        "type": "string",
                        "description": "Migration status",
                        "example": "completed",
                        "enum": [
                            "initiated",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                        ]
                    },
                    "source_provider": {
                        "type": "string",
                        "description": "Source storage provider",
                        "example": "cloudinary"
                    },
                    "target_provider": {
                        "type": "string",
                        "description": "Target storage provider",
                        "example": "minio"
                    },
                    "file_id": {
                        "type": "string",
                        "description": "File ID being migrated",
                        "example": "file_123456789"
                    },
                    "progress": {
                        "type": "number",
                        "description": "Migration progress percentage",
                        "example": 75
                    },
                    "started_at": {
                        "type": "string",
                        "description": "Migration start time",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "completed_at": {
                        "type": "object",
                        "description": "Migration completion time",
                        "example": "2024-01-15T10:35:00Z",
                        "nullable": true
                    },
                    "error_message": {
                        "type": "string",
                        "description": "Error message if migration failed",
                        "example": null
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Migration metadata",
                        "example": {
                            "file_size": 1024000,
                            "compression_ratio": 0.8
                        }
                    },
                    "bytes_transferred": {
                        "type": "number",
                        "description": "Data transferred in bytes",
                        "example": 1024000
                    },
                    "transfer_rate": {
                        "type": "number",
                        "description": "Transfer rate in bytes per second",
                        "example": 512000
                    },
                    "file_size": {
                        "type": "number",
                        "description": "File size in bytes",
                        "example": 1024000
                    },
                    "options": {
                        "type": "object",
                        "description": "Migration options",
                        "example": {
                            "compression": true,
                            "encryption": false
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Migration creation time",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "description": "Migration update time",
                        "example": "2024-01-15T10:35:00Z"
                    }
                },
                "required": [
                    "migration_id",
                    "status",
                    "source_provider",
                    "target_provider",
                    "file_id",
                    "progress",
                    "started_at",
                    "metadata",
                    "file_size",
                    "options",
                    "created_at",
                    "updated_at"
                ]
            },
            "CreateFailoverDto": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "Primary storage provider experiencing issues",
                        "example": "cloudinary",
                        "enum": [
                            "minio",
                            "cloudinary",
                            "s3",
                            "gcp",
                            "azure",
                            "primary-storage"
                        ]
                    },
                    "reason": {
                        "type": "string",
                        "description": "Reason for failover",
                        "example": "Provider temporarily unavailable"
                    },
                    "backup_provider": {
                        "type": "string",
                        "description": "Backup storage provider to use",
                        "example": "minio",
                        "enum": [
                            "minio",
                            "cloudinary",
                            "s3",
                            "gcp",
                            "azure",
                            "backup-storage"
                        ]
                    },
                    "options": {
                        "type": "object",
                        "description": "Additional failover options",
                        "example": {
                            "auto_recovery": true,
                            "notification_enabled": true
                        }
                    }
                },
                "required": [
                    "provider",
                    "reason",
                    "backup_provider"
                ]
            },
            "FailoverResponseDto": {
                "type": "object",
                "properties": {
                    "failover_id": {
                        "type": "string",
                        "description": "Failover ID",
                        "example": "failover_123456789"
                    },
                    "status": {
                        "type": "string",
                        "description": "Failover status",
                        "example": "initiated"
                    },
                    "estimated_recovery": {
                        "type": "string",
                        "description": "Estimated recovery time",
                        "example": "2024-01-15T11:30:00Z"
                    }
                },
                "required": [
                    "failover_id",
                    "status",
                    "estimated_recovery"
                ]
            },
            "ProviderUsageDto": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "Storage provider name",
                        "example": "minio"
                    },
                    "total_storage": {
                        "type": "number",
                        "description": "Total storage used in bytes",
                        "example": 10737418240
                    },
                    "file_count": {
                        "type": "number",
                        "description": "Number of files stored",
                        "example": 1250
                    },
                    "average_file_size": {
                        "type": "number",
                        "description": "Average file size in bytes",
                        "example": 8589934
                    },
                    "utilization_percentage": {
                        "type": "number",
                        "description": "Storage utilization percentage",
                        "example": 65.5
                    },
                    "upload_count": {
                        "type": "number",
                        "description": "Upload operations count",
                        "example": 500
                    },
                    "download_count": {
                        "type": "number",
                        "description": "Download operations count",
                        "example": 2500
                    },
                    "delete_count": {
                        "type": "number",
                        "description": "Delete operations count",
                        "example": 50
                    }
                },
                "required": [
                    "provider",
                    "total_storage",
                    "file_count",
                    "average_file_size",
                    "utilization_percentage",
                    "upload_count",
                    "download_count",
                    "delete_count"
                ]
            },
            "CostAnalysisDto": {
                "type": "object",
                "properties": {
                    "total_cost": {
                        "type": "number",
                        "description": "Total storage cost",
                        "example": 125.5
                    },
                    "cost_per_gb": {
                        "type": "number",
                        "description": "Cost per GB",
                        "example": 0.023
                    },
                    "cost_by_provider": {
                        "type": "object",
                        "description": "Cost breakdown by provider",
                        "example": {
                            "minio": 25,
                            "cloudinary": 100.5
                        }
                    },
                    "projected_monthly_cost": {
                        "type": "number",
                        "description": "Projected monthly cost",
                        "example": 150.75
                    },
                    "optimization_suggestions": {
                        "description": "Cost optimization suggestions",
                        "example": [
                            "Consider migrating large files to cheaper storage",
                            "Enable compression for images"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "total_cost",
                    "cost_per_gb",
                    "cost_by_provider",
                    "projected_monthly_cost",
                    "optimization_suggestions"
                ]
            },
            "StorageAnalyticsResponseDto": {
                "type": "object",
                "properties": {
                    "usage_by_provider": {
                        "description": "Usage statistics by provider",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProviderUsageDto"
                        }
                    },
                    "cost_analysis": {
                        "description": "Cost analysis data",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/CostAnalysisDto"
                            }
                        ]
                    },
                    "total_storage": {
                        "type": "number",
                        "description": "Total storage across all providers",
                        "example": 107374182400
                    },
                    "total_files": {
                        "type": "number",
                        "description": "Total files across all providers",
                        "example": 5000
                    },
                    "growth_trends": {
                        "type": "object",
                        "description": "Storage growth trend",
                        "example": {
                            "daily_growth": 1024000,
                            "weekly_growth": 7168000
                        }
                    },
                    "performance_metrics": {
                        "type": "object",
                        "description": "Performance metrics",
                        "example": {
                            "average_upload_time": 2.5,
                            "average_download_time": 1.2
                        }
                    },
                    "period": {
                        "type": "string",
                        "description": "Analytics period",
                        "example": "7_days"
                    },
                    "generated_at": {
                        "type": "string",
                        "description": "Generated at timestamp",
                        "example": "2024-01-15T10:30:00Z"
                    }
                },
                "required": [
                    "usage_by_provider",
                    "cost_analysis",
                    "total_storage",
                    "total_files",
                    "growth_trends",
                    "performance_metrics",
                    "period",
                    "generated_at"
                ]
            },
            "BenchmarkTestFileDto": {
                "type": "object",
                "properties": {
                    "size": {
                        "type": "string",
                        "description": "Test file size",
                        "example": "100kb",
                        "enum": [
                            "100kb",
                            "1mb",
                            "10mb",
                            "100mb"
                        ]
                    },
                    "file_type": {
                        "type": "string",
                        "description": "File type for testing",
                        "example": "image",
                        "enum": [
                            "image",
                            "document",
                            "video",
                            "audio"
                        ]
                    }
                },
                "required": [
                    "size",
                    "file_type"
                ]
            },
            "CreateBenchmarkDto": {
                "type": "object",
                "properties": {
                    "providers": {
                        "type": "string",
                        "description": "Storage providers to benchmark",
                        "example": [
                            "minio",
                            "cloudinary"
                        ],
                        "enum": [
                            "minio",
                            "cloudinary",
                            "s3",
                            "gcp",
                            "azure",
                            "primary-storage",
                            "backup-storage"
                        ]
                    },
                    "test_files": {
                        "description": "Test files to use for benchmarking",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BenchmarkTestFileDto"
                        }
                    },
                    "metrics": {
                        "description": "Metrics to measure",
                        "example": [
                            "upload_speed",
                            "download_speed",
                            "latency"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "options": {
                        "type": "object",
                        "description": "Additional benchmark options",
                        "example": {
                            "iterations": 5,
                            "timeout": 30000
                        }
                    }
                },
                "required": [
                    "providers",
                    "test_files",
                    "metrics"
                ]
            },
            "BenchmarkResponseDto": {
                "type": "object",
                "properties": {
                    "benchmark_id": {
                        "type": "string",
                        "description": "Benchmark ID",
                        "example": "benchmark_123456789"
                    },
                    "status": {
                        "type": "string",
                        "description": "Benchmark status",
                        "example": "initiated",
                        "enum": [
                            "initiated",
                            "running",
                            "completed",
                            "failed"
                        ]
                    },
                    "estimated_completion": {
                        "type": "string",
                        "description": "Estimated completion time",
                        "example": "2024-01-15T10:35:00Z"
                    }
                },
                "required": [
                    "benchmark_id",
                    "status",
                    "estimated_completion"
                ]
            },
            "BenchmarkResultDto": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "Storage provider name",
                        "example": "minio"
                    },
                    "test_file": {
                        "description": "Test file configuration",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BenchmarkTestFileDto"
                            }
                        ]
                    },
                    "test": {
                        "type": "string",
                        "description": "Test type or name",
                        "example": "upload_speed"
                    },
                    "file_size": {
                        "type": "number",
                        "description": "Test file size in bytes",
                        "example": 102400
                    },
                    "iterations": {
                        "type": "number",
                        "description": "Number of iterations performed",
                        "example": 5
                    },
                    "average_time": {
                        "type": "number",
                        "description": "Average test time in milliseconds",
                        "example": 150
                    },
                    "min_time": {
                        "type": "number",
                        "description": "Minimum test time in milliseconds",
                        "example": 120
                    },
                    "max_time": {
                        "type": "number",
                        "description": "Maximum test time in milliseconds",
                        "example": 180
                    },
                    "throughput": {
                        "type": "number",
                        "description": "Throughput in operations per second",
                        "example": 10.5
                    },
                    "upload_speed": {
                        "type": "number",
                        "description": "Upload speed in MB/s",
                        "example": 15.5
                    },
                    "download_speed": {
                        "type": "number",
                        "description": "Download speed in MB/s",
                        "example": 25.3
                    },
                    "latency": {
                        "type": "number",
                        "description": "Average latency in milliseconds",
                        "example": 150
                    },
                    "success_rate": {
                        "type": "number",
                        "description": "Success rate percentage",
                        "example": 98.5
                    },
                    "error_count": {
                        "type": "number",
                        "description": "Error count",
                        "example": 1
                    },
                    "duration": {
                        "type": "number",
                        "description": "Total test duration in seconds",
                        "example": 45.2
                    },
                    "additional_metrics": {
                        "type": "object",
                        "description": "Additional metrics",
                        "example": {
                            "cpu_usage": 25.5,
                            "memory_usage": 512
                        }
                    }
                },
                "required": [
                    "provider",
                    "test_file",
                    "test",
                    "file_size",
                    "iterations",
                    "average_time",
                    "min_time",
                    "max_time",
                    "throughput",
                    "upload_speed",
                    "download_speed",
                    "latency",
                    "success_rate",
                    "error_count",
                    "duration",
                    "additional_metrics"
                ]
            },
            "PerformanceScoreDto": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "Storage provider name",
                        "example": "minio"
                    },
                    "overall_score": {
                        "type": "number",
                        "description": "Overall performance score (0-100)",
                        "example": 85.5
                    },
                    "upload_score": {
                        "type": "number",
                        "description": "Upload performance score",
                        "example": 80
                    },
                    "download_score": {
                        "type": "number",
                        "description": "Download performance score",
                        "example": 90
                    },
                    "latency_score": {
                        "type": "number",
                        "description": "Latency performance score",
                        "example": 85
                    },
                    "reliability_score": {
                        "type": "number",
                        "description": "Reliability score",
                        "example": 95
                    },
                    "cost_efficiency_score": {
                        "type": "number",
                        "description": "Cost efficiency score",
                        "example": 75
                    }
                },
                "required": [
                    "provider",
                    "overall_score",
                    "upload_score",
                    "download_score",
                    "latency_score",
                    "reliability_score",
                    "cost_efficiency_score"
                ]
            },
            "BenchmarkResultsResponseDto": {
                "type": "object",
                "properties": {
                    "benchmark_id": {
                        "type": "string",
                        "description": "Benchmark ID",
                        "example": "benchmark_123456789"
                    },
                    "status": {
                        "type": "string",
                        "description": "Benchmark status",
                        "example": "completed"
                    },
                    "results": {
                        "description": "Detailed benchmark results",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BenchmarkResultDto"
                        }
                    },
                    "performance_scores": {
                        "description": "Performance scores by provider",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PerformanceScoreDto"
                        }
                    },
                    "summary": {
                        "type": "object",
                        "description": "Benchmark summary",
                        "example": {
                            "total_tests": 20,
                            "successful_tests": 19,
                            "failed_tests": 1
                        }
                    },
                    "started_at": {
                        "type": "string",
                        "description": "Benchmark start time",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "completed_at": {
                        "type": "string",
                        "description": "Benchmark completion time",
                        "example": "2024-01-15T10:35:00Z"
                    },
                    "recommendations": {
                        "description": "Recommendations based on results",
                        "example": [
                            "Use MinIO for large files",
                            "Use Cloudinary for images"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "benchmark_id",
                    "status",
                    "results",
                    "performance_scores",
                    "summary",
                    "started_at",
                    "recommendations"
                ]
            },
            "CreateErrorSimulationDto": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "Storage provider to simulate error for",
                        "example": "minio",
                        "enum": [
                            "minio",
                            "cloudinary",
                            "s3",
                            "gcp",
                            "azure",
                            "primary-storage"
                        ]
                    },
                    "error_type": {
                        "type": "string",
                        "description": "Type of error to simulate",
                        "example": "connection_timeout",
                        "enum": [
                            "connection_timeout",
                            "access_denied",
                            "quota_exceeded",
                            "service_unavailable",
                            "network_error",
                            "authentication_failed"
                        ]
                    },
                    "duration": {
                        "type": "number",
                        "description": "Duration of error simulation in seconds",
                        "example": 30
                    },
                    "error_rate": {
                        "type": "number",
                        "description": "Error rate percentage (optional, defaults to 0.1)",
                        "example": 0.5
                    },
                    "options": {
                        "type": "object",
                        "description": "Error simulation options",
                        "example": {
                            "failure_rate": 0.5,
                            "retry_attempts": 3
                        }
                    }
                },
                "required": [
                    "provider",
                    "error_type",
                    "duration"
                ]
            },
            "ErrorSimulationResponseDto": {
                "type": "object",
                "properties": {
                    "simulation_id": {
                        "type": "string",
                        "description": "Error simulation ID",
                        "example": "error_sim_123456789"
                    },
                    "status": {
                        "type": "string",
                        "description": "Simulation status",
                        "example": "active"
                    },
                    "ends_at": {
                        "type": "string",
                        "description": "Simulation end time",
                        "example": "2024-01-15T11:00:00Z"
                    }
                },
                "required": [
                    "simulation_id",
                    "status",
                    "ends_at"
                ]
            },
            "UserResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique user identifier",
                        "example": "uuid"
                    },
                    "email": {
                        "type": "string",
                        "description": "User email address",
                        "example": "user@example.com"
                    },
                    "first_name": {
                        "type": "string",
                        "description": "User first name",
                        "example": "John",
                        "nullable": true
                    },
                    "last_name": {
                        "type": "string",
                        "description": "User last name",
                        "example": "Doe",
                        "nullable": true
                    },
                    "role": {
                        "type": "string",
                        "description": "User role",
                        "enum": [
                            "admin",
                            "user"
                        ],
                        "example": "user"
                    },
                    "email_verified": {
                        "type": "boolean",
                        "description": "Email verification status",
                        "example": true
                    },
                    "avatar_media_id": {
                        "type": "string",
                        "description": "Avatar media ID",
                        "example": "uuid",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "description": "User status",
                        "enum": [
                            "active",
                            "suspended",
                            "deleted"
                        ],
                        "example": "active"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional user metadata",
                        "example": {}
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Account creation timestamp",
                        "example": "2024-01-01T00:00:00Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp",
                        "example": "2024-01-01T00:00:00Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Soft delete timestamp",
                        "example": "2024-01-01T00:00:00Z",
                        "nullable": true
                    },
                    "full_name": {
                        "type": "string",
                        "description": "User full name",
                        "example": "John Doe"
                    },
                    "display_name": {
                        "type": "string",
                        "description": "User display name",
                        "example": "John Doe"
                    },
                    "initials": {
                        "type": "string",
                        "description": "User initials",
                        "example": "JD"
                    },
                    "is_active": {
                        "type": "boolean",
                        "description": "Whether user is active",
                        "example": true
                    },
                    "is_admin": {
                        "type": "boolean",
                        "description": "Whether user is admin",
                        "example": false
                    },
                    "is_verified": {
                        "type": "boolean",
                        "description": "Whether user email is verified",
                        "example": true
                    }
                },
                "required": [
                    "id",
                    "email",
                    "first_name",
                    "last_name",
                    "role",
                    "email_verified",
                    "avatar_media_id",
                    "status",
                    "metadata",
                    "created_at",
                    "updated_at",
                    "deleted_at",
                    "full_name",
                    "display_name",
                    "initials",
                    "is_active",
                    "is_admin",
                    "is_verified"
                ]
            },
            "UserProfileResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique user identifier",
                        "example": "uuid"
                    },
                    "email": {
                        "type": "string",
                        "description": "User email address",
                        "example": "user@example.com"
                    },
                    "first_name": {
                        "type": "string",
                        "description": "User first name",
                        "example": "John",
                        "nullable": true
                    },
                    "last_name": {
                        "type": "string",
                        "description": "User last name",
                        "example": "Doe",
                        "nullable": true
                    },
                    "role": {
                        "type": "string",
                        "description": "User role",
                        "enum": [
                            "admin",
                            "user"
                        ],
                        "example": "user"
                    },
                    "email_verified": {
                        "type": "boolean",
                        "description": "Email verification status",
                        "example": true
                    },
                    "avatar_media_id": {
                        "type": "string",
                        "description": "Avatar media ID",
                        "example": "uuid",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "description": "User status",
                        "enum": [
                            "active",
                            "suspended",
                            "deleted"
                        ],
                        "example": "active"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional user metadata",
                        "example": {}
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Account creation timestamp",
                        "example": "2024-01-01T00:00:00Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp",
                        "example": "2024-01-01T00:00:00Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Soft delete timestamp",
                        "example": "2024-01-01T00:00:00Z",
                        "nullable": true
                    },
                    "full_name": {
                        "type": "string",
                        "description": "User full name",
                        "example": "John Doe"
                    },
                    "display_name": {
                        "type": "string",
                        "description": "User display name",
                        "example": "John Doe"
                    },
                    "initials": {
                        "type": "string",
                        "description": "User initials",
                        "example": "JD"
                    },
                    "is_active": {
                        "type": "boolean",
                        "description": "Whether user is active",
                        "example": true
                    },
                    "is_admin": {
                        "type": "boolean",
                        "description": "Whether user is admin",
                        "example": false
                    },
                    "is_verified": {
                        "type": "boolean",
                        "description": "Whether user email is verified",
                        "example": true
                    },
                    "avatar_url": {
                        "type": "object",
                        "description": "User avatar URL",
                        "example": "https://example.com/avatars/uuid.jpg",
                        "nullable": true
                    },
                    "requests_count": {
                        "type": "number",
                        "description": "Number of user requests",
                        "example": 5
                    },
                    "quotes_count": {
                        "type": "number",
                        "description": "Number of user quotes",
                        "example": 3
                    },
                    "media_count": {
                        "type": "number",
                        "description": "Number of user media files",
                        "example": 10
                    },
                    "preferences": {
                        "type": "object",
                        "description": "User preferences including theme and notifications",
                        "example": {
                            "theme": "light",
                            "notifications": {
                                "email": true,
                                "push": false
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "email",
                    "first_name",
                    "last_name",
                    "role",
                    "email_verified",
                    "avatar_media_id",
                    "status",
                    "metadata",
                    "created_at",
                    "updated_at",
                    "deleted_at",
                    "full_name",
                    "display_name",
                    "initials",
                    "is_active",
                    "is_admin",
                    "is_verified",
                    "avatar_url",
                    "requests_count",
                    "quotes_count",
                    "media_count",
                    "preferences"
                ]
            },
            "UpdateUserDto": {
                "type": "object",
                "properties": {
                    "first_name": {
                        "type": "string",
                        "description": "User first name",
                        "example": "John"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "User last name",
                        "example": "Doe"
                    },
                    "bio": {
                        "type": "string",
                        "description": "User bio",
                        "example": "Full-stack developer with a focus on TypeScript and Node.js"
                    },
                    "skills": {
                        "description": "User skills",
                        "example": [
                            "JavaScript",
                            "TypeScript",
                            "Node.js"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "location": {
                        "type": "string",
                        "description": "User location",
                        "example": "New York, USA"
                    },
                    "website": {
                        "type": "string",
                        "description": "User website",
                        "example": "https://johndoe.dev"
                    },
                    "status": {
                        "type": "string",
                        "description": "User status (admin only)",
                        "enum": [
                            "active",
                            "suspended",
                            "deleted"
                        ],
                        "example": "active"
                    },
                    "email_verified": {
                        "type": "boolean",
                        "description": "Email verification status (admin only)",
                        "example": true
                    }
                }
            },
            "ChangePasswordDto": {
                "type": "object",
                "properties": {
                    "current_password": {
                        "type": "string",
                        "description": "Current password",
                        "example": "CurrentPassword123!"
                    },
                    "new_password": {
                        "type": "string",
                        "description": "New password",
                        "example": "NewSecurePassword123!",
                        "minLength": 8
                    }
                },
                "required": [
                    "current_password",
                    "new_password"
                ]
            },
            "NotificationPreferencesDto": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "boolean",
                        "description": "Email notifications enabled",
                        "example": true
                    },
                    "push": {
                        "type": "boolean",
                        "description": "Push notifications enabled",
                        "example": false
                    },
                    "sms": {
                        "type": "boolean",
                        "description": "SMS notifications enabled",
                        "example": false
                    }
                }
            },
            "UpdateUserPreferencesDto": {
                "type": "object",
                "properties": {
                    "theme": {
                        "type": "string",
                        "description": "User theme preference",
                        "example": "dark",
                        "enum": [
                            "light",
                            "dark",
                            "auto"
                        ]
                    },
                    "notifications": {
                        "description": "User notification preferences",
                        "example": {
                            "email": true,
                            "push": false
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NotificationPreferencesDto"
                            }
                        ]
                    }
                }
            },
            "CommentListResponseDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "List of comments",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pagination": {
                        "type": "object",
                        "description": "Pagination metadata"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Filter metadata"
                    }
                },
                "required": [
                    "data",
                    "pagination",
                    "filters"
                ]
            },
            "CreateUserDto": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User email address",
                        "example": "user@example.com",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "description": "User password",
                        "example": "SecurePassword123!",
                        "minLength": 8
                    },
                    "first_name": {
                        "type": "string",
                        "description": "User first name",
                        "example": "John"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "User last name",
                        "example": "Doe"
                    },
                    "role": {
                        "type": "string",
                        "description": "User role",
                        "enum": [
                            "admin",
                            "user"
                        ],
                        "example": "user"
                    },
                    "status": {
                        "type": "string",
                        "description": "User status",
                        "enum": [
                            "active",
                            "suspended",
                            "deleted"
                        ],
                        "example": "active"
                    },
                    "email_verified": {
                        "type": "boolean",
                        "description": "Email verification status",
                        "example": false
                    }
                },
                "required": [
                    "email",
                    "password"
                ]
            },
            "BulkUpdateUserStatusDto": {
                "type": "object",
                "properties": {
                    "user_ids": {
                        "description": "Array of user IDs to update",
                        "example": [
                            "uuid1",
                            "uuid2",
                            "uuid3"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "New status for all users",
                        "enum": [
                            "active",
                            "suspended",
                            "deleted"
                        ],
                        "example": "active"
                    }
                },
                "required": [
                    "user_ids",
                    "status"
                ]
            },
            "BulkCreateUserDto": {
                "type": "object",
                "properties": {
                    "users": {
                        "description": "Array of users to create",
                        "example": [
                            {
                                "email": "user1@example.com",
                                "password": "********",
                                "first_name": "John",
                                "last_name": "Doe",
                                "role": "user"
                            },
                            {
                                "email": "user2@example.com",
                                "password": "********",
                                "first_name": "Jane",
                                "last_name": "Smith",
                                "role": "user"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreateUserDto"
                        }
                    }
                },
                "required": [
                    "users"
                ]
            },
            "BulkDeleteUserDto": {
                "type": "object",
                "properties": {
                    "user_ids": {
                        "description": "Array of user IDs to delete",
                        "example": [
                            "uuid1",
                            "uuid2",
                            "uuid3"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "user_ids"
                ]
            },
            "BlogPostListResponseDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "List of blog posts",
                        "example": [
                            {
                                "id": "uuid-blog-post-1",
                                "title": "Building Scalable APIs with NestJS",
                                "slug": "building-scalable-apis-nestjs",
                                "excerpt": "Learn how to build scalable APIs...",
                                "content": "<p>Full blog post content...</p>",
                                "featured_image_id": "uuid-image-1",
                                "status": "published",
                                "author_id": "uuid-author-1",
                                "published_at": "2024-01-15T10:00:00Z",
                                "seo_title": "Custom SEO Title",
                                "seo_description": "Custom SEO description",
                                "metadata": {},
                                "created_at": "2024-01-15T09:00:00Z",
                                "updated_at": "2024-01-15T10:00:00Z",
                                "author": {
                                    "id": "uuid-author-1",
                                    "first_name": "John",
                                    "last_name": "Doe",
                                    "email": "john@example.com"
                                },
                                "tags": [
                                    {
                                        "id": "uuid-tag-1",
                                        "name": "NestJS",
                                        "slug": "nestjs"
                                    },
                                    {
                                        "id": "uuid-tag-2",
                                        "name": "API",
                                        "slug": "api"
                                    }
                                ],
                                "comments_count": 5,
                                "reading_time_minutes": 8
                            }
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pagination": {
                        "type": "object",
                        "description": "Pagination metadata",
                        "example": {
                            "page": 1,
                            "limit": 10,
                            "total": 25,
                            "total_pages": 3,
                            "has_next": true,
                            "has_prev": false
                        }
                    },
                    "filters": {
                        "type": "object",
                        "description": "Filter metadata",
                        "example": {
                            "status": "published",
                            "search": "nestjs",
                            "tags": [
                                "uuid-tag-1"
                            ],
                            "author_id": "uuid-author-1"
                        }
                    }
                },
                "required": [
                    "data",
                    "pagination",
                    "filters"
                ]
            },
            "BlogPostResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique blog post identifier",
                        "example": "uuid"
                    },
                    "title": {
                        "type": "string",
                        "description": "Blog post title",
                        "example": "Building Scalable APIs with NestJS"
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL slug",
                        "example": "building-scalable-apis-nestjs"
                    },
                    "excerpt": {
                        "type": "string",
                        "description": "Post excerpt/summary",
                        "example": "Learn how to build scalable APIs..."
                    },
                    "content": {
                        "type": "string",
                        "description": "Post content",
                        "example": "<p>Full blog post content...</p>"
                    },
                    "featured_image_id": {
                        "type": "string",
                        "description": "Featured image media ID",
                        "example": "uuid"
                    },
                    "status": {
                        "type": "string",
                        "description": "Post status",
                        "enum": [
                            "draft",
                            "published",
                            "archived"
                        ],
                        "example": "published"
                    },
                    "author_id": {
                        "type": "string",
                        "description": "Author ID",
                        "example": "uuid"
                    },
                    "published_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Publication timestamp"
                    },
                    "seo_title": {
                        "type": "string",
                        "description": "SEO title override",
                        "example": "Custom SEO Title for Search Engines"
                    },
                    "seo_description": {
                        "type": "string",
                        "description": "SEO description override",
                        "example": "Custom SEO description for search engine results"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional post metadata",
                        "example": {}
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    },
                    "author": {
                        "type": "object",
                        "description": "Author information"
                    },
                    "featured_image": {
                        "type": "object",
                        "description": "Featured image information"
                    },
                    "tags": {
                        "description": "Blog post tags",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "comments_count": {
                        "type": "number",
                        "description": "Blog post comments count"
                    },
                    "reading_time_minutes": {
                        "type": "number",
                        "description": "Estimated reading time in minutes"
                    }
                },
                "required": [
                    "id",
                    "title",
                    "slug",
                    "excerpt",
                    "content",
                    "featured_image_id",
                    "status",
                    "author_id",
                    "published_at",
                    "metadata",
                    "created_at",
                    "updated_at"
                ]
            },
            "CreateCommentDto": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Comment content",
                        "example": "Great article! Very helpful insights.",
                        "minLength": 1,
                        "maxLength": 2000
                    },
                    "parent_comment_id": {
                        "type": "string",
                        "description": "Parent comment ID (for replies)",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "author_name": {
                        "type": "string",
                        "description": "Author name (required for anonymous comments)",
                        "example": "John Doe",
                        "maxLength": 255
                    },
                    "author_email": {
                        "type": "string",
                        "description": "Author email (required for anonymous comments)",
                        "example": "john@example.com",
                        "maxLength": 255
                    }
                },
                "required": [
                    "content"
                ]
            },
            "CommentResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique comment identifier",
                        "example": "uuid"
                    },
                    "post_id": {
                        "type": "string",
                        "description": "Blog post ID this comment belongs to",
                        "example": "uuid"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "User ID who made the comment (nullable for anonymous)",
                        "example": "uuid"
                    },
                    "author_name": {
                        "type": "string",
                        "description": "Comment author name (for anonymous comments)",
                        "example": "John Doe"
                    },
                    "author_email": {
                        "type": "string",
                        "description": "Comment author email (for anonymous comments)",
                        "example": "john@example.com"
                    },
                    "content": {
                        "type": "string",
                        "description": "Comment content",
                        "example": "Great article! Very helpful."
                    },
                    "status": {
                        "type": "string",
                        "description": "Comment status",
                        "enum": [
                            "pending",
                            "approved",
                            "rejected",
                            "spam"
                        ],
                        "example": "approved"
                    },
                    "parent_comment_id": {
                        "type": "string",
                        "description": "Parent comment ID (for nested comments)",
                        "example": "uuid"
                    },
                    "depth": {
                        "type": "number",
                        "description": "Comment depth level",
                        "example": 1
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    },
                    "user": {
                        "type": "object",
                        "description": "User information (for authenticated comments)"
                    },
                    "replies": {
                        "description": "Nested replies",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "id",
                    "post_id",
                    "user_id",
                    "author_name",
                    "author_email",
                    "content",
                    "status",
                    "parent_comment_id",
                    "created_at",
                    "updated_at"
                ]
            },
            "UpdateCommentContentDto": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Updated comment content",
                        "example": "This comment has been updated by admin",
                        "minLength": 1,
                        "maxLength": 2000
                    }
                },
                "required": [
                    "content"
                ]
            },
            "BlogPostStatus": {
                "type": "string",
                "enum": [
                    "draft",
                    "published",
                    "archived"
                ],
                "description": "Post status"
            },
            "CreateBlogPostDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Blog post title",
                        "example": "Building Scalable APIs with NestJS",
                        "minLength": 3,
                        "maxLength": 255
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL slug (auto-generated if not provided)",
                        "example": "building-scalable-apis-nestjs",
                        "maxLength": 255,
                        "pattern": "^[a-z0-9-]+$"
                    },
                    "excerpt": {
                        "type": "string",
                        "description": "Post excerpt/summary",
                        "example": "Learn how to build scalable APIs with NestJS framework...",
                        "maxLength": 500
                    },
                    "content": {
                        "type": "string",
                        "description": "Post content (HTML/Markdown)",
                        "example": "<p>Full blog post content...</p>"
                    },
                    "featured_image_id": {
                        "type": "string",
                        "description": "Featured image media ID",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "status": {
                        "description": "Post status",
                        "example": "draft",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BlogPostStatus"
                            }
                        ]
                    },
                    "published_at": {
                        "type": "string",
                        "description": "Publication timestamp (ISO 8601 format)",
                        "example": "2024-01-15T10:00:00Z"
                    },
                    "tag_ids": {
                        "description": "Blog post tag IDs (array of UUIDs)",
                        "example": [
                            "123e4567-e89b-12d3-a456-426614174000",
                            "987fcdeb-51a2-43d1-b456-426614174000"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "seo_title": {
                        "type": "string",
                        "description": "SEO title override (for search engines)",
                        "example": "Custom SEO Title for Search Engines",
                        "maxLength": 60
                    },
                    "seo_description": {
                        "type": "string",
                        "description": "SEO description override (for search engines)",
                        "example": "Custom SEO description for search engine results",
                        "maxLength": 160
                    },
                    "related_project_id": {
                        "type": "string",
                        "description": "Related project ID (optional)",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional post metadata (JSON object)",
                        "example": {
                            "canonical_url": "https://example.com/blog/custom-url",
                            "noindex": false,
                            "nofollow": false,
                            "reading_time": 8,
                            "word_count": 1200,
                            "related_project_id": "123e4567-e89b-12d3-a456-426614174000"
                        }
                    }
                },
                "required": [
                    "title",
                    "content"
                ]
            },
            "UpdateBlogPostDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Blog post title",
                        "example": "Building Scalable APIs with NestJS v2",
                        "minLength": 3,
                        "maxLength": 255
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL slug (must be unique)",
                        "example": "building-scalable-apis-nestjs-v2",
                        "maxLength": 255,
                        "pattern": "^[a-z0-9-]+$"
                    },
                    "excerpt": {
                        "type": "string",
                        "description": "Post excerpt/summary",
                        "example": "Updated guide on building scalable APIs with NestJS framework...",
                        "maxLength": 500
                    },
                    "content": {
                        "type": "string",
                        "description": "Post content (HTML/Markdown)",
                        "example": "<p>Updated blog post content with new insights...</p>"
                    },
                    "featured_image_id": {
                        "type": "string",
                        "description": "Featured image media ID",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "status": {
                        "description": "Post status",
                        "example": "published",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BlogPostStatus"
                            }
                        ]
                    },
                    "published_at": {
                        "type": "string",
                        "description": "Publication timestamp (ISO 8601 format)",
                        "example": "2024-01-15T10:00:00Z"
                    },
                    "tag_ids": {
                        "description": "Blog post tag IDs (array of UUIDs)",
                        "example": [
                            "123e4567-e89b-12d3-a456-426614174000",
                            "987fcdeb-51a2-43d1-b456-426614174000"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "seo_title": {
                        "type": "string",
                        "description": "SEO title override (for search engines)",
                        "example": "Updated SEO Title for Search Engines",
                        "maxLength": 60
                    },
                    "seo_description": {
                        "type": "string",
                        "description": "SEO description override (for search engines)",
                        "example": "Updated SEO description for search engine results",
                        "maxLength": 160
                    },
                    "related_project_id": {
                        "type": "string",
                        "description": "Related project ID (optional)",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional post metadata (JSON object)",
                        "example": {
                            "canonical_url": "https://example.com/blog/updated-url",
                            "noindex": false,
                            "nofollow": false,
                            "reading_time": 8,
                            "word_count": 1200,
                            "related_project_id": "123e4567-e89b-12d3-a456-426614174000"
                        }
                    }
                }
            },
            "BulkUpdateCommentStatusDto": {
                "type": "object",
                "properties": {
                    "commentIds": {
                        "description": "Array of comment IDs to update",
                        "example": [
                            "uuid1",
                            "uuid2",
                            "uuid3"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "New status for all comments",
                        "enum": [
                            "pending",
                            "approved",
                            "rejected",
                            "spam"
                        ],
                        "example": "approved"
                    }
                },
                "required": [
                    "commentIds",
                    "status"
                ]
            },
            "BlogCommentStatus": {
                "type": "string",
                "enum": [
                    "pending",
                    "approved",
                    "rejected",
                    "spam"
                ],
                "description": "Comment status"
            },
            "UpdateCommentStatusDto": {
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Comment status",
                        "example": "approved",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BlogCommentStatus"
                            }
                        ]
                    }
                },
                "required": [
                    "status"
                ]
            },
            "BulkUpdateBlogPostStatusDto": {
                "type": "object",
                "properties": {
                    "blogPostIds": {
                        "description": "Array of blog post IDs to update",
                        "example": [
                            "uuid1",
                            "uuid2",
                            "uuid3"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "New status for all blog posts",
                        "enum": [
                            "draft",
                            "published",
                            "archived"
                        ],
                        "example": "published"
                    }
                },
                "required": [
                    "blogPostIds",
                    "status"
                ]
            },
            "SignupDto": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User email address",
                        "example": "user@example.com",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "description": "User password",
                        "example": "SecurePassword123!",
                        "minLength": 8
                    },
                    "first_name": {
                        "type": "string",
                        "description": "User first name",
                        "example": "John"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "User last name",
                        "example": "Doe"
                    }
                },
                "required": [
                    "email",
                    "password"
                ]
            },
            "LoginDto": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User email address",
                        "example": "user@example.com",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "description": "User password",
                        "example": "SecurePassword123!",
                        "minLength": 8
                    }
                },
                "required": [
                    "email",
                    "password"
                ]
            },
            "RefreshTokenDto": {
                "type": "object",
                "properties": {
                    "refresh_token": {
                        "type": "string",
                        "description": "Refresh token for obtaining new access token",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                },
                "required": [
                    "refresh_token"
                ]
            },
            "ForgotPasswordDto": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User email address for password reset",
                        "example": "user@example.com",
                        "format": "email"
                    }
                },
                "required": [
                    "email"
                ]
            },
            "ResetPasswordDto": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "Password reset token received via email",
                        "example": "abc123def456ghi789",
                        "format": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "New password for the user account",
                        "example": "NewSecurePassword456!",
                        "minLength": 8,
                        "format": "password"
                    }
                },
                "required": [
                    "token",
                    "password"
                ]
            },
            "CreateRequestDto": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID this request is for",
                        "example": "uuid"
                    },
                    "title": {
                        "type": "string",
                        "description": "Request title",
                        "example": "E-commerce Website Development",
                        "minLength": 3,
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string",
                        "description": "Request description",
                        "example": "Need a full-stack e-commerce solution with modern UI/UX..."
                    },
                    "budget_range": {
                        "type": "string",
                        "description": "Budget range",
                        "example": "$5,000 - $10,000",
                        "maxLength": 100
                    },
                    "timeline_expectation": {
                        "type": "string",
                        "description": "Timeline expectation",
                        "example": "3-6 months",
                        "maxLength": 100
                    },
                    "status": {
                        "type": "string",
                        "description": "Request status",
                        "enum": [
                            "draft",
                            "submitted",
                            "reviewing",
                            "quoted",
                            "accepted",
                            "in-progress",
                            "completed",
                            "cancelled"
                        ],
                        "example": "draft"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional request metadata",
                        "example": {}
                    }
                },
                "required": [
                    "project_id",
                    "title",
                    "description"
                ]
            },
            "RequestResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique request identifier",
                        "example": "uuid"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "User ID who created the request",
                        "example": "uuid"
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Project ID this request is for",
                        "example": "uuid"
                    },
                    "title": {
                        "type": "string",
                        "description": "Request title",
                        "example": "E-commerce Website Development"
                    },
                    "description": {
                        "type": "string",
                        "description": "Request description",
                        "example": "Need a full-stack e-commerce solution..."
                    },
                    "budget_range": {
                        "type": "string",
                        "description": "Budget range",
                        "example": "$5,000 - $10,000"
                    },
                    "timeline_expectation": {
                        "type": "string",
                        "description": "Timeline expectation",
                        "example": "3-6 months"
                    },
                    "status": {
                        "type": "string",
                        "description": "Request status",
                        "enum": [
                            "draft",
                            "submitted",
                            "reviewing",
                            "quoted",
                            "accepted",
                            "in-progress",
                            "completed",
                            "cancelled"
                        ],
                        "example": "submitted"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional request metadata",
                        "example": {}
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    },
                    "user": {
                        "type": "object",
                        "description": "User information"
                    },
                    "project": {
                        "type": "object",
                        "description": "Project information"
                    },
                    "attachments": {
                        "description": "Request attachments",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "quotes": {
                        "description": "Request quotes",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "id",
                    "user_id",
                    "project_id",
                    "title",
                    "description",
                    "budget_range",
                    "timeline_expectation",
                    "status",
                    "metadata",
                    "created_at",
                    "updated_at"
                ]
            },
            "UpdateRequestDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Request title",
                        "example": "E-commerce Website Development v2",
                        "minLength": 3,
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string",
                        "description": "Request description",
                        "example": "Updated requirements for e-commerce solution..."
                    },
                    "budget_range": {
                        "type": "string",
                        "description": "Budget range",
                        "example": "$7,000 - $12,000",
                        "maxLength": 100
                    },
                    "timeline_expectation": {
                        "type": "string",
                        "description": "Timeline expectation",
                        "example": "4-8 months",
                        "maxLength": 100
                    },
                    "status": {
                        "type": "string",
                        "description": "Request status",
                        "enum": [
                            "draft",
                            "submitted",
                            "reviewing",
                            "quoted",
                            "accepted",
                            "in-progress",
                            "completed",
                            "cancelled"
                        ],
                        "example": "submitted"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional request metadata",
                        "example": {}
                    }
                }
            },
            "CreateRequestAttachmentDto": {
                "type": "object",
                "properties": {
                    "media_id": {
                        "type": "string",
                        "description": "Media ID to attach",
                        "example": "uuid"
                    },
                    "purpose": {
                        "type": "string",
                        "description": "Attachment purpose",
                        "example": "reference",
                        "maxLength": 100
                    }
                },
                "required": [
                    "media_id"
                ]
            },
            "RequestAttachmentResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Attachment ID",
                        "example": "uuid"
                    },
                    "request_id": {
                        "type": "string",
                        "description": "Request ID",
                        "example": "uuid"
                    },
                    "media_id": {
                        "type": "string",
                        "description": "Media ID",
                        "example": "uuid"
                    },
                    "purpose": {
                        "type": "string",
                        "description": "Attachment purpose",
                        "example": "reference"
                    },
                    "media": {
                        "type": "object",
                        "description": "Media information"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    }
                },
                "required": [
                    "id",
                    "request_id",
                    "media_id",
                    "purpose",
                    "media",
                    "created_at"
                ]
            },
            "DuplicateRequestDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "New request title",
                        "example": "E-commerce Website Development (Copy)",
                        "minLength": 3,
                        "maxLength": 255
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Project ID for the duplicate",
                        "example": "uuid"
                    }
                }
            },
            "RequestListResponseDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "List of requests",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pagination": {
                        "type": "object",
                        "description": "Pagination metadata"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Filter metadata"
                    }
                },
                "required": [
                    "data",
                    "pagination",
                    "filters"
                ]
            },
            "RequestExportResponseDto": {
                "type": "object",
                "properties": {
                    "download_url": {
                        "type": "string",
                        "description": "Export file URL",
                        "example": "https://example.com/exports/requests.csv"
                    },
                    "filename": {
                        "type": "string",
                        "description": "Export filename",
                        "example": "requests_export_2024-01-01.csv"
                    },
                    "exported_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Export timestamp"
                    },
                    "record_count": {
                        "type": "number",
                        "description": "Number of requests exported",
                        "example": 150
                    }
                },
                "required": [
                    "download_url",
                    "filename",
                    "exported_at",
                    "record_count"
                ]
            },
            "QuoteResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique quote identifier",
                        "example": "uuid"
                    },
                    "request_id": {
                        "type": "string",
                        "description": "Request ID this quote is for",
                        "example": "uuid"
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Project ID this quote is for",
                        "example": "uuid"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "User ID who created the quote (admin)",
                        "example": "uuid"
                    },
                    "title": {
                        "type": "string",
                        "description": "Quote title",
                        "example": "Custom E-commerce Solution"
                    },
                    "description": {
                        "type": "string",
                        "description": "Quote description",
                        "example": "Complete e-commerce platform with..."
                    },
                    "amount": {
                        "type": "number",
                        "description": "Quote amount",
                        "example": 7500
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency code",
                        "example": "INR"
                    },
                    "status": {
                        "type": "string",
                        "description": "Quote status",
                        "enum": [
                            "draft",
                            "sent",
                            "pending",
                            "accepted",
                            "declined",
                            "expired"
                        ],
                        "example": "sent"
                    },
                    "expiration_date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Quote expiration date",
                        "example": "2024-02-01T00:00:00Z"
                    },
                    "is_expired": {
                        "type": "boolean",
                        "description": "Whether the quote has expired",
                        "example": false
                    },
                    "deliverables": {
                        "description": "Deliverables list",
                        "example": [
                            "Design",
                            "Development",
                            "Testing"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "timeline_estimate": {
                        "type": "string",
                        "description": "Timeline estimate",
                        "example": "8-12 weeks"
                    },
                    "terms_conditions": {
                        "type": "string",
                        "description": "Terms and conditions",
                        "example": "Standard terms apply..."
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional quote metadata",
                        "example": {}
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    },
                    "request": {
                        "type": "object",
                        "description": "Request information"
                    },
                    "project": {
                        "type": "object",
                        "description": "Project information"
                    },
                    "creator": {
                        "type": "object",
                        "description": "Quote creator information"
                    },
                    "payments": {
                        "description": "Quote payments",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "id",
                    "request_id",
                    "project_id",
                    "user_id",
                    "title",
                    "description",
                    "amount",
                    "currency",
                    "status",
                    "expiration_date",
                    "is_expired",
                    "deliverables",
                    "timeline_estimate",
                    "terms_conditions",
                    "metadata",
                    "created_at",
                    "updated_at"
                ]
            },
            "CreateQuoteDto": {
                "type": "object",
                "properties": {
                    "request_id": {
                        "type": "string",
                        "description": "Request ID this quote is for",
                        "example": "uuid"
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Project ID this quote is for",
                        "example": "uuid"
                    },
                    "title": {
                        "type": "string",
                        "description": "Quote title",
                        "example": "Custom E-commerce Solution",
                        "minLength": 3,
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string",
                        "description": "Quote description",
                        "example": "Complete e-commerce platform with modern UI/UX..."
                    },
                    "amount": {
                        "type": "number",
                        "description": "Quote amount",
                        "example": 7500,
                        "minimum": 0,
                        "maximum": 99999999999.99
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency code",
                        "example": "INR",
                        "maxLength": 3
                    },
                    "status": {
                        "type": "string",
                        "description": "Quote status",
                        "enum": [
                            "draft",
                            "sent",
                            "pending",
                            "accepted",
                            "declined",
                            "expired"
                        ],
                        "example": "draft"
                    },
                    "expiration_date": {
                        "type": "string",
                        "description": "Quote expiration date",
                        "example": "2024-02-01T00:00:00Z"
                    },
                    "deliverables": {
                        "type": "object",
                        "description": "Deliverables list",
                        "example": [
                            "Design",
                            "Development",
                            "Testing"
                        ]
                    },
                    "timeline_estimate": {
                        "type": "string",
                        "description": "Timeline estimate",
                        "example": "8-12 weeks",
                        "maxLength": 100
                    },
                    "terms_conditions": {
                        "type": "string",
                        "description": "Terms and conditions",
                        "example": "Standard terms apply..."
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional quote metadata",
                        "example": {}
                    }
                },
                "required": [
                    "request_id",
                    "project_id",
                    "title",
                    "description",
                    "amount"
                ]
            },
            "UpdateQuoteDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Quote title",
                        "example": "Custom E-commerce Solution v2",
                        "minLength": 3,
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string",
                        "description": "Quote description",
                        "example": "Updated e-commerce platform with enhanced features..."
                    },
                    "amount": {
                        "type": "number",
                        "description": "Quote amount",
                        "example": 8500,
                        "minimum": 0
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency code",
                        "example": "INR",
                        "maxLength": 3
                    },
                    "status": {
                        "type": "string",
                        "description": "Quote status",
                        "enum": [
                            "draft",
                            "sent",
                            "pending",
                            "accepted",
                            "declined",
                            "expired"
                        ],
                        "example": "sent"
                    },
                    "expiration_date": {
                        "type": "string",
                        "description": "Quote expiration date",
                        "example": "2024-03-01T00:00:00Z"
                    },
                    "deliverables": {
                        "description": "Deliverables list",
                        "example": [
                            "Design",
                            "Development",
                            "Testing",
                            "Deployment"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "timeline_estimate": {
                        "type": "string",
                        "description": "Timeline estimate",
                        "example": "10-14 weeks",
                        "maxLength": 100
                    },
                    "terms_conditions": {
                        "type": "string",
                        "description": "Terms and conditions",
                        "example": "Updated terms and conditions..."
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Additional quote metadata",
                        "example": {}
                    }
                }
            },
            "BulkQuoteStatusUpdateDto": {
                "type": "object",
                "properties": {
                    "quote_ids": {
                        "description": "Quote IDs to update",
                        "example": [
                            "uuid1",
                            "uuid2",
                            "uuid3"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "New status for all quotes",
                        "enum": [
                            "draft",
                            "sent",
                            "pending",
                            "accepted",
                            "declined",
                            "expired"
                        ],
                        "example": "sent"
                    },
                    "expiration_date": {
                        "type": "string",
                        "description": "Optional expiration date",
                        "example": "2024-03-01T00:00:00Z"
                    }
                },
                "required": [
                    "quote_ids",
                    "status"
                ]
            },
            "ProgressTimelineResponseDto": {
                "type": "object",
                "properties": {
                    "request_id": {
                        "type": "string",
                        "description": "Request ID",
                        "example": "uuid"
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Project ID",
                        "example": "uuid"
                    },
                    "current_progress": {
                        "type": "number",
                        "description": "Current progress percentage",
                        "example": 75
                    },
                    "total_entries": {
                        "type": "number",
                        "description": "Total progress entries",
                        "example": 12
                    },
                    "entries": {
                        "description": "List of progress entries",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "summary": {
                        "type": "object",
                        "description": "Progress summary"
                    }
                },
                "required": [
                    "project_id",
                    "current_progress",
                    "total_entries",
                    "entries"
                ]
            },
            "MilestoneResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique milestone identifier",
                        "example": "uuid"
                    },
                    "request_id": {
                        "type": "string",
                        "description": "Request ID this milestone belongs to",
                        "example": "uuid"
                    },
                    "title": {
                        "type": "string",
                        "description": "Milestone title",
                        "example": "User Authentication Module"
                    },
                    "description": {
                        "type": "string",
                        "description": "Milestone description",
                        "example": "Complete user authentication system..."
                    },
                    "amount": {
                        "type": "number",
                        "description": "Milestone amount",
                        "example": 1500
                    },
                    "status": {
                        "type": "string",
                        "description": "Milestone status",
                        "example": "completed"
                    },
                    "due_date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Due date"
                    },
                    "completed_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Completion timestamp"
                    },
                    "approved_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Approval timestamp"
                    },
                    "paid_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Payment timestamp"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    }
                },
                "required": [
                    "id",
                    "request_id",
                    "title",
                    "description",
                    "amount",
                    "status",
                    "created_at",
                    "updated_at"
                ]
            },
            "CreateProgressDto": {
                "type": "object",
                "properties": {
                    "request_id": {
                        "type": "string",
                        "description": "Request ID this progress entry belongs to",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "format": "uuid"
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Project ID this progress entry belongs to",
                        "example": "987fcdeb-51a2-43d7-8f9e-123456789abc",
                        "format": "uuid"
                    },
                    "title": {
                        "type": "string",
                        "description": "Progress entry title - brief summary of the work completed",
                        "example": "Completed user authentication module",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description of the progress made, including technical details and accomplishments",
                        "example": "Implemented JWT authentication with refresh tokens, password hashing, and user session management. Added role-based access control and secure password reset functionality.",
                        "minLength": 10
                    },
                    "percentage_complete": {
                        "type": "number",
                        "description": "Percentage of project completion (0-100). Optional field for quantitative progress tracking",
                        "example": 75,
                        "minimum": 0,
                        "maximum": 100
                    }
                },
                "required": [
                    "request_id",
                    "project_id",
                    "title",
                    "description"
                ]
            },
            "ProgressEntryResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique progress entry identifier",
                        "example": "uuid"
                    },
                    "request_id": {
                        "type": "string",
                        "description": "Request ID this progress entry belongs to",
                        "example": "uuid"
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Project ID this progress entry belongs to",
                        "example": "uuid"
                    },
                    "title": {
                        "type": "string",
                        "description": "Progress entry title",
                        "example": "Completed user authentication module"
                    },
                    "description": {
                        "type": "string",
                        "description": "Progress entry description",
                        "example": "Implemented JWT authentication..."
                    },
                    "percentage_complete": {
                        "type": "number",
                        "description": "Percentage complete",
                        "example": 75
                    },
                    "created_by": {
                        "type": "string",
                        "description": "User ID who created this entry",
                        "example": "uuid"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    },
                    "creator": {
                        "type": "object",
                        "description": "Creator information"
                    },
                    "request": {
                        "type": "object",
                        "description": "Request information"
                    },
                    "project": {
                        "type": "object",
                        "description": "Project information"
                    }
                },
                "required": [
                    "id",
                    "request_id",
                    "project_id",
                    "title",
                    "description",
                    "percentage_complete",
                    "created_by",
                    "created_at",
                    "updated_at"
                ]
            },
            "UpdateProgressDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Progress entry title - brief summary of the work completed",
                        "example": "Updated user authentication module",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description of the progress made, including technical details and accomplishments",
                        "example": "Enhanced JWT authentication with additional security features, improved error handling, and better user experience.",
                        "minLength": 10
                    },
                    "percentage_complete": {
                        "type": "number",
                        "description": "Percentage of project completion (0-100). Optional field for quantitative progress tracking",
                        "example": 85,
                        "minimum": 0,
                        "maximum": 100
                    }
                }
            },
            "CreateMilestoneDto": {
                "type": "object",
                "properties": {
                    "request_id": {
                        "type": "string",
                        "description": "Request ID this milestone belongs to",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "format": "uuid"
                    },
                    "title": {
                        "type": "string",
                        "description": "Milestone title - clear description of the deliverable",
                        "example": "User Authentication Module",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description of the milestone deliverables and requirements",
                        "example": "Complete user authentication system with JWT tokens, password hashing, and role-based access control.",
                        "minLength": 10
                    },
                    "amount": {
                        "type": "number",
                        "description": "Milestone payment amount in INR (minimum ₹1.00)",
                        "example": 1500,
                        "minimum": 1,
                        "maximum": 100000
                    },
                    "due_date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Due date for milestone completion (ISO 8601 format)",
                        "example": "2024-02-15T00:00:00Z"
                    }
                },
                "required": [
                    "request_id",
                    "title",
                    "amount"
                ]
            },
            "UpdateMilestoneDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Milestone title - clear description of the deliverable",
                        "example": "Updated User Authentication Module",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description of the milestone deliverables and requirements",
                        "example": "Enhanced user authentication system with additional security features and improved user experience.",
                        "minLength": 10
                    },
                    "amount": {
                        "type": "number",
                        "description": "Milestone payment amount in INR (minimum ₹1.00)",
                        "example": 1600,
                        "minimum": 1,
                        "maximum": 100000
                    },
                    "due_date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Due date for milestone completion (ISO 8601 format)",
                        "example": "2024-02-20T00:00:00Z"
                    }
                }
            },
            "UpdateMilestoneStatusDto": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Milestone status - must follow the workflow: pending → in-progress → completed → approved → paid",
                        "example": "completed",
                        "enum": [
                            "pending",
                            "in-progress",
                            "completed",
                            "approved",
                            "paid"
                        ]
                    }
                },
                "required": [
                    "status"
                ]
            },
            "ProgressSummaryResponseDto": {
                "type": "object",
                "properties": {
                    "request_id": {
                        "type": "string",
                        "description": "Request ID",
                        "example": "uuid"
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Project ID",
                        "example": "uuid"
                    },
                    "current_progress": {
                        "type": "number",
                        "description": "Current progress percentage",
                        "example": 75
                    },
                    "total_entries": {
                        "type": "number",
                        "description": "Total progress entries",
                        "example": 12
                    },
                    "last_updated": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last progress update timestamp"
                    },
                    "project_start_date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Project start date"
                    },
                    "estimated_completion_date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Estimated completion date"
                    },
                    "trend": {
                        "type": "string",
                        "description": "Progress trend",
                        "example": "increasing"
                    },
                    "recent_entries": {
                        "description": "Recent progress entries (last 5)",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "project_id",
                    "current_progress",
                    "total_entries",
                    "last_updated",
                    "project_start_date",
                    "trend"
                ]
            },
            "ConversationListResponseDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "List of conversations",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pagination": {
                        "type": "object",
                        "description": "Pagination metadata"
                    }
                },
                "required": [
                    "data",
                    "pagination"
                ]
            },
            "CreateConversationDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Conversation title (1-255 characters)",
                        "example": "Project Discussion",
                        "minLength": 1,
                        "maxLength": 255
                    },
                    "type": {
                        "type": "string",
                        "description": "Conversation type",
                        "enum": [
                            "direct",
                            "group",
                            "support"
                        ],
                        "example": "direct",
                        "default": "direct"
                    },
                    "participant_ids": {
                        "description": "Participant user IDs (1-50 participants, max 1 for direct conversations). Users can only add administrators as participants.",
                        "example": [
                            "550e8400-e29b-41d4-a716-446655440000",
                            "550e8400-e29b-41d4-a716-446655440001"
                        ],
                        "minItems": 1,
                        "maxItems": 50,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "title",
                    "participant_ids"
                ]
            },
            "ConversationResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique conversation identifier",
                        "example": "uuid"
                    },
                    "title": {
                        "type": "string",
                        "description": "Conversation title",
                        "example": "Project Discussion"
                    },
                    "type": {
                        "type": "string",
                        "description": "Conversation type",
                        "enum": [
                            "direct",
                            "group",
                            "support"
                        ],
                        "example": "direct"
                    },
                    "created_by": {
                        "type": "string",
                        "description": "User ID who created the conversation",
                        "example": "uuid"
                    },
                    "last_message_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last message timestamp",
                        "nullable": true
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    },
                    "archived": {
                        "type": "boolean",
                        "description": "Whether the conversation is archived",
                        "example": false
                    },
                    "participants": {
                        "description": "Conversation participants",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "last_message": {
                        "type": "object",
                        "description": "Last message in conversation"
                    },
                    "unread_count": {
                        "type": "number",
                        "description": "Unread message count for current user",
                        "example": 3
                    }
                },
                "required": [
                    "id",
                    "title",
                    "type",
                    "created_by",
                    "last_message_at",
                    "created_at",
                    "updated_at",
                    "archived",
                    "participants",
                    "unread_count"
                ]
            },
            "MessageListResponseDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "List of messages",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pagination": {
                        "type": "object",
                        "description": "Pagination metadata"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Filter metadata"
                    }
                },
                "required": [
                    "data",
                    "pagination",
                    "filters"
                ]
            },
            "SendMessageDto": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Message content (1-5000 characters)",
                        "example": "Hello, how is the project going?",
                        "minLength": 1,
                        "maxLength": 5000
                    },
                    "message_type": {
                        "type": "string",
                        "description": "Message type",
                        "enum": [
                            "text",
                            "image",
                            "file",
                            "system"
                        ],
                        "example": "text",
                        "default": "text"
                    },
                    "media_id": {
                        "type": "string",
                        "description": "Media file ID for attachments (required for IMAGE/FILE messages)",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "replied_to_id": {
                        "type": "string",
                        "description": "ID of message being replied to",
                        "example": "550e8400-e29b-41d4-a716-446655440001"
                    }
                },
                "required": [
                    "content"
                ]
            },
            "MessageResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique message identifier",
                        "example": "uuid"
                    },
                    "conversation_id": {
                        "type": "string",
                        "description": "Conversation ID",
                        "example": "uuid"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "User ID who sent the message",
                        "example": "uuid"
                    },
                    "content": {
                        "type": "string",
                        "description": "Message content",
                        "example": "Hello, how is the project going?"
                    },
                    "message_type": {
                        "type": "string",
                        "description": "Message type",
                        "enum": [
                            "text",
                            "image",
                            "file",
                            "system"
                        ],
                        "example": "text"
                    },
                    "media_id": {
                        "type": "string",
                        "description": "Media file ID for attachments",
                        "nullable": true
                    },
                    "replied_to_id": {
                        "type": "string",
                        "description": "ID of message being replied to",
                        "nullable": true
                    },
                    "read_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Read timestamp",
                        "nullable": true
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    },
                    "user": {
                        "type": "object",
                        "description": "User who sent the message"
                    },
                    "media": {
                        "type": "object",
                        "description": "Media attachment"
                    },
                    "replied_to": {
                        "type": "object",
                        "description": "Replied to message"
                    }
                },
                "required": [
                    "id",
                    "conversation_id",
                    "user_id",
                    "content",
                    "message_type",
                    "media_id",
                    "replied_to_id",
                    "read_at",
                    "created_at",
                    "updated_at",
                    "user"
                ]
            },
            "PortfolioResponseDto": {
                "type": "object",
                "properties": {
                    "total_projects": {
                        "type": "number",
                        "description": "Total number of published projects",
                        "example": 25
                    },
                    "featured_projects": {
                        "description": "Featured projects array",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "total_testimonials": {
                        "type": "number",
                        "description": "Total number of approved testimonials",
                        "example": 18
                    },
                    "tech_stack": {
                        "description": "Top technology stack entries",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "technologies": {
                        "description": "Technology breakdown",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "categories": {
                        "description": "Category breakdown",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "stats": {
                        "type": "object",
                        "description": "Portfolio statistics"
                    },
                    "projects": {
                        "description": "Portfolio projects",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "last_updated": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    }
                },
                "required": [
                    "total_projects",
                    "featured_projects",
                    "total_testimonials",
                    "tech_stack",
                    "technologies",
                    "categories",
                    "stats",
                    "projects",
                    "last_updated"
                ]
            },
            "PortfolioProjectsResponseDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "List of portfolio projects",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pagination": {
                        "type": "object",
                        "description": "Pagination metadata"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Filter metadata"
                    }
                },
                "required": [
                    "data",
                    "pagination",
                    "filters"
                ]
            },
            "PortfolioStatsResponseDto": {
                "type": "object",
                "properties": {
                    "total_projects": {
                        "type": "number",
                        "description": "Total number of projects"
                    },
                    "published_projects": {
                        "type": "number",
                        "description": "Number of published projects"
                    },
                    "featured_projects": {
                        "type": "number",
                        "description": "Number of featured projects"
                    },
                    "total_testimonials": {
                        "type": "number",
                        "description": "Total number of testimonials"
                    },
                    "average_rating": {
                        "type": "number",
                        "description": "Average rating"
                    },
                    "projects_by_status": {
                        "type": "object",
                        "description": "Projects by status breakdown"
                    },
                    "technology_usage": {
                        "description": "Technology usage statistics",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "projects": {
                        "type": "object",
                        "description": "Project statistics"
                    },
                    "tech_stack": {
                        "type": "object",
                        "description": "Technology stack statistics"
                    },
                    "testimonials": {
                        "type": "object",
                        "description": "Testimonial statistics"
                    },
                    "business": {
                        "type": "object",
                        "description": "Business statistics"
                    },
                    "last_updated": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp"
                    }
                },
                "required": [
                    "total_projects",
                    "published_projects",
                    "featured_projects",
                    "total_testimonials",
                    "average_rating",
                    "projects_by_status",
                    "technology_usage",
                    "projects",
                    "tech_stack",
                    "testimonials",
                    "business",
                    "last_updated"
                ]
            },
            "CreateContactMessageDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Sender name",
                        "example": "John Doe",
                        "maxLength": 255
                    },
                    "email": {
                        "type": "string",
                        "description": "Sender email",
                        "example": "john@example.com",
                        "maxLength": 255
                    },
                    "subject": {
                        "type": "string",
                        "description": "Message subject",
                        "example": "Project Inquiry",
                        "maxLength": 255
                    },
                    "message": {
                        "type": "string",
                        "description": "Message content",
                        "example": "I am interested in your services and would like to discuss a potential project..."
                    }
                },
                "required": [
                    "name",
                    "email",
                    "message"
                ]
            },
            "ContactMessageResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique contact message identifier",
                        "example": "550e8400-e29b-41d4-a716-446655440000",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string",
                        "description": "Full name of the sender",
                        "example": "John Doe",
                        "maxLength": 255
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the sender for contact purposes",
                        "example": "john@example.com",
                        "format": "email",
                        "maxLength": 255
                    },
                    "subject": {
                        "type": "string",
                        "description": "Optional subject line for the contact message",
                        "example": "Project Inquiry",
                        "maxLength": 255
                    },
                    "message": {
                        "type": "string",
                        "description": "Main content/body of the contact message",
                        "example": "I am interested in your services and would like to discuss a potential project. Please contact me to discuss the details."
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the contact message",
                        "enum": [
                            "new",
                            "read",
                            "replied",
                            "archived"
                        ],
                        "example": "new"
                    },
                    "ip_address": {
                        "type": "string",
                        "description": "IP address of the sender (may be masked for privacy)",
                        "example": "192.168.1.***"
                    },
                    "user_agent": {
                        "type": "string",
                        "description": "User agent string from sender browser",
                        "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                    },
                    "assigned_to": {
                        "type": "string",
                        "description": "ID of the user assigned to handle this message",
                        "example": "550e8400-e29b-41d4-a716-446655440000",
                        "format": "uuid"
                    },
                    "replied_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Timestamp when the message was replied to (null if not replied)",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "admin_notes": {
                        "type": "string",
                        "description": "Admin notes about the contact message",
                        "example": "Contacted client, waiting for more details"
                    },
                    "admin_response": {
                        "type": "string",
                        "description": "Admin response to the contact message",
                        "example": "Thank you for your inquiry. We will get back to you soon."
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Timestamp when the message was created",
                        "example": "2024-01-15T09:15:00Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Timestamp when the message was last updated",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "assignee": {
                        "type": "object",
                        "description": "Information about the assigned user (if any)"
                    },
                    "time_since_created": {
                        "type": "string",
                        "description": "Human-readable time elapsed since message creation",
                        "example": "2h ago"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "email",
                    "message",
                    "status",
                    "created_at",
                    "updated_at"
                ]
            },
            "ContactMessageListResponseDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "List of contact messages",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pagination": {
                        "type": "object",
                        "description": "Pagination metadata"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Filter metadata"
                    }
                },
                "required": [
                    "data",
                    "pagination",
                    "filters"
                ]
            },
            "UpdateContactMessageStatusDto": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "New status for the contact message",
                        "enum": [
                            "new",
                            "read",
                            "replied",
                            "archived"
                        ],
                        "example": "read"
                    },
                    "assigned_to": {
                        "type": "string",
                        "description": "User ID to assign the message to",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "admin_response": {
                        "type": "string",
                        "description": "Admin response to the contact message",
                        "example": "Thank you for your inquiry. We will get back to you soon."
                    },
                    "admin_notes": {
                        "type": "string",
                        "description": "Admin notes about the contact message",
                        "example": "Contacted client, waiting for more details"
                    }
                },
                "required": [
                    "status"
                ]
            },
            "ContactMessageActionResponseDto": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Success message",
                        "example": "Contact message status updated successfully"
                    },
                    "data": {
                        "type": "object",
                        "description": "Optional additional data"
                    },
                    "assigned_to": {
                        "type": "string",
                        "description": "Assigned to user ID",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    }
                },
                "required": [
                    "message"
                ]
            },
            "ContactMessageBulkActionResponseDto": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Success message",
                        "example": "Contact messages updated successfully"
                    },
                    "success_count": {
                        "type": "number",
                        "description": "Number of messages affected",
                        "example": 25
                    },
                    "errors": {
                        "description": "Optional error details for failed operations",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "message",
                    "success_count"
                ]
            },
            "ContactMessageStatsDto": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "number",
                        "description": "Total contact messages",
                        "example": 150
                    },
                    "new": {
                        "type": "number",
                        "description": "New messages count",
                        "example": 25
                    },
                    "read": {
                        "type": "number",
                        "description": "Read messages count",
                        "example": 50
                    },
                    "replied": {
                        "type": "number",
                        "description": "Replied messages count",
                        "example": 75
                    },
                    "archived": {
                        "type": "number",
                        "description": "Archived messages count",
                        "example": 0
                    },
                    "average_response_time_hours": {
                        "type": "number",
                        "description": "Average response time in hours",
                        "example": 4.5
                    },
                    "messages_by_status": {
                        "type": "object",
                        "description": "Messages by status",
                        "example": {
                            "new": 25,
                            "read": 50,
                            "replied": 75,
                            "archived": 0
                        }
                    },
                    "messages_by_month": {
                        "type": "object",
                        "description": "Messages by month",
                        "example": {
                            "2024-01": 45,
                            "2024-02": 60
                        }
                    }
                },
                "required": [
                    "total",
                    "new",
                    "read",
                    "replied",
                    "archived",
                    "average_response_time_hours",
                    "messages_by_status",
                    "messages_by_month"
                ]
            },
            "CreateSystemConfigDto": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Configuration key (unique identifier)",
                        "example": "smtp.enabled",
                        "maxLength": 255
                    },
                    "value": {
                        "type": "string",
                        "description": "Configuration value",
                        "example": "true"
                    },
                    "type": {
                        "type": "string",
                        "description": "Configuration value type",
                        "enum": [
                            "string",
                            "json",
                            "number",
                            "boolean"
                        ],
                        "example": "boolean",
                        "default": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "Configuration description",
                        "example": "Enable SMTP email sending"
                    },
                    "is_public": {
                        "type": "boolean",
                        "description": "Whether configuration is publicly accessible",
                        "example": false,
                        "default": false
                    }
                },
                "required": [
                    "key",
                    "value",
                    "type",
                    "is_public"
                ]
            },
            "SystemConfigResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Configuration ID",
                        "example": "uuid"
                    },
                    "key": {
                        "type": "string",
                        "description": "Configuration key",
                        "example": "smtp.enabled"
                    },
                    "value": {
                        "type": "string",
                        "description": "Configuration value",
                        "example": "true"
                    },
                    "type": {
                        "type": "string",
                        "description": "Configuration type",
                        "enum": [
                            "string",
                            "json",
                            "number",
                            "boolean"
                        ],
                        "example": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Configuration description",
                        "example": "Enable SMTP email sending"
                    },
                    "is_public": {
                        "type": "boolean",
                        "description": "Whether configuration is public",
                        "example": false
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp",
                        "example": "2024-01-01T00:00:00.000Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Last update timestamp",
                        "example": "2024-01-01T00:00:00.000Z"
                    },
                    "parsed_value": {
                        "type": "object",
                        "description": "Parsed value based on type",
                        "example": true
                    },
                    "is_boolean": {
                        "type": "boolean",
                        "description": "Whether value is boolean",
                        "example": true
                    },
                    "is_number": {
                        "type": "boolean",
                        "description": "Whether value is number",
                        "example": false
                    },
                    "is_json": {
                        "type": "boolean",
                        "description": "Whether value is JSON",
                        "example": false
                    }
                },
                "required": [
                    "id",
                    "key",
                    "value",
                    "type",
                    "is_public",
                    "created_at",
                    "updated_at",
                    "is_boolean",
                    "is_number",
                    "is_json"
                ]
            },
            "UpdateSystemConfigDto": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "Configuration value",
                        "example": "false"
                    },
                    "type": {
                        "type": "string",
                        "description": "Configuration value type",
                        "enum": [
                            "string",
                            "json",
                            "number",
                            "boolean"
                        ],
                        "example": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Configuration description",
                        "example": "Disable SMTP email sending"
                    },
                    "is_public": {
                        "type": "boolean",
                        "description": "Whether configuration is publicly accessible",
                        "example": true
                    }
                }
            },
            "CreateApiKeyDto": {
                "type": "object",
                "properties": {
                    "key_name": {
                        "type": "string",
                        "description": "API key name (unique identifier)",
                        "example": "webhook-service",
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string",
                        "description": "API key description",
                        "example": "API key for webhook service authentication",
                        "maxLength": 1000
                    },
                    "expires_at": {
                        "type": "string",
                        "description": "API key expiration date",
                        "example": "2024-12-31T23:59:59.000Z"
                    },
                    "scopes": {
                        "description": "API key scopes/permissions",
                        "example": [
                            "admin:system:read",
                            "admin:users:read"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "key_name"
                ]
            },
            "ApiKeyRevokeDto": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string",
                        "description": "Reason for revoking the API key",
                        "example": "Security incident - compromised key",
                        "maxLength": 500
                    },
                    "notes": {
                        "type": "string",
                        "description": "Additional notes or context",
                        "example": "Key was used in unauthorized access attempt",
                        "maxLength": 1000
                    }
                }
            },
            "AuditLogResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Audit log ID",
                        "example": "uuid"
                    },
                    "action": {
                        "type": "string",
                        "description": "Action performed",
                        "example": "CREATE_USER"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "User ID who performed the action",
                        "example": "uuid"
                    },
                    "resource_type": {
                        "type": "string",
                        "description": "Resource type",
                        "example": "user"
                    },
                    "resource_id": {
                        "type": "string",
                        "description": "Resource ID",
                        "example": "uuid"
                    },
                    "previous_values": {
                        "type": "object",
                        "description": "Previous values (for updates)",
                        "example": {
                            "name": "Old Name"
                        }
                    },
                    "new_values": {
                        "type": "object",
                        "description": "New values (for creates/updates)",
                        "example": {
                            "name": "New Name"
                        }
                    },
                    "details": {
                        "type": "object",
                        "description": "Additional details",
                        "example": {
                            "ip_address": "192.168.1.1"
                        }
                    },
                    "ip_address": {
                        "type": "string",
                        "description": "IP address",
                        "example": "192.168.1.1"
                    },
                    "user_agent": {
                        "type": "string",
                        "description": "User agent",
                        "example": "Mozilla/5.0..."
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Creation timestamp",
                        "example": "2024-01-01T00:00:00.000Z"
                    },
                    "user": {
                        "type": "object",
                        "description": "User information (if available)",
                        "example": {
                            "id": "uuid",
                            "email": "user@example.com",
                            "first_name": "John",
                            "last_name": "Doe"
                        }
                    }
                },
                "required": [
                    "id",
                    "action",
                    "resource_type",
                    "resource_id",
                    "created_at"
                ]
            },
            "AuditLogListResponseDto": {
                "type": "object",
                "properties": {
                    "audit_logs": {
                        "description": "List of audit logs",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuditLogResponseDto"
                        }
                    },
                    "pagination": {
                        "type": "object",
                        "description": "Pagination information",
                        "example": {
                            "page": 1,
                            "limit": 20,
                            "total": 100,
                            "total_pages": 5,
                            "has_next": true,
                            "has_prev": false
                        }
                    }
                },
                "required": [
                    "audit_logs",
                    "pagination"
                ]
            },
            "AuditLogStatsResponseDto": {
                "type": "object",
                "properties": {
                    "total_logs": {
                        "type": "number",
                        "description": "Total audit logs count",
                        "example": 1000
                    },
                    "logs_by_action": {
                        "type": "object",
                        "description": "Logs count by action",
                        "example": {
                            "CREATE_USER": 50,
                            "UPDATE_USER": 100,
                            "DELETE_USER": 10,
                            "LOGIN": 200,
                            "LOGOUT": 150
                        }
                    },
                    "logs_by_resource_type": {
                        "type": "object",
                        "description": "Logs count by resource type",
                        "example": {
                            "user": 300,
                            "project": 200,
                            "request": 150,
                            "quote": 100,
                            "payment": 50
                        }
                    },
                    "logs_by_user": {
                        "type": "object",
                        "description": "Logs count by user",
                        "example": {
                            "user-uuid-1": 50,
                            "user-uuid-2": 30,
                            "admin-uuid": 100
                        }
                    },
                    "logs_by_period": {
                        "type": "object",
                        "description": "Logs count by time period",
                        "example": {
                            "today": 25,
                            "this_week": 150,
                            "this_month": 600,
                            "this_year": 1000
                        }
                    },
                    "top_actions": {
                        "description": "Top actions by count",
                        "example": [
                            {
                                "action": "LOGIN",
                                "count": 200
                            },
                            {
                                "action": "UPDATE_USER",
                                "count": 100
                            },
                            {
                                "action": "CREATE_USER",
                                "count": 50
                            }
                        ],
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "top_users": {
                        "description": "Top users by activity",
                        "example": [
                            {
                                "user_id": "admin-uuid",
                                "count": 100
                            },
                            {
                                "user_id": "user-uuid-1",
                                "count": 50
                            },
                            {
                                "user_id": "user-uuid-2",
                                "count": 30
                            }
                        ],
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "activity_trends": {
                        "description": "Activity trends over time",
                        "example": [
                            {
                                "date": "2024-01-01",
                                "count": 25
                            },
                            {
                                "date": "2024-01-02",
                                "count": 30
                            },
                            {
                                "date": "2024-01-03",
                                "count": 20
                            }
                        ],
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                },
                "required": [
                    "total_logs",
                    "logs_by_action",
                    "logs_by_resource_type",
                    "logs_by_user",
                    "logs_by_period",
                    "top_actions",
                    "top_users",
                    "activity_trends"
                ]
            },
            "AuditLogExportDto": {
                "type": "object",
                "properties": {
                    "format": {
                        "type": "string",
                        "description": "Export format",
                        "enum": [
                            "csv",
                            "json",
                            "excel"
                        ],
                        "example": "csv",
                        "default": "csv"
                    },
                    "start_date": {
                        "type": "string",
                        "description": "Start date for export (ISO 8601)",
                        "example": "2024-01-01T00:00:00.000Z"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for export (ISO 8601)",
                        "example": "2024-12-31T23:59:59.999Z"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "Filter by user ID",
                        "example": "uuid"
                    },
                    "resource_type": {
                        "type": "string",
                        "description": "Filter by resource type",
                        "example": "user"
                    },
                    "action": {
                        "type": "string",
                        "description": "Filter by action",
                        "example": "CREATE_USER"
                    },
                    "ip_address": {
                        "type": "string",
                        "description": "Filter by IP address",
                        "example": "192.168.1.1"
                    },
                    "include_sensitive_data": {
                        "type": "boolean",
                        "description": "Include sensitive data in export",
                        "example": false,
                        "default": false
                    },
                    "description": {
                        "type": "string",
                        "description": "Export description for tracking",
                        "example": "Monthly audit log export for compliance"
                    }
                },
                "required": [
                    "format",
                    "include_sensitive_data"
                ]
            },
            "BulkWebhookRetryFiltersDto": {
                "type": "object",
                "properties": {
                    "event_type": {
                        "type": "string",
                        "description": "Filter by event type",
                        "example": "payment.completed"
                    },
                    "source": {
                        "type": "string",
                        "description": "Filter by webhook source",
                        "example": "test-service"
                    },
                    "start_date": {
                        "type": "string",
                        "description": "Filter by start date (ISO 8601)",
                        "example": "2024-01-01T00:00:00.000Z"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "Filter by end date (ISO 8601)",
                        "example": "2024-01-31T23:59:59.999Z"
                    },
                    "processed": {
                        "type": "boolean",
                        "description": "Filter by processing status",
                        "example": false
                    },
                    "min_attempts": {
                        "type": "number",
                        "description": "Minimum processing attempts",
                        "example": 1
                    }
                }
            },
            "BulkWebhookRetryDto": {
                "type": "object",
                "properties": {
                    "filters": {
                        "description": "Filter criteria for webhooks to retry",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BulkWebhookRetryFiltersDto"
                            }
                        ]
                    },
                    "max_retries": {
                        "type": "number",
                        "description": "Maximum number of webhooks to retry",
                        "example": 10,
                        "default": 5
                    },
                    "reason": {
                        "type": "string",
                        "description": "Retry reason for bulk operation",
                        "example": "Bulk retry after service maintenance"
                    }
                },
                "required": [
                    "filters"
                ]
            }
        }
    }
}